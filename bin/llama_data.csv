old_filepath,new_filepath,commitSHA,parentcommitSHA,commit_message,diff_myers1,diff_hist2,Discrepancy
README.md,README.md,9a1343878e8275dbb19d13776fce67755e1cb9f1,7931917a3f20ce0875e6246143dc522224c3bed2,Update README.md,"diff --git a/README.md b/README.md
index 569ed0c..f6c4d42 100644
--- a/README.md
+++ b/README.md
@@ -111,10 +111,6 @@ Our model and weights are licensed for both researchers and commercial entities,
 
 See the [LICENSE](..) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
-## References
-
-1. [Research Paper](https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/)
-2. [Llama 2 technical overview](https://ai.meta.com/resources/models-and-libraries/llama)
-3. [Open Innovation AI Research Community](https://ai.meta.com/llama/open-innovation-ai-research-community/)
+## Questions
 
 For common questions, the FAQ can be found [here](https://llama.meta.com/faq) which will be kept up to date over time as new questions arise. ","diff --git a/README.md b/README.md
index 569ed0c..f6c4d42 100644
--- a/README.md
+++ b/README.md
@@ -111,10 +111,6 @@ Our model and weights are licensed for both researchers and commercial entities,
 
 See the [LICENSE](..) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
-## References
-
-1. [Research Paper](https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/)
-2. [Llama 2 technical overview](https://ai.meta.com/resources/models-and-libraries/llama)
-3. [Open Innovation AI Research Community](https://ai.meta.com/llama/open-innovation-ai-research-community/)
+## Questions
 
 For common questions, the FAQ can be found [here](https://llama.meta.com/faq) which will be kept up to date over time as new questions arise. ",No
README.md,README.md,d9a94361e57bfaa08b54c3fd76037868dbe088c4,9a1343878e8275dbb19d13776fce67755e1cb9f1,Update README.md,"diff --git a/README.md b/README.md
index f6c4d42..8666be0 100644
--- a/README.md
+++ b/README.md
@@ -2,7 +2,7 @@
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly. 
 
-This release includes model weights and starting code for pre-trained and fine-tuned Llama language models — ranging from 7B to 70B parameters.
+This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 7B to 70B parameters.
 
 This repository is intended as a minimal example to load Llama 3 models and run inference. For more detailed examples, see [llama-recipes](https://github.com/facebookresearch/llama-recipes/).
 ","diff --git a/README.md b/README.md
index f6c4d42..8666be0 100644
--- a/README.md
+++ b/README.md
@@ -2,7 +2,7 @@
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly. 
 
-This release includes model weights and starting code for pre-trained and fine-tuned Llama language models — ranging from 7B to 70B parameters.
+This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 7B to 70B parameters.
 
 This repository is intended as a minimal example to load Llama 3 models and run inference. For more detailed examples, see [llama-recipes](https://github.com/facebookresearch/llama-recipes/).
 ",No
README.md,README.md,beb213ad429639c5574bbd6323fb4f25c5c606ab,d9a94361e57bfaa08b54c3fd76037868dbe088c4,Update README.md,"diff --git a/README.md b/README.md
index 8666be0..732a600 100644
--- a/README.md
+++ b/README.md
@@ -22,7 +22,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 ## Quick Start
 
-You can follow the steps below to quickly get up and running with Llama 2 models. These steps will let you run quick inference locally. For more examples, see the [Llama 2 recipes repository](https://github.com/facebookresearch/llama-recipes). 
+You can follow the steps below to quickly get up and running with Llama 2 models. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes). 
 
 1. In a conda env with PyTorch / CUDA available clone and download this repository.
 ","diff --git a/README.md b/README.md
index 8666be0..732a600 100644
--- a/README.md
+++ b/README.md
@@ -22,7 +22,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 ## Quick Start
 
-You can follow the steps below to quickly get up and running with Llama 2 models. These steps will let you run quick inference locally. For more examples, see the [Llama 2 recipes repository](https://github.com/facebookresearch/llama-recipes). 
+You can follow the steps below to quickly get up and running with Llama 2 models. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes). 
 
 1. In a conda env with PyTorch / CUDA available clone and download this repository.
 ",No
llama/__init__.py,llama/__init__.py,e2d3fd0e21f557942be2e1af70091c2e854d674d,3b97ea54f370e5f58f106ef170336b5619c8099b,Remove need for decode_message,"diff --git a/llama/__init__.py b/llama/__init__.py
index 17e02a5..9aa0c99 100644
--- a/llama/__init__.py
+++ b/llama/__init__.py
@@ -1,6 +1,6 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
 
-from .generation import Dialog, Llama
+from .generation import Llama
 from .model import ModelArgs, Transformer
-from .tokenizer import Tokenizer
+from .tokenizer import Dialog, Tokenizer","diff --git a/llama/__init__.py b/llama/__init__.py
index 17e02a5..9aa0c99 100644
--- a/llama/__init__.py
+++ b/llama/__init__.py
@@ -1,6 +1,6 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
 
-from .generation import Dialog, Llama
+from .generation import Llama
 from .model import ModelArgs, Transformer
-from .tokenizer import Tokenizer
+from .tokenizer import Dialog, Tokenizer",No
llama/generation.py,llama/generation.py,e2d3fd0e21f557942be2e1af70091c2e854d674d,3b97ea54f370e5f58f106ef170336b5619c8099b,Remove need for decode_message,"diff --git a/llama/generation.py b/llama/generation.py
index 584c0a3..f6d3bda 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -17,7 +17,7 @@ from fairscale.nn.model_parallel.initialize import (
 )
 
 from llama.model import ModelArgs, Transformer
-from llama.tokenizer import Dialog, Message, MessageFormat, Tokenizer
+from llama.tokenizer import Dialog, Message, ChatFormat, Tokenizer
 
 
 class CompletionPrediction(TypedDict, total=False):
@@ -109,7 +109,7 @@ class Llama:
     def __init__(self, model: Transformer, tokenizer: Tokenizer):
         self.model = model
         self.tokenizer = tokenizer
-        self.formatter = MessageFormat(tokenizer)
+        self.formatter = ChatFormat(tokenizer)
 
     @torch.inference_mode()
     def generate(
@@ -212,8 +212,8 @@ class Llama:
             for stop_token in self.tokenizer.stop_tokens:
                 try:
                     eos_idx = toks.index(stop_token)
-                    toks = toks[: eos_idx + 1]
-                    probs = probs[: eos_idx + 1] if logprobs else None
+                    toks = toks[: eos_idx]
+                    probs = probs[: eos_idx] if logprobs else None
                 except ValueError:
                     pass
             out_tokens.append(toks)
@@ -307,7 +307,7 @@ class Llama:
             max_gen_len = self.model.params.max_seq_len - 1
 
         prompt_tokens = [
-            self.formatter.encode_dialog(dialog, bos=True, eos=False)
+            self.formatter.encode_dialog_prompt(dialog)
             for dialog in dialogs
         ]
         generation_tokens, generation_logprobs = self.generate(
@@ -320,14 +320,22 @@ class Llama:
         if logprobs:
             return [
                 {
-                    ""generation"": self.formatter.decode_message(t).message,
+                    ""generation"": {
+                        ""role"": ""assistant"",
+                        ""content"": self.tokenizer.decode(t),
+                    },
                     ""tokens"": [self.tokenizer.decode([x]) for x in t],
                     ""logprobs"": logprobs_i,
                 }
                 for t, logprobs_i in zip(generation_tokens, generation_logprobs)
             ]
         return [
-            {""generation"": self.formatter.decode_message(t).message}
+            {
+                ""generation"": {
+                    ""role"": ""assistant"",
+                    ""content"": self.tokenizer.decode(t),
+                },
+            }
             for t in generation_tokens
         ]
 ","diff --git a/llama/generation.py b/llama/generation.py
index 584c0a3..f6d3bda 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -17,7 +17,7 @@ from fairscale.nn.model_parallel.initialize import (
 )
 
 from llama.model import ModelArgs, Transformer
-from llama.tokenizer import Dialog, Message, MessageFormat, Tokenizer
+from llama.tokenizer import Dialog, Message, ChatFormat, Tokenizer
 
 
 class CompletionPrediction(TypedDict, total=False):
@@ -109,7 +109,7 @@ class Llama:
     def __init__(self, model: Transformer, tokenizer: Tokenizer):
         self.model = model
         self.tokenizer = tokenizer
-        self.formatter = MessageFormat(tokenizer)
+        self.formatter = ChatFormat(tokenizer)
 
     @torch.inference_mode()
     def generate(
@@ -212,8 +212,8 @@ class Llama:
             for stop_token in self.tokenizer.stop_tokens:
                 try:
                     eos_idx = toks.index(stop_token)
-                    toks = toks[: eos_idx + 1]
-                    probs = probs[: eos_idx + 1] if logprobs else None
+                    toks = toks[: eos_idx]
+                    probs = probs[: eos_idx] if logprobs else None
                 except ValueError:
                     pass
             out_tokens.append(toks)
@@ -307,7 +307,7 @@ class Llama:
             max_gen_len = self.model.params.max_seq_len - 1
 
         prompt_tokens = [
-            self.formatter.encode_dialog(dialog, bos=True, eos=False)
+            self.formatter.encode_dialog_prompt(dialog)
             for dialog in dialogs
         ]
         generation_tokens, generation_logprobs = self.generate(
@@ -320,14 +320,22 @@ class Llama:
         if logprobs:
             return [
                 {
-                    ""generation"": self.formatter.decode_message(t).message,
+                    ""generation"": {
+                        ""role"": ""assistant"",
+                        ""content"": self.tokenizer.decode(t),
+                    },
                     ""tokens"": [self.tokenizer.decode([x]) for x in t],
                     ""logprobs"": logprobs_i,
                 }
                 for t, logprobs_i in zip(generation_tokens, generation_logprobs)
             ]
         return [
-            {""generation"": self.formatter.decode_message(t).message}
+            {
+                ""generation"": {
+                    ""role"": ""assistant"",
+                    ""content"": self.tokenizer.decode(t),
+                },
+            }
             for t in generation_tokens
         ]
 ",No
llama/tokenizer.py,llama/tokenizer.py,e2d3fd0e21f557942be2e1af70091c2e854d674d,3b97ea54f370e5f58f106ef170336b5619c8099b,Remove need for decode_message,"diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index ee5acfd..7da5679 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -12,9 +12,7 @@ from typing import (
     Iterator,
     List,
     Literal,
-    NamedTuple,
     Sequence,
-    Tuple,
     TypedDict,
     Union,
 )
@@ -29,7 +27,7 @@ logger = getLogger(__name__)
 Role = Literal[""system"", ""user"", ""assistant""]
 
 
-class Message(TypedDict, total=False):
+class Message(TypedDict):
     role: Role
     content: str
 
@@ -202,16 +200,7 @@ class Tokenizer:
         yield s[slice_start:]
 
 
-class ParseError(ValueError):
-    pass
-
-
-class ParseResult(NamedTuple):
-    remainder: Sequence[int]
-    message: Message
-
-
-class MessageFormat:
+class ChatFormat:
     def __init__(self, tokenizer: Tokenizer):
         self.tokenizer = tokenizer
 
@@ -225,87 +214,22 @@ class MessageFormat:
 
     def encode_message(self, message: Message) -> List[int]:
         tokens = self.encode_header(message)
-        if message.get(""content"", """"):
-            tokens.extend(
-                self.tokenizer.encode(message[""content""].strip(), bos=False, eos=False)
-            )
+        tokens.extend(
+            self.tokenizer.encode(message[""content""].strip(), bos=False, eos=False)
+        )
         tokens.append(self.tokenizer.special_tokens[""<|eot_id|>""])
         return tokens
 
-    def encode_dialog(self, dialog: Dialog, *, bos: bool, eos: bool) -> List[int]:
+    def encode_dialog_prompt(self, dialog: Dialog) -> List[int]:
         tokens = []
-        if bos:
-            tokens.append(self.tokenizer.special_tokens[""<|begin_of_text|>""])
+        tokens.append(self.tokenizer.special_tokens[""<|begin_of_text|>""])
         for message in dialog:
             tokens.extend(self.encode_message(message))
-
-        if eos:
-            # Add EOS token at the end of this dialog if required
-            tokens.append(self.tokenizer.special_tokens[""<|end_of_text|>""])
-        elif dialog[-1][""role""] == ""assistant"":
-            # Remove <|eot_id|> if the last turn is from Assistant to allow completion
-            tokens.pop()
+        # If dialog does not end yet with a start of an assistant message to
+        # complete, we add it.
+        if not dialog or dialog[-1][""role""] != ""assistant"":
+            tokens.extend(self.encode_message({""role"": ""assistant"", ""content"": """"}))
+        # Remove <|eot_id|> from Assistant message to allow completion
+        eot_id = tokens.pop()
+        assert eot_id == self.tokenizer.special_tokens[""<|eot_id|>""]
         return tokens
-
-    def decode_header(self, tokens: Sequence[int]) -> ParseResult:
-        tokens, _ = self._take(tokens, ""<|start_header_id|>"")
-        tokens, tokens_role, _ = self._take_until(tokens, ""<|end_header_id|>"")
-        tokens, _ = self._take(tokens, ""\n\n"")
-        role = self.tokenizer.decode(tokens_role)
-        return ParseResult(tokens, {""role"": cast(Role, role)})
-
-    def decode_message(self, tokens: Sequence[int]) -> ParseResult:
-        tokens, message = self.decode_header(tokens)
-        # Try finding the eot, but if the message was cut short by max
-        # sequence length, assume the entire remainder is the message body.
-        try:
-            tokens, tokens_content, _ = self._take_until(tokens, ""<|eot_id|>"")
-        except ParseError:
-            tokens, tokens_content = [], tokens
-        message[""content""] = self.tokenizer.decode(tokens_content)
-        return ParseResult(tokens, message)
-
-    def _take(
-        self, tokens: Sequence[int], *expected_strs: str
-    ) -> Tuple[Sequence[int], Sequence[int]]:
-        """"""Assert that tokens starts with one of the expected sequences.""""""
-        for expected_str in expected_strs:
-            t = self.tokenizer.encode(
-                expected_str, bos=False, eos=False, allowed_special=""all""
-            )
-            if len(tokens) < len(t):
-                continue
-            if tokens[: len(t)] != t:
-                continue
-            return tokens[len(t) :], tokens[: len(t)]
-        raise ParseError(f""Expected any of {expected_strs!r}"")
-
-    def _take_until(
-        self, tokens: Sequence[int], *expected_strs: str
-    ) -> Tuple[Sequence[int], Sequence[int], Sequence[int]]:
-        """"""Take tokens from `tokens` until one of the expected sequences occurs.""""""
-        best = None
-        for expected_str in expected_strs:
-            t = self.tokenizer.encode(
-                expected_str, bos=False, eos=False, allowed_special=""all""
-            )
-            if len(tokens) < len(t):
-                continue
-
-            offset = 0
-            try:
-                while offset < len(tokens):
-                    offset = tokens.index(t[0], offset)
-                    if tokens[offset : offset + len(t)] == t:
-                        if best is None or offset < best[0]:
-                            best = (offset, t)
-                        break
-            except ValueError:
-                continue
-        if best is not None:
-            return (
-                tokens[best[0] + len(best[1]) :],  # next tokens
-                tokens[: best[0]],  # tokens up to found sequence,
-                tokens[best[0] : best[0] + len(best[1])],  # found sequence itself
-            )
-        raise ParseError(f""Expected tokens followed by any of {expected_strs!r}"")","diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index ee5acfd..7da5679 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -12,9 +12,7 @@ from typing import (
     Iterator,
     List,
     Literal,
-    NamedTuple,
     Sequence,
-    Tuple,
     TypedDict,
     Union,
 )
@@ -29,7 +27,7 @@ logger = getLogger(__name__)
 Role = Literal[""system"", ""user"", ""assistant""]
 
 
-class Message(TypedDict, total=False):
+class Message(TypedDict):
     role: Role
     content: str
 
@@ -202,16 +200,7 @@ class Tokenizer:
         yield s[slice_start:]
 
 
-class ParseError(ValueError):
-    pass
-
-
-class ParseResult(NamedTuple):
-    remainder: Sequence[int]
-    message: Message
-
-
-class MessageFormat:
+class ChatFormat:
     def __init__(self, tokenizer: Tokenizer):
         self.tokenizer = tokenizer
 
@@ -225,87 +214,22 @@ class MessageFormat:
 
     def encode_message(self, message: Message) -> List[int]:
         tokens = self.encode_header(message)
-        if message.get(""content"", """"):
-            tokens.extend(
-                self.tokenizer.encode(message[""content""].strip(), bos=False, eos=False)
-            )
+        tokens.extend(
+            self.tokenizer.encode(message[""content""].strip(), bos=False, eos=False)
+        )
         tokens.append(self.tokenizer.special_tokens[""<|eot_id|>""])
         return tokens
 
-    def encode_dialog(self, dialog: Dialog, *, bos: bool, eos: bool) -> List[int]:
+    def encode_dialog_prompt(self, dialog: Dialog) -> List[int]:
         tokens = []
-        if bos:
-            tokens.append(self.tokenizer.special_tokens[""<|begin_of_text|>""])
+        tokens.append(self.tokenizer.special_tokens[""<|begin_of_text|>""])
         for message in dialog:
             tokens.extend(self.encode_message(message))
-
-        if eos:
-            # Add EOS token at the end of this dialog if required
-            tokens.append(self.tokenizer.special_tokens[""<|end_of_text|>""])
-        elif dialog[-1][""role""] == ""assistant"":
-            # Remove <|eot_id|> if the last turn is from Assistant to allow completion
-            tokens.pop()
+        # If dialog does not end yet with a start of an assistant message to
+        # complete, we add it.
+        if not dialog or dialog[-1][""role""] != ""assistant"":
+            tokens.extend(self.encode_message({""role"": ""assistant"", ""content"": """"}))
+        # Remove <|eot_id|> from Assistant message to allow completion
+        eot_id = tokens.pop()
+        assert eot_id == self.tokenizer.special_tokens[""<|eot_id|>""]
         return tokens
-
-    def decode_header(self, tokens: Sequence[int]) -> ParseResult:
-        tokens, _ = self._take(tokens, ""<|start_header_id|>"")
-        tokens, tokens_role, _ = self._take_until(tokens, ""<|end_header_id|>"")
-        tokens, _ = self._take(tokens, ""\n\n"")
-        role = self.tokenizer.decode(tokens_role)
-        return ParseResult(tokens, {""role"": cast(Role, role)})
-
-    def decode_message(self, tokens: Sequence[int]) -> ParseResult:
-        tokens, message = self.decode_header(tokens)
-        # Try finding the eot, but if the message was cut short by max
-        # sequence length, assume the entire remainder is the message body.
-        try:
-            tokens, tokens_content, _ = self._take_until(tokens, ""<|eot_id|>"")
-        except ParseError:
-            tokens, tokens_content = [], tokens
-        message[""content""] = self.tokenizer.decode(tokens_content)
-        return ParseResult(tokens, message)
-
-    def _take(
-        self, tokens: Sequence[int], *expected_strs: str
-    ) -> Tuple[Sequence[int], Sequence[int]]:
-        """"""Assert that tokens starts with one of the expected sequences.""""""
-        for expected_str in expected_strs:
-            t = self.tokenizer.encode(
-                expected_str, bos=False, eos=False, allowed_special=""all""
-            )
-            if len(tokens) < len(t):
-                continue
-            if tokens[: len(t)] != t:
-                continue
-            return tokens[len(t) :], tokens[: len(t)]
-        raise ParseError(f""Expected any of {expected_strs!r}"")
-
-    def _take_until(
-        self, tokens: Sequence[int], *expected_strs: str
-    ) -> Tuple[Sequence[int], Sequence[int], Sequence[int]]:
-        """"""Take tokens from `tokens` until one of the expected sequences occurs.""""""
-        best = None
-        for expected_str in expected_strs:
-            t = self.tokenizer.encode(
-                expected_str, bos=False, eos=False, allowed_special=""all""
-            )
-            if len(tokens) < len(t):
-                continue
-
-            offset = 0
-            try:
-                while offset < len(tokens):
-                    offset = tokens.index(t[0], offset)
-                    if tokens[offset : offset + len(t)] == t:
-                        if best is None or offset < best[0]:
-                            best = (offset, t)
-                        break
-            except ValueError:
-                continue
-        if best is not None:
-            return (
-                tokens[best[0] + len(best[1]) :],  # next tokens
-                tokens[: best[0]],  # tokens up to found sequence,
-                tokens[best[0] : best[0] + len(best[1])],  # found sequence itself
-            )
-        raise ParseError(f""Expected tokens followed by any of {expected_strs!r}"")",No
llama/tokenizer.py,llama/tokenizer.py,ba2dacb1e4071fe9c88612aca6bb2b1a74f152a5,e2d3fd0e21f557942be2e1af70091c2e854d674d,Just always assume an empty assistant prompt,"diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index 7da5679..7137846 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -225,11 +225,6 @@ class ChatFormat:
         tokens.append(self.tokenizer.special_tokens[""<|begin_of_text|>""])
         for message in dialog:
             tokens.extend(self.encode_message(message))
-        # If dialog does not end yet with a start of an assistant message to
-        # complete, we add it.
-        if not dialog or dialog[-1][""role""] != ""assistant"":
-            tokens.extend(self.encode_message({""role"": ""assistant"", ""content"": """"}))
-        # Remove <|eot_id|> from Assistant message to allow completion
-        eot_id = tokens.pop()
-        assert eot_id == self.tokenizer.special_tokens[""<|eot_id|>""]
+        # Add the start of an assistant message for the model to complete
+        tokens.extend(self.encode_header({""role"": ""assistant"", ""content"": """"}))
         return tokens","diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index 7da5679..7137846 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -225,11 +225,6 @@ class ChatFormat:
         tokens.append(self.tokenizer.special_tokens[""<|begin_of_text|>""])
         for message in dialog:
             tokens.extend(self.encode_message(message))
-        # If dialog does not end yet with a start of an assistant message to
-        # complete, we add it.
-        if not dialog or dialog[-1][""role""] != ""assistant"":
-            tokens.extend(self.encode_message({""role"": ""assistant"", ""content"": """"}))
-        # Remove <|eot_id|> from Assistant message to allow completion
-        eot_id = tokens.pop()
-        assert eot_id == self.tokenizer.special_tokens[""<|eot_id|>""]
+        # Add the start of an assistant message for the model to complete
+        tokens.extend(self.encode_header({""role"": ""assistant"", ""content"": """"}))
         return tokens",No
test_tokenizer.py,llama/test_tokenizer.py,a0f1b332a2f2d177e86f718ffc04c91543b8177d,99ebb4afb7e9cc1bb24816931bf03d8111228e85,move unit-tests,"diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
new file mode 100644
index 0000000..02cdee0
--- /dev/null
+++ b/llama/test_tokenizer.py
@@ -0,0 +1,85 @@
+import os
+from unittest import TestCase
+from llama.tokenizer import ChatFormat, Tokenizer
+
+# TOKENIZER_PATH=<path> python -m unittest llama/test_tokenizer.py
+
+class TokenizerTests(TestCase):
+    def setUp(self):
+        self.tokenizer = Tokenizer(os.environ[""TOKENIZER_PATH""])
+        self.format = ChatFormat(self.tokenizer)
+
+    def test_special_tokens(self):
+        self.assertEqual(
+            self.tokenizer.special_tokens[""<|begin_of_text|>""],
+            128000,
+        )
+
+    def test_encode(self):
+        self.assertEqual(
+            self.tokenizer.encode(
+                ""This is a test sentence."",
+                bos=True,
+                eos=True
+            ),
+            [128000, 2028, 374, 264, 1296, 11914, 13, 128001],
+        )
+
+    def test_decode(self):
+        self.assertEqual(
+            self.tokenizer.decode(
+                [128000, 2028, 374, 264, 1296, 11914, 13, 128001],
+            ),
+            ""<|begin_of_text|>This is a test sentence.<|end_of_text|>"",
+        )
+
+    def test_encode_message(self):
+        message = {
+            ""role"": ""user"",
+            ""content"": ""This is a test sentence."",
+        }
+        self.assertEqual(
+            self.format.encode_message(message),
+            [
+                128006,  # <|start_header_id|>
+                882,  # ""user""
+                128007,  # <|end_of_header|>
+                271,  # ""\n\n""
+                2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
+                128009,  # <|eot_id|>
+            ]
+        )
+
+    def test_encode_dialog(self):
+        dialog = [
+            {
+                ""role"": ""system"",
+                ""content"": ""This is a test sentence."",
+            },
+            {
+                ""role"": ""user"",
+                ""content"": ""This is a response."",
+            }
+        ]
+        self.assertEqual(
+            self.format.encode_dialog_prompt(dialog),
+            [
+                128000,  # <|begin_of_text|>
+                128006,  # <|start_header_id|>
+                9125,     # ""system""
+                128007,  # <|end_of_header|>
+                271,     # ""\n\n""
+                2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
+                128009,  # <|eot_id|>
+                128006,  # <|start_header_id|>
+                882,     # ""user""
+                128007,  # <|end_of_header|>
+                271,     # ""\n\n""
+                2028, 374, 264, 2077, 13,  # ""This is a response."",
+                128009,  # <|eot_id|>
+                128006,  # <|start_header_id|>
+                78191,   # ""assistant""
+                128007,  # <|end_of_header|>
+                271,     # ""\n\n""
+            ]
+        )","diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
new file mode 100644
index 0000000..02cdee0
--- /dev/null
+++ b/llama/test_tokenizer.py
@@ -0,0 +1,85 @@
+import os
+from unittest import TestCase
+from llama.tokenizer import ChatFormat, Tokenizer
+
+# TOKENIZER_PATH=<path> python -m unittest llama/test_tokenizer.py
+
+class TokenizerTests(TestCase):
+    def setUp(self):
+        self.tokenizer = Tokenizer(os.environ[""TOKENIZER_PATH""])
+        self.format = ChatFormat(self.tokenizer)
+
+    def test_special_tokens(self):
+        self.assertEqual(
+            self.tokenizer.special_tokens[""<|begin_of_text|>""],
+            128000,
+        )
+
+    def test_encode(self):
+        self.assertEqual(
+            self.tokenizer.encode(
+                ""This is a test sentence."",
+                bos=True,
+                eos=True
+            ),
+            [128000, 2028, 374, 264, 1296, 11914, 13, 128001],
+        )
+
+    def test_decode(self):
+        self.assertEqual(
+            self.tokenizer.decode(
+                [128000, 2028, 374, 264, 1296, 11914, 13, 128001],
+            ),
+            ""<|begin_of_text|>This is a test sentence.<|end_of_text|>"",
+        )
+
+    def test_encode_message(self):
+        message = {
+            ""role"": ""user"",
+            ""content"": ""This is a test sentence."",
+        }
+        self.assertEqual(
+            self.format.encode_message(message),
+            [
+                128006,  # <|start_header_id|>
+                882,  # ""user""
+                128007,  # <|end_of_header|>
+                271,  # ""\n\n""
+                2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
+                128009,  # <|eot_id|>
+            ]
+        )
+
+    def test_encode_dialog(self):
+        dialog = [
+            {
+                ""role"": ""system"",
+                ""content"": ""This is a test sentence."",
+            },
+            {
+                ""role"": ""user"",
+                ""content"": ""This is a response."",
+            }
+        ]
+        self.assertEqual(
+            self.format.encode_dialog_prompt(dialog),
+            [
+                128000,  # <|begin_of_text|>
+                128006,  # <|start_header_id|>
+                9125,     # ""system""
+                128007,  # <|end_of_header|>
+                271,     # ""\n\n""
+                2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
+                128009,  # <|eot_id|>
+                128006,  # <|start_header_id|>
+                882,     # ""user""
+                128007,  # <|end_of_header|>
+                271,     # ""\n\n""
+                2028, 374, 264, 2077, 13,  # ""This is a response."",
+                128009,  # <|eot_id|>
+                128006,  # <|start_header_id|>
+                78191,   # ""assistant""
+                128007,  # <|end_of_header|>
+                271,     # ""\n\n""
+            ]
+        )",No
example_chat_completion.py,example_chat_completion.py,ae0100d0c66b5441cf164d40d05032e831db752d,f1ce9b585f2703cd8d54ac2778c690e9231862f4,Update example_chat_completion.py,"diff --git a/example_chat_completion.py b/example_chat_completion.py
index f0cde79..6e85c36 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 from typing import List, Optional
 ","diff --git a/example_chat_completion.py b/example_chat_completion.py
index f0cde79..6e85c36 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 from typing import List, Optional
 ",No
example_text_completion.py,example_text_completion.py,fcce4b37ce5affdf9c4f30823949a9e363e5ec02,ae0100d0c66b5441cf164d40d05032e831db752d,Update example_text_completion.py,"diff --git a/example_text_completion.py b/example_text_completion.py
index c174bb2..41cdd9e 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 from typing import List
 ","diff --git a/example_text_completion.py b/example_text_completion.py
index c174bb2..41cdd9e 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 from typing import List
 ",No
setup.py,setup.py,c84e358e6894c06758b785246f3189d11aea9879,fcce4b37ce5affdf9c4f30823949a9e363e5ec02,Update setup.py,"diff --git a/setup.py b/setup.py
index 404d484..c7885fe 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 from setuptools import find_packages, setup
 ","diff --git a/setup.py b/setup.py
index 404d484..c7885fe 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 from setuptools import find_packages, setup
 ",No
llama/__init__.py,llama/__init__.py,342991ddce6728e494e294724b580affa1ba9901,c84e358e6894c06758b785246f3189d11aea9879,Update __init__.py,"diff --git a/llama/__init__.py b/llama/__init__.py
index 9aa0c99..53d266b 100644
--- a/llama/__init__.py
+++ b/llama/__init__.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 from .generation import Llama
 from .model import ModelArgs, Transformer","diff --git a/llama/__init__.py b/llama/__init__.py
index 9aa0c99..53d266b 100644
--- a/llama/__init__.py
+++ b/llama/__init__.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 from .generation import Llama
 from .model import ModelArgs, Transformer",No
llama/generation.py,llama/generation.py,19eaf1b58678e2353743d24c94e97000e5a6e38f,342991ddce6728e494e294724b580affa1ba9901,Update generation.py,"diff --git a/llama/generation.py b/llama/generation.py
index f6d3bda..fcf820b 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 import json
 import os","diff --git a/llama/generation.py b/llama/generation.py
index f6d3bda..fcf820b 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 import json
 import os",No
llama/model.py,llama/model.py,a608d66a6b8e480ba20445c8378bcc2c8f4df325,19eaf1b58678e2353743d24c94e97000e5a6e38f,Update model.py,"diff --git a/llama/model.py b/llama/model.py
index 8113353..5522e66 100644
--- a/llama/model.py
+++ b/llama/model.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 import math
 from dataclasses import dataclass","diff --git a/llama/model.py b/llama/model.py
index 8113353..5522e66 100644
--- a/llama/model.py
+++ b/llama/model.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 import math
 from dataclasses import dataclass",No
llama/tokenizer.py,llama/tokenizer.py,8950daf13d256e56ca0e015780c4a96e9d7c5d04,a608d66a6b8e480ba20445c8378bcc2c8f4df325,Update tokenizer.py,"diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index 7137846..35093eb 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 import os
 from logging import getLogger","diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index 7137846..35093eb 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.
+# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
 
 import os
 from logging import getLogger",No
llama/__init__.py,llama/__init__.py,dc14881639f6dd19fe0700126f62c2999508fa29,8950daf13d256e56ca0e015780c4a96e9d7c5d04,Update __init__.py,"diff --git a/llama/__init__.py b/llama/__init__.py
index 53d266b..2a460b6 100644
--- a/llama/__init__.py
+++ b/llama/__init__.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 from .generation import Llama
 from .model import ModelArgs, Transformer","diff --git a/llama/__init__.py b/llama/__init__.py
index 53d266b..2a460b6 100644
--- a/llama/__init__.py
+++ b/llama/__init__.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 from .generation import Llama
 from .model import ModelArgs, Transformer",No
llama/generation.py,llama/generation.py,cac0c6fdb9f60014d3165a74addc20f671f70d31,dc14881639f6dd19fe0700126f62c2999508fa29,Update generation.py,"diff --git a/llama/generation.py b/llama/generation.py
index fcf820b..492dfa0 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 import json
 import os","diff --git a/llama/generation.py b/llama/generation.py
index fcf820b..492dfa0 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 import json
 import os",No
llama/model.py,llama/model.py,7952dc5ab5fe45e2ffc9b6664f53338409a8936e,cac0c6fdb9f60014d3165a74addc20f671f70d31,Update model.py,"diff --git a/llama/model.py b/llama/model.py
index 5522e66..6c6048a 100644
--- a/llama/model.py
+++ b/llama/model.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 import math
 from dataclasses import dataclass","diff --git a/llama/model.py b/llama/model.py
index 5522e66..6c6048a 100644
--- a/llama/model.py
+++ b/llama/model.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 import math
 from dataclasses import dataclass",No
llama/tokenizer.py,llama/tokenizer.py,0627c1ccb76c5f62df76fa10d41e070acd3b018c,7952dc5ab5fe45e2ffc9b6664f53338409a8936e,Update tokenizer.py,"diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index 35093eb..f679171 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 import os
 from logging import getLogger","diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index 35093eb..f679171 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 import os
 from logging import getLogger",No
llama/test_tokenizer.py,llama/test_tokenizer.py,565d104afba2f12c8017faff9fca2658446f877e,0627c1ccb76c5f62df76fa10d41e070acd3b018c,Update test_tokenizer.py,"diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index 02cdee0..f11593d 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -1,3 +1,6 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
+
 import os
 from unittest import TestCase
 from llama.tokenizer import ChatFormat, Tokenizer","diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index 02cdee0..f11593d 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -1,3 +1,6 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
+
 import os
 from unittest import TestCase
 from llama.tokenizer import ChatFormat, Tokenizer",No
example_chat_completion.py,example_chat_completion.py,794cb4839491e4de4b09f5f8d203827343df4eb4,565d104afba2f12c8017faff9fca2658446f877e,Update example_chat_completion.py,"diff --git a/example_chat_completion.py b/example_chat_completion.py
index 6e85c36..deb70cb 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 from typing import List, Optional
 ","diff --git a/example_chat_completion.py b/example_chat_completion.py
index 6e85c36..deb70cb 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 from typing import List, Optional
 ",No
example_text_completion.py,example_text_completion.py,ca6d62811dee53340d67d2b8a218d415218dbcf0,794cb4839491e4de4b09f5f8d203827343df4eb4,Update example_text_completion.py,"diff --git a/example_text_completion.py b/example_text_completion.py
index 41cdd9e..891d1bd 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 from typing import List
 ","diff --git a/example_text_completion.py b/example_text_completion.py
index 41cdd9e..891d1bd 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 from typing import List
 ",No
setup.py,setup.py,2daa1dfa8acf783777ce551fb18b23d78bb8370b,ca6d62811dee53340d67d2b8a218d415218dbcf0,Update setup.py,"diff --git a/setup.py b/setup.py
index c7885fe..86ead8a 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 from setuptools import find_packages, setup
 ","diff --git a/setup.py b/setup.py
index c7885fe..86ead8a 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,5 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
-# This software may be used and distributed according to the terms of the Llama 3 Community License Agreement.
+# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
 from setuptools import find_packages, setup
 ",No
requirements.txt,requirements.txt,fa87cc3601463f3d0dce6b081e111865e362b622,2daa1dfa8acf783777ce551fb18b23d78bb8370b,add blobfile,"diff --git a/requirements.txt b/requirements.txt
index f5bff87..1b43b2d 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -2,3 +2,4 @@ torch
 fairscale
 fire
 tiktoken==0.4.0
+blobfile","diff --git a/requirements.txt b/requirements.txt
index f5bff87..1b43b2d 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -2,3 +2,4 @@ torch
 fairscale
 fire
 tiktoken==0.4.0
+blobfile",No
README.md,README.md,930d1003c99d65c083174a1b364e46a9496a1bb8,94ad42085259ae780b983239f5b0119be6993139,"seq len is 8192, fix some comments","diff --git a/README.md b/README.md
index 732a600..c8091fa 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 # Llama 3
 
-We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly. 
+We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.
 
 This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 7B to 70B parameters.
 
@@ -22,7 +22,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 ## Quick Start
 
-You can follow the steps below to quickly get up and running with Llama 2 models. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes). 
+You can follow the steps below to quickly get up and running with Llama 3 models. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes).
 
 1. In a conda env with PyTorch / CUDA available clone and download this repository.
 
@@ -34,9 +34,9 @@ You can follow the steps below to quickly get up and running with Llama 2 models
 
 4. Once registered, you will get an email with a URL to download the models. You will need this URL when you run the download.sh script.
 
-5. Once you get the email, navigate to your downloaded llama repository and run the download.sh script. 
+5. Once you get the email, navigate to your downloaded llama repository and run the download.sh script.
     - Make sure to grant execution permissions to the download.sh script
-    - During this process, you will be prompted to enter the URL from the email. 
+    - During this process, you will be prompted to enter the URL from the email.
     - Do not use the “Copy Link” option but rather make sure to manually copy the link from the email.
 
 6. Once the model/s you want have been downloaded, you can run the model locally using the command below:
@@ -61,7 +61,7 @@ Different models require different model-parallel (MP) values:
 | 8B     | 1  |
 | 70B    | 8  |
 
-All models support sequence length up to 4096 tokens, but we pre-allocate the cache according to `max_seq_len` and `max_batch_size` values. So set those according to your hardware.
+All models support sequence length up to 8192 tokens, but we pre-allocate the cache according to `max_seq_len` and `max_batch_size` values. So set those according to your hardware.
 
 ### Pretrained Models
 
@@ -107,10 +107,10 @@ See [MODEL_CARD.md](..).
 
 ## License
 
-Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements. 
+Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements.
 
 See the [LICENSE](..) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
 ## Questions
 
-For common questions, the FAQ can be found [here](https://llama.meta.com/faq) which will be kept up to date over time as new questions arise. 
+For common questions, the FAQ can be found [here](https://llama.meta.com/faq) which will be kept up to date over time as new questions arise.","diff --git a/README.md b/README.md
index 732a600..c8091fa 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 # Llama 3
 
-We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly. 
+We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.
 
 This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 7B to 70B parameters.
 
@@ -22,7 +22,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 ## Quick Start
 
-You can follow the steps below to quickly get up and running with Llama 2 models. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes). 
+You can follow the steps below to quickly get up and running with Llama 3 models. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes).
 
 1. In a conda env with PyTorch / CUDA available clone and download this repository.
 
@@ -34,9 +34,9 @@ You can follow the steps below to quickly get up and running with Llama 2 models
 
 4. Once registered, you will get an email with a URL to download the models. You will need this URL when you run the download.sh script.
 
-5. Once you get the email, navigate to your downloaded llama repository and run the download.sh script. 
+5. Once you get the email, navigate to your downloaded llama repository and run the download.sh script.
     - Make sure to grant execution permissions to the download.sh script
-    - During this process, you will be prompted to enter the URL from the email. 
+    - During this process, you will be prompted to enter the URL from the email.
     - Do not use the “Copy Link” option but rather make sure to manually copy the link from the email.
 
 6. Once the model/s you want have been downloaded, you can run the model locally using the command below:
@@ -61,7 +61,7 @@ Different models require different model-parallel (MP) values:
 | 8B     | 1  |
 | 70B    | 8  |
 
-All models support sequence length up to 4096 tokens, but we pre-allocate the cache according to `max_seq_len` and `max_batch_size` values. So set those according to your hardware.
+All models support sequence length up to 8192 tokens, but we pre-allocate the cache according to `max_seq_len` and `max_batch_size` values. So set those according to your hardware.
 
 ### Pretrained Models
 
@@ -107,10 +107,10 @@ See [MODEL_CARD.md](..).
 
 ## License
 
-Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements. 
+Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements.
 
 See the [LICENSE](..) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
 ## Questions
 
-For common questions, the FAQ can be found [here](https://llama.meta.com/faq) which will be kept up to date over time as new questions arise. 
+For common questions, the FAQ can be found [here](https://llama.meta.com/faq) which will be kept up to date over time as new questions arise.",No
llama/model.py,llama/model.py,930d1003c99d65c083174a1b364e46a9496a1bb8,94ad42085259ae780b983239f5b0119be6993139,"seq len is 8192, fix some comments","diff --git a/llama/model.py b/llama/model.py
index 6c6048a..0c5f121 100644
--- a/llama/model.py
+++ b/llama/model.py
@@ -145,9 +145,6 @@ def apply_rotary_emb(
 
     Returns:
         Tuple[torch.Tensor, torch.Tensor]: Tuple of modified query tensor and key tensor with rotary embeddings.
-
-
-
     """"""
     xq_ = torch.view_as_complex(xq.float().reshape(*xq.shape[:-1], -1, 2))
     xk_ = torch.view_as_complex(xk.float().reshape(*xk.shape[:-1], -1, 2))
@@ -449,8 +446,6 @@ class Transformer(nn.Module):
         )
 
         self.freqs_cis = precompute_freqs_cis(
-            # Note that self.params.max_seq_len is multiplied by 2 because the token limit for the Llama 2 generation of models is 4096.
-            # Adding this multiplier instead of using 4096 directly allows for dynamism of token lengths while training or fine-tuning.
             self.params.dim // self.params.n_heads,
             self.params.max_seq_len * 2,
         )","diff --git a/llama/model.py b/llama/model.py
index 6c6048a..0c5f121 100644
--- a/llama/model.py
+++ b/llama/model.py
@@ -145,9 +145,6 @@ def apply_rotary_emb(
 
     Returns:
         Tuple[torch.Tensor, torch.Tensor]: Tuple of modified query tensor and key tensor with rotary embeddings.
-
-
-
     """"""
     xq_ = torch.view_as_complex(xq.float().reshape(*xq.shape[:-1], -1, 2))
     xk_ = torch.view_as_complex(xk.float().reshape(*xk.shape[:-1], -1, 2))
@@ -449,8 +446,6 @@ class Transformer(nn.Module):
         )
 
         self.freqs_cis = precompute_freqs_cis(
-            # Note that self.params.max_seq_len is multiplied by 2 because the token limit for the Llama 2 generation of models is 4096.
-            # Adding this multiplier instead of using 4096 directly allows for dynamism of token lengths while training or fine-tuning.
             self.params.dim // self.params.n_heads,
             self.params.max_seq_len * 2,
         )",No
README.md,README.md,9e8608fb23fed17c591834d0a2dfb1d7b3b8711e,930d1003c99d65c083174a1b364e46a9496a1bb8,Update README.md,"diff --git a/README.md b/README.md
index c8091fa..1bbf5f5 100644
--- a/README.md
+++ b/README.md
@@ -98,7 +98,7 @@ In order to help developers address these risks, we have created the [Responsibl
 ## Issues
 
 Please report any software “bug”, or other problems with the models through one of the following means:
-- Reporting issues with the model: [github.com/facebookresearch/llama](http://github.com/facebookresearch/llama3)
+- Reporting issues with the model: [https://github.com/meta-llama/llama3/issues](https://github.com/meta-llama/llama3/issues)
 - Reporting risky content generated by the model: [developers.facebook.com/llama_output_feedback](http://developers.facebook.com/llama_output_feedback)
 - Reporting bugs and security concerns: [facebook.com/whitehat/info](http://facebook.com/whitehat/info)
 ","diff --git a/README.md b/README.md
index c8091fa..1bbf5f5 100644
--- a/README.md
+++ b/README.md
@@ -98,7 +98,7 @@ In order to help developers address these risks, we have created the [Responsibl
 ## Issues
 
 Please report any software “bug”, or other problems with the models through one of the following means:
-- Reporting issues with the model: [github.com/facebookresearch/llama](http://github.com/facebookresearch/llama3)
+- Reporting issues with the model: [https://github.com/meta-llama/llama3/issues](https://github.com/meta-llama/llama3/issues)
 - Reporting risky content generated by the model: [developers.facebook.com/llama_output_feedback](http://developers.facebook.com/llama_output_feedback)
 - Reporting bugs and security concerns: [facebook.com/whitehat/info](http://facebook.com/whitehat/info)
 ",No
llama/tokenizer.py,llama/tokenizer.py,3afbe13a9b7beb106e43e232b281113edc9e907b,9e8608fb23fed17c591834d0a2dfb1d7b3b8711e,s/sentencepiece/tiktoken,"diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index f679171..9ff9206 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -82,7 +82,7 @@ class Tokenizer:
             mergeable_ranks=mergeable_ranks,
             special_tokens=self.special_tokens,
         )
-        logger.info(f""Reloaded SentencePiece model from {model_path}"")
+        logger.info(f""Reloaded tiktoken model from {model_path}"")
 
         # BOS / EOS token IDs
         self.n_words: int = self.model.n_vocab","diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index f679171..9ff9206 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -82,7 +82,7 @@ class Tokenizer:
             mergeable_ranks=mergeable_ranks,
             special_tokens=self.special_tokens,
         )
-        logger.info(f""Reloaded SentencePiece model from {model_path}"")
+        logger.info(f""Reloaded tiktoken model from {model_path}"")
 
         # BOS / EOS token IDs
         self.n_words: int = self.model.n_vocab",No
example_chat_completion.py,example_chat_completion.py,32b7ddc9b638f0fd6b04b80e1845536a95f7a5d5,3afbe13a9b7beb106e43e232b281113edc9e907b,rope theta + nits,"diff --git a/example_chat_completion.py b/example_chat_completion.py
index deb70cb..712dbac 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -18,19 +18,15 @@ def main(
     max_gen_len: Optional[int] = None,
 ):
     """"""
-    Entry point of the program for generating text using a pretrained model.
+    Examples to run with the models finetuned for chat. Prompts correspond of chat
+    turns between the user and assistant with the final one always being the user.
 
-    Args:
-        ckpt_dir (str): The directory containing checkpoint files for the pretrained model.
-        tokenizer_path (str): The path to the tokenizer model used for text encoding/decoding.
-        temperature (float, optional): The temperature value for controlling randomness in generation.
-            Defaults to 0.6.
-        top_p (float, optional): The top-p sampling parameter for controlling diversity in generation.
-            Defaults to 0.9.
-        max_seq_len (int, optional): The maximum sequence length for input prompts. Defaults to 512.
-        max_batch_size (int, optional): The maximum batch size for generating sequences. Defaults to 8.
-        max_gen_len (int, optional): The maximum length of generated sequences. If None, it will be
-            set to the model's max sequence length. Defaults to None.
+    An optional system prompt at the beginning to control how the model should respond
+    is also supported.
+
+    The context window of llama3 models is 8192 tokens, so `max_seq_len` needs to be <= 8192.
+
+    `max_gen_len` is optional because finetuned models are able to stop generations naturally.
     """"""
     generator = Llama.build(
         ckpt_dir=ckpt_dir,","diff --git a/example_chat_completion.py b/example_chat_completion.py
index deb70cb..712dbac 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -18,19 +18,15 @@ def main(
     max_gen_len: Optional[int] = None,
 ):
     """"""
-    Entry point of the program for generating text using a pretrained model.
+    Examples to run with the models finetuned for chat. Prompts correspond of chat
+    turns between the user and assistant with the final one always being the user.
 
-    Args:
-        ckpt_dir (str): The directory containing checkpoint files for the pretrained model.
-        tokenizer_path (str): The path to the tokenizer model used for text encoding/decoding.
-        temperature (float, optional): The temperature value for controlling randomness in generation.
-            Defaults to 0.6.
-        top_p (float, optional): The top-p sampling parameter for controlling diversity in generation.
-            Defaults to 0.9.
-        max_seq_len (int, optional): The maximum sequence length for input prompts. Defaults to 512.
-        max_batch_size (int, optional): The maximum batch size for generating sequences. Defaults to 8.
-        max_gen_len (int, optional): The maximum length of generated sequences. If None, it will be
-            set to the model's max sequence length. Defaults to None.
+    An optional system prompt at the beginning to control how the model should respond
+    is also supported.
+
+    The context window of llama3 models is 8192 tokens, so `max_seq_len` needs to be <= 8192.
+
+    `max_gen_len` is optional because finetuned models are able to stop generations naturally.
     """"""
     generator = Llama.build(
         ckpt_dir=ckpt_dir,",No
example_text_completion.py,example_text_completion.py,32b7ddc9b638f0fd6b04b80e1845536a95f7a5d5,3afbe13a9b7beb106e43e232b281113edc9e907b,rope theta + nits,"diff --git a/example_text_completion.py b/example_text_completion.py
index 891d1bd..7b5daa3 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -18,18 +18,11 @@ def main(
     max_batch_size: int = 4,
 ):
     """"""
-    Entry point of the program for generating text using a pretrained model.
+    Examples to run with the pre-trained models (no fine-tuning). Prompts are
+    usually in the form of an incomplete text prefix that the model can then try to complete.
 
-    Args:
-        ckpt_dir (str): The directory containing checkpoint files for the pretrained model.
-        tokenizer_path (str): The path to the tokenizer model used for text encoding/decoding.
-        temperature (float, optional): The temperature value for controlling randomness in generation.
-            Defaults to 0.6.
-        top_p (float, optional): The top-p sampling parameter for controlling diversity in generation.
-            Defaults to 0.9.
-        max_seq_len (int, optional): The maximum sequence length for input prompts. Defaults to 128.
-        max_gen_len (int, optional): The maximum length of generated sequences. Defaults to 64.
-        max_batch_size (int, optional): The maximum batch size for generating sequences. Defaults to 4.
+    The context window of llama3 models is 8192 tokens, so `max_seq_len` needs to be <= 8192.
+    `max_gen_len` is needed because pre-trained models usually do not stop completions naturally.
     """"""
     generator = Llama.build(
         ckpt_dir=ckpt_dir,","diff --git a/example_text_completion.py b/example_text_completion.py
index 891d1bd..7b5daa3 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -18,18 +18,11 @@ def main(
     max_batch_size: int = 4,
 ):
     """"""
-    Entry point of the program for generating text using a pretrained model.
+    Examples to run with the pre-trained models (no fine-tuning). Prompts are
+    usually in the form of an incomplete text prefix that the model can then try to complete.
 
-    Args:
-        ckpt_dir (str): The directory containing checkpoint files for the pretrained model.
-        tokenizer_path (str): The path to the tokenizer model used for text encoding/decoding.
-        temperature (float, optional): The temperature value for controlling randomness in generation.
-            Defaults to 0.6.
-        top_p (float, optional): The top-p sampling parameter for controlling diversity in generation.
-            Defaults to 0.9.
-        max_seq_len (int, optional): The maximum sequence length for input prompts. Defaults to 128.
-        max_gen_len (int, optional): The maximum length of generated sequences. Defaults to 64.
-        max_batch_size (int, optional): The maximum batch size for generating sequences. Defaults to 4.
+    The context window of llama3 models is 8192 tokens, so `max_seq_len` needs to be <= 8192.
+    `max_gen_len` is needed because pre-trained models usually do not stop completions naturally.
     """"""
     generator = Llama.build(
         ckpt_dir=ckpt_dir,",No
llama/generation.py,llama/generation.py,32b7ddc9b638f0fd6b04b80e1845536a95f7a5d5,3afbe13a9b7beb106e43e232b281113edc9e907b,rope theta + nits,"diff --git a/llama/generation.py b/llama/generation.py
index 492dfa0..48a4668 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -17,7 +17,7 @@ from fairscale.nn.model_parallel.initialize import (
 )
 
 from llama.model import ModelArgs, Transformer
-from llama.tokenizer import Dialog, Message, ChatFormat, Tokenizer
+from llama.tokenizer import ChatFormat, Dialog, Message, Tokenizer
 
 
 class CompletionPrediction(TypedDict, total=False):
@@ -43,7 +43,7 @@ class Llama:
         seed: int = 1,
     ) -> ""Llama"":
         """"""
-        Build a Llama instance by initializing and loading a pre-trained model.
+        Build a Llama instance by initializing and loading a model checkpoint.
 
         Args:
             ckpt_dir (str): Path to the directory containing checkpoint files.
@@ -63,7 +63,6 @@ class Llama:
         Note:
             This method initializes the distributed process group, sets the device to CUDA,
             and loads the pre-trained model and tokenizer.
-
         """"""
         if not torch.distributed.is_initialized():
             torch.distributed.init_process_group(""nccl"")
@@ -99,7 +98,10 @@ class Llama:
         )
         tokenizer = Tokenizer(model_path=tokenizer_path)
         assert model_args.vocab_size == tokenizer.n_words
-        torch.set_default_tensor_type(torch.cuda.HalfTensor)
+        if torch.cuda.is_bf16_supported():
+            torch.set_default_tensor_type(torch.cuda.BFloat16Tensor)
+        else:
+            torch.set_default_tensor_type(torch.cuda.HalfTensor)
         model = Transformer(model_args)
         model.load_state_dict(checkpoint, strict=False)
         print(f""Loaded in {time.time() - start_time:.2f} seconds"")
@@ -212,8 +214,8 @@ class Llama:
             for stop_token in self.tokenizer.stop_tokens:
                 try:
                     eos_idx = toks.index(stop_token)
-                    toks = toks[: eos_idx]
-                    probs = probs[: eos_idx] if logprobs else None
+                    toks = toks[:eos_idx]
+                    probs = probs[:eos_idx] if logprobs else None
                 except ValueError:
                     pass
             out_tokens.append(toks)
@@ -293,22 +295,16 @@ class Llama:
         Returns:
             List[ChatPrediction]: List of chat predictions, each containing the assistant's generated response.
 
-        Raises:
-            AssertionError: If the last message in a dialog is not from the user.
-            AssertionError: If the dialog roles are not in the required 'user', 'assistant', and optional 'system' order.
-
         Note:
             This method generates assistant responses for the provided conversational dialogs.
             It employs nucleus sampling to introduce controlled randomness in text generation.
             If logprobs is True, token log probabilities are computed for each generated token.
-
         """"""
         if max_gen_len is None:
             max_gen_len = self.model.params.max_seq_len - 1
 
         prompt_tokens = [
-            self.formatter.encode_dialog_prompt(dialog)
-            for dialog in dialogs
+            self.formatter.encode_dialog_prompt(dialog) for dialog in dialogs
         ]
         generation_tokens, generation_logprobs = self.generate(
             prompt_tokens=prompt_tokens,
@@ -354,7 +350,6 @@ def sample_top_p(probs, p):
     Note:
         Top-p sampling selects the smallest set of tokens whose cumulative probability mass
         exceeds the threshold p. The distribution is renormalized based on the selected tokens.
-
     """"""
     probs_sort, probs_idx = torch.sort(probs, dim=-1, descending=True)
     probs_sum = torch.cumsum(probs_sort, dim=-1)","diff --git a/llama/generation.py b/llama/generation.py
index 492dfa0..48a4668 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -17,7 +17,7 @@ from fairscale.nn.model_parallel.initialize import (
 )
 
 from llama.model import ModelArgs, Transformer
-from llama.tokenizer import Dialog, Message, ChatFormat, Tokenizer
+from llama.tokenizer import ChatFormat, Dialog, Message, Tokenizer
 
 
 class CompletionPrediction(TypedDict, total=False):
@@ -43,7 +43,7 @@ class Llama:
         seed: int = 1,
     ) -> ""Llama"":
         """"""
-        Build a Llama instance by initializing and loading a pre-trained model.
+        Build a Llama instance by initializing and loading a model checkpoint.
 
         Args:
             ckpt_dir (str): Path to the directory containing checkpoint files.
@@ -63,7 +63,6 @@ class Llama:
         Note:
             This method initializes the distributed process group, sets the device to CUDA,
             and loads the pre-trained model and tokenizer.
-
         """"""
         if not torch.distributed.is_initialized():
             torch.distributed.init_process_group(""nccl"")
@@ -99,7 +98,10 @@ class Llama:
         )
         tokenizer = Tokenizer(model_path=tokenizer_path)
         assert model_args.vocab_size == tokenizer.n_words
-        torch.set_default_tensor_type(torch.cuda.HalfTensor)
+        if torch.cuda.is_bf16_supported():
+            torch.set_default_tensor_type(torch.cuda.BFloat16Tensor)
+        else:
+            torch.set_default_tensor_type(torch.cuda.HalfTensor)
         model = Transformer(model_args)
         model.load_state_dict(checkpoint, strict=False)
         print(f""Loaded in {time.time() - start_time:.2f} seconds"")
@@ -212,8 +214,8 @@ class Llama:
             for stop_token in self.tokenizer.stop_tokens:
                 try:
                     eos_idx = toks.index(stop_token)
-                    toks = toks[: eos_idx]
-                    probs = probs[: eos_idx] if logprobs else None
+                    toks = toks[:eos_idx]
+                    probs = probs[:eos_idx] if logprobs else None
                 except ValueError:
                     pass
             out_tokens.append(toks)
@@ -293,22 +295,16 @@ class Llama:
         Returns:
             List[ChatPrediction]: List of chat predictions, each containing the assistant's generated response.
 
-        Raises:
-            AssertionError: If the last message in a dialog is not from the user.
-            AssertionError: If the dialog roles are not in the required 'user', 'assistant', and optional 'system' order.
-
         Note:
             This method generates assistant responses for the provided conversational dialogs.
             It employs nucleus sampling to introduce controlled randomness in text generation.
             If logprobs is True, token log probabilities are computed for each generated token.
-
         """"""
         if max_gen_len is None:
             max_gen_len = self.model.params.max_seq_len - 1
 
         prompt_tokens = [
-            self.formatter.encode_dialog_prompt(dialog)
-            for dialog in dialogs
+            self.formatter.encode_dialog_prompt(dialog) for dialog in dialogs
         ]
         generation_tokens, generation_logprobs = self.generate(
             prompt_tokens=prompt_tokens,
@@ -354,7 +350,6 @@ def sample_top_p(probs, p):
     Note:
         Top-p sampling selects the smallest set of tokens whose cumulative probability mass
         exceeds the threshold p. The distribution is renormalized based on the selected tokens.
-
     """"""
     probs_sort, probs_idx = torch.sort(probs, dim=-1, descending=True)
     probs_sum = torch.cumsum(probs_sort, dim=-1)",No
llama/model.py,llama/model.py,32b7ddc9b638f0fd6b04b80e1845536a95f7a5d5,3afbe13a9b7beb106e43e232b281113edc9e907b,rope theta + nits,"diff --git a/llama/model.py b/llama/model.py
index 0c5f121..e388c03 100644
--- a/llama/model.py
+++ b/llama/model.py
@@ -26,6 +26,7 @@ class ModelArgs:
     multiple_of: int = 256  # make SwiGLU hidden layer size multiple of large power of 2
     ffn_dim_multiplier: Optional[float] = None
     norm_eps: float = 1e-5
+    rope_theta: float = 500000
 
     max_batch_size: int = 32
     max_seq_len: int = 2048
@@ -33,91 +34,27 @@ class ModelArgs:
 
 class RMSNorm(torch.nn.Module):
     def __init__(self, dim: int, eps: float = 1e-6):
-        """"""
-        Initialize the RMSNorm normalization layer.
-
-        Args:
-            dim (int): The dimension of the input tensor.
-            eps (float, optional): A small value added to the denominator for numerical stability. Default is 1e-6.
-
-        Attributes:
-            eps (float): A small value added to the denominator for numerical stability.
-            weight (nn.Parameter): Learnable scaling parameter.
-
-        """"""
         super().__init__()
         self.eps = eps
         self.weight = nn.Parameter(torch.ones(dim))
 
     def _norm(self, x):
-        """"""
-        Apply the RMSNorm normalization to the input tensor.
-
-        Args:
-            x (torch.Tensor): The input tensor.
-
-        Returns:
-            torch.Tensor: The normalized tensor.
-
-        """"""
         return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
 
     def forward(self, x):
-        """"""
-        Forward pass through the RMSNorm layer.
-
-        Args:
-            x (torch.Tensor): The input tensor.
-
-        Returns:
-            torch.Tensor: The output tensor after applying RMSNorm.
-
-        """"""
         output = self._norm(x.float()).type_as(x)
         return output * self.weight
 
 
 def precompute_freqs_cis(dim: int, end: int, theta: float = 10000.0):
-    """"""
-    Precompute the frequency tensor for complex exponentials (cis) with given dimensions.
-
-    This function calculates a frequency tensor with complex exponentials using the given dimension 'dim'
-    and the end index 'end'. The 'theta' parameter scales the frequencies.
-    The returned tensor contains complex values in complex64 data type.
-
-    Args:
-        dim (int): Dimension of the frequency tensor.
-        end (int): End index for precomputing frequencies.
-        theta (float, optional): Scaling factor for frequency computation. Defaults to 10000.0.
-
-    Returns:
-        torch.Tensor: Precomputed frequency tensor with complex exponentials.
-    """"""
     freqs = 1.0 / (theta ** (torch.arange(0, dim, 2)[: (dim // 2)].float() / dim))
-    t = torch.arange(end, device=freqs.device, dtype=torch.float32)  # type: ignore
-    freqs = torch.outer(t, freqs)  # type: ignore
+    t = torch.arange(end, device=freqs.device, dtype=torch.float32)
+    freqs = torch.outer(t, freqs)
     freqs_cis = torch.polar(torch.ones_like(freqs), freqs)  # complex64
     return freqs_cis
 
 
 def reshape_for_broadcast(freqs_cis: torch.Tensor, x: torch.Tensor):
-    """"""
-    Reshape frequency tensor for broadcasting it with another tensor.
-
-    This function reshapes the frequency tensor to have the same shape as the target tensor 'x'
-    for the purpose of broadcasting the frequency tensor during element-wise operations.
-
-    Args:
-        freqs_cis (torch.Tensor): Frequency tensor to be reshaped.
-        x (torch.Tensor): Target tensor for broadcasting compatibility.
-
-    Returns:
-        torch.Tensor: Reshaped frequency tensor.
-
-    Raises:
-        AssertionError: If the frequency tensor doesn't match the expected shape.
-        AssertionError: If the target tensor 'x' doesn't have the expected number of dimensions.
-    """"""
     ndim = x.ndim
     assert 0 <= 1 < ndim
     assert freqs_cis.shape == (x.shape[1], x.shape[-1])
@@ -130,22 +67,6 @@ def apply_rotary_emb(
     xk: torch.Tensor,
     freqs_cis: torch.Tensor,
 ) -> Tuple[torch.Tensor, torch.Tensor]:
-    """"""
-    Apply rotary embeddings to input tensors using the given frequency tensor.
-
-    This function applies rotary embeddings to the given query 'xq' and key 'xk' tensors using the provided
-    frequency tensor 'freqs_cis'. The input tensors are reshaped as complex numbers, and the frequency tensor
-    is reshaped for broadcasting compatibility. The resulting tensors contain rotary embeddings and are
-    returned as real tensors.
-
-    Args:
-        xq (torch.Tensor): Query tensor to apply rotary embeddings.
-        xk (torch.Tensor): Key tensor to apply rotary embeddings.
-        freqs_cis (torch.Tensor): Precomputed frequency tensor for complex exponentials.
-
-    Returns:
-        Tuple[torch.Tensor, torch.Tensor]: Tuple of modified query tensor and key tensor with rotary embeddings.
-    """"""
     xq_ = torch.view_as_complex(xq.float().reshape(*xq.shape[:-1], -1, 2))
     xk_ = torch.view_as_complex(xk.float().reshape(*xk.shape[:-1], -1, 2))
     freqs_cis = reshape_for_broadcast(freqs_cis, xq_)
@@ -167,29 +88,7 @@ def repeat_kv(x: torch.Tensor, n_rep: int) -> torch.Tensor:
 
 
 class Attention(nn.Module):
-    """"""Multi-head attention module.""""""
-
     def __init__(self, args: ModelArgs):
-        """"""
-        Initialize the Attention module.
-
-        Args:
-            args (ModelArgs): Model configuration parameters.
-
-        Attributes:
-            n_kv_heads (int): Number of key and value heads.
-            n_local_heads (int): Number of local query heads.
-            n_local_kv_heads (int): Number of local key and value heads.
-            n_rep (int): Number of repetitions for local heads.
-            head_dim (int): Dimension size of each attention head.
-            wq (ColumnParallelLinear): Linear transformation for queries.
-            wk (ColumnParallelLinear): Linear transformation for keys.
-            wv (ColumnParallelLinear): Linear transformation for values.
-            wo (RowParallelLinear): Linear transformation for output.
-            cache_k (torch.Tensor): Cached keys for attention.
-            cache_v (torch.Tensor): Cached values for attention.
-
-        """"""
         super().__init__()
         self.n_kv_heads = args.n_heads if args.n_kv_heads is None else args.n_kv_heads
         model_parallel_size = fs_init.get_model_parallel_world_size()
@@ -251,19 +150,6 @@ class Attention(nn.Module):
         freqs_cis: torch.Tensor,
         mask: Optional[torch.Tensor],
     ):
-        """"""
-        Forward pass of the attention module.
-
-        Args:
-            x (torch.Tensor): Input tensor.
-            start_pos (int): Starting position for caching.
-            freqs_cis (torch.Tensor): Precomputed frequency tensor.
-            mask (torch.Tensor, optional): Attention mask tensor.
-
-        Returns:
-            torch.Tensor: Output tensor after attention.
-
-        """"""
         bsz, seqlen, _ = x.shape
         xq, xk, xv = self.wq(x), self.wk(x), self.wv(x)
 
@@ -312,21 +198,6 @@ class FeedForward(nn.Module):
         multiple_of: int,
         ffn_dim_multiplier: Optional[float],
     ):
-        """"""
-        Initialize the FeedForward module.
-
-        Args:
-            dim (int): Input dimension.
-            hidden_dim (int): Hidden dimension of the feedforward layer.
-            multiple_of (int): Value to ensure hidden dimension is a multiple of this value.
-            ffn_dim_multiplier (float, optional): Custom multiplier for hidden dimension. Defaults to None.
-
-        Attributes:
-            w1 (ColumnParallelLinear): Linear transformation for the first layer.
-            w2 (RowParallelLinear): Linear transformation for the second layer.
-            w3 (ColumnParallelLinear): Linear transformation for the third layer.
-
-        """"""
         super().__init__()
         hidden_dim = int(2 * hidden_dim / 3)
         # custom dim factor multiplier
@@ -350,24 +221,6 @@ class FeedForward(nn.Module):
 
 class TransformerBlock(nn.Module):
     def __init__(self, layer_id: int, args: ModelArgs):
-        """"""
-        Initialize a TransformerBlock.
-
-        Args:
-            layer_id (int): Identifier for the layer.
-            args (ModelArgs): Model configuration parameters.
-
-        Attributes:
-            n_heads (int): Number of attention heads.
-            dim (int): Dimension size of the model.
-            head_dim (int): Dimension size of each attention head.
-            attention (Attention): Attention module.
-            feed_forward (FeedForward): FeedForward module.
-            layer_id (int): Identifier for the layer.
-            attention_norm (RMSNorm): Layer normalization for attention output.
-            ffn_norm (RMSNorm): Layer normalization for feedforward output.
-
-        """"""
         super().__init__()
         self.n_heads = args.n_heads
         self.dim = args.dim
@@ -390,19 +243,6 @@ class TransformerBlock(nn.Module):
         freqs_cis: torch.Tensor,
         mask: Optional[torch.Tensor],
     ):
-        """"""
-        Perform a forward pass through the TransformerBlock.
-
-        Args:
-            x (torch.Tensor): Input tensor.
-            start_pos (int): Starting position for attention caching.
-            freqs_cis (torch.Tensor): Precomputed cosine and sine frequencies.
-            mask (torch.Tensor, optional): Masking tensor for attention. Defaults to None.
-
-        Returns:
-            torch.Tensor: Output tensor after applying attention and feedforward layers.
-
-        """"""
         h = x + self.attention(self.attention_norm(x), start_pos, freqs_cis, mask)
         out = h + self.feed_forward(self.ffn_norm(h))
         return out
@@ -410,23 +250,6 @@ class TransformerBlock(nn.Module):
 
 class Transformer(nn.Module):
     def __init__(self, params: ModelArgs):
-        """"""
-        Initialize a Transformer model.
-
-        Args:
-            params (ModelArgs): Model configuration parameters.
-
-        Attributes:
-            params (ModelArgs): Model configuration parameters.
-            vocab_size (int): Vocabulary size.
-            n_layers (int): Number of layers in the model.
-            tok_embeddings (VocabParallelEmbedding): Token embeddings.
-            layers (torch.nn.ModuleList): List of Transformer blocks.
-            norm (RMSNorm): Layer normalization for the model output.
-            output (ColumnParallelLinear): Linear layer for final output.
-            freqs_cis (torch.Tensor): Precomputed cosine and sine frequencies.
-
-        """"""
         super().__init__()
         self.params = params
         self.vocab_size = params.vocab_size
@@ -446,23 +269,13 @@ class Transformer(nn.Module):
         )
 
         self.freqs_cis = precompute_freqs_cis(
-            self.params.dim // self.params.n_heads,
-            self.params.max_seq_len * 2,
+            params.dim // params.n_heads,
+            params.max_seq_len * 2,
+            params.rope_theta,
         )
 
     @torch.inference_mode()
     def forward(self, tokens: torch.Tensor, start_pos: int):
-        """"""
-        Perform a forward pass through the Transformer model.
-
-        Args:
-            tokens (torch.Tensor): Input token indices.
-            start_pos (int): Starting position for attention caching.
-
-        Returns:
-            torch.Tensor: Output logits after applying the Transformer model.
-
-        """"""
         _bsz, seqlen = tokens.shape
         h = self.tok_embeddings(tokens)
         self.freqs_cis = self.freqs_cis.to(h.device)","diff --git a/llama/model.py b/llama/model.py
index 0c5f121..e388c03 100644
--- a/llama/model.py
+++ b/llama/model.py
@@ -26,6 +26,7 @@ class ModelArgs:
     multiple_of: int = 256  # make SwiGLU hidden layer size multiple of large power of 2
     ffn_dim_multiplier: Optional[float] = None
     norm_eps: float = 1e-5
+    rope_theta: float = 500000
 
     max_batch_size: int = 32
     max_seq_len: int = 2048
@@ -33,91 +34,27 @@ class ModelArgs:
 
 class RMSNorm(torch.nn.Module):
     def __init__(self, dim: int, eps: float = 1e-6):
-        """"""
-        Initialize the RMSNorm normalization layer.
-
-        Args:
-            dim (int): The dimension of the input tensor.
-            eps (float, optional): A small value added to the denominator for numerical stability. Default is 1e-6.
-
-        Attributes:
-            eps (float): A small value added to the denominator for numerical stability.
-            weight (nn.Parameter): Learnable scaling parameter.
-
-        """"""
         super().__init__()
         self.eps = eps
         self.weight = nn.Parameter(torch.ones(dim))
 
     def _norm(self, x):
-        """"""
-        Apply the RMSNorm normalization to the input tensor.
-
-        Args:
-            x (torch.Tensor): The input tensor.
-
-        Returns:
-            torch.Tensor: The normalized tensor.
-
-        """"""
         return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
 
     def forward(self, x):
-        """"""
-        Forward pass through the RMSNorm layer.
-
-        Args:
-            x (torch.Tensor): The input tensor.
-
-        Returns:
-            torch.Tensor: The output tensor after applying RMSNorm.
-
-        """"""
         output = self._norm(x.float()).type_as(x)
         return output * self.weight
 
 
 def precompute_freqs_cis(dim: int, end: int, theta: float = 10000.0):
-    """"""
-    Precompute the frequency tensor for complex exponentials (cis) with given dimensions.
-
-    This function calculates a frequency tensor with complex exponentials using the given dimension 'dim'
-    and the end index 'end'. The 'theta' parameter scales the frequencies.
-    The returned tensor contains complex values in complex64 data type.
-
-    Args:
-        dim (int): Dimension of the frequency tensor.
-        end (int): End index for precomputing frequencies.
-        theta (float, optional): Scaling factor for frequency computation. Defaults to 10000.0.
-
-    Returns:
-        torch.Tensor: Precomputed frequency tensor with complex exponentials.
-    """"""
     freqs = 1.0 / (theta ** (torch.arange(0, dim, 2)[: (dim // 2)].float() / dim))
-    t = torch.arange(end, device=freqs.device, dtype=torch.float32)  # type: ignore
-    freqs = torch.outer(t, freqs)  # type: ignore
+    t = torch.arange(end, device=freqs.device, dtype=torch.float32)
+    freqs = torch.outer(t, freqs)
     freqs_cis = torch.polar(torch.ones_like(freqs), freqs)  # complex64
     return freqs_cis
 
 
 def reshape_for_broadcast(freqs_cis: torch.Tensor, x: torch.Tensor):
-    """"""
-    Reshape frequency tensor for broadcasting it with another tensor.
-
-    This function reshapes the frequency tensor to have the same shape as the target tensor 'x'
-    for the purpose of broadcasting the frequency tensor during element-wise operations.
-
-    Args:
-        freqs_cis (torch.Tensor): Frequency tensor to be reshaped.
-        x (torch.Tensor): Target tensor for broadcasting compatibility.
-
-    Returns:
-        torch.Tensor: Reshaped frequency tensor.
-
-    Raises:
-        AssertionError: If the frequency tensor doesn't match the expected shape.
-        AssertionError: If the target tensor 'x' doesn't have the expected number of dimensions.
-    """"""
     ndim = x.ndim
     assert 0 <= 1 < ndim
     assert freqs_cis.shape == (x.shape[1], x.shape[-1])
@@ -130,22 +67,6 @@ def apply_rotary_emb(
     xk: torch.Tensor,
     freqs_cis: torch.Tensor,
 ) -> Tuple[torch.Tensor, torch.Tensor]:
-    """"""
-    Apply rotary embeddings to input tensors using the given frequency tensor.
-
-    This function applies rotary embeddings to the given query 'xq' and key 'xk' tensors using the provided
-    frequency tensor 'freqs_cis'. The input tensors are reshaped as complex numbers, and the frequency tensor
-    is reshaped for broadcasting compatibility. The resulting tensors contain rotary embeddings and are
-    returned as real tensors.
-
-    Args:
-        xq (torch.Tensor): Query tensor to apply rotary embeddings.
-        xk (torch.Tensor): Key tensor to apply rotary embeddings.
-        freqs_cis (torch.Tensor): Precomputed frequency tensor for complex exponentials.
-
-    Returns:
-        Tuple[torch.Tensor, torch.Tensor]: Tuple of modified query tensor and key tensor with rotary embeddings.
-    """"""
     xq_ = torch.view_as_complex(xq.float().reshape(*xq.shape[:-1], -1, 2))
     xk_ = torch.view_as_complex(xk.float().reshape(*xk.shape[:-1], -1, 2))
     freqs_cis = reshape_for_broadcast(freqs_cis, xq_)
@@ -167,29 +88,7 @@ def repeat_kv(x: torch.Tensor, n_rep: int) -> torch.Tensor:
 
 
 class Attention(nn.Module):
-    """"""Multi-head attention module.""""""
-
     def __init__(self, args: ModelArgs):
-        """"""
-        Initialize the Attention module.
-
-        Args:
-            args (ModelArgs): Model configuration parameters.
-
-        Attributes:
-            n_kv_heads (int): Number of key and value heads.
-            n_local_heads (int): Number of local query heads.
-            n_local_kv_heads (int): Number of local key and value heads.
-            n_rep (int): Number of repetitions for local heads.
-            head_dim (int): Dimension size of each attention head.
-            wq (ColumnParallelLinear): Linear transformation for queries.
-            wk (ColumnParallelLinear): Linear transformation for keys.
-            wv (ColumnParallelLinear): Linear transformation for values.
-            wo (RowParallelLinear): Linear transformation for output.
-            cache_k (torch.Tensor): Cached keys for attention.
-            cache_v (torch.Tensor): Cached values for attention.
-
-        """"""
         super().__init__()
         self.n_kv_heads = args.n_heads if args.n_kv_heads is None else args.n_kv_heads
         model_parallel_size = fs_init.get_model_parallel_world_size()
@@ -251,19 +150,6 @@ class Attention(nn.Module):
         freqs_cis: torch.Tensor,
         mask: Optional[torch.Tensor],
     ):
-        """"""
-        Forward pass of the attention module.
-
-        Args:
-            x (torch.Tensor): Input tensor.
-            start_pos (int): Starting position for caching.
-            freqs_cis (torch.Tensor): Precomputed frequency tensor.
-            mask (torch.Tensor, optional): Attention mask tensor.
-
-        Returns:
-            torch.Tensor: Output tensor after attention.
-
-        """"""
         bsz, seqlen, _ = x.shape
         xq, xk, xv = self.wq(x), self.wk(x), self.wv(x)
 
@@ -312,21 +198,6 @@ class FeedForward(nn.Module):
         multiple_of: int,
         ffn_dim_multiplier: Optional[float],
     ):
-        """"""
-        Initialize the FeedForward module.
-
-        Args:
-            dim (int): Input dimension.
-            hidden_dim (int): Hidden dimension of the feedforward layer.
-            multiple_of (int): Value to ensure hidden dimension is a multiple of this value.
-            ffn_dim_multiplier (float, optional): Custom multiplier for hidden dimension. Defaults to None.
-
-        Attributes:
-            w1 (ColumnParallelLinear): Linear transformation for the first layer.
-            w2 (RowParallelLinear): Linear transformation for the second layer.
-            w3 (ColumnParallelLinear): Linear transformation for the third layer.
-
-        """"""
         super().__init__()
         hidden_dim = int(2 * hidden_dim / 3)
         # custom dim factor multiplier
@@ -350,24 +221,6 @@ class FeedForward(nn.Module):
 
 class TransformerBlock(nn.Module):
     def __init__(self, layer_id: int, args: ModelArgs):
-        """"""
-        Initialize a TransformerBlock.
-
-        Args:
-            layer_id (int): Identifier for the layer.
-            args (ModelArgs): Model configuration parameters.
-
-        Attributes:
-            n_heads (int): Number of attention heads.
-            dim (int): Dimension size of the model.
-            head_dim (int): Dimension size of each attention head.
-            attention (Attention): Attention module.
-            feed_forward (FeedForward): FeedForward module.
-            layer_id (int): Identifier for the layer.
-            attention_norm (RMSNorm): Layer normalization for attention output.
-            ffn_norm (RMSNorm): Layer normalization for feedforward output.
-
-        """"""
         super().__init__()
         self.n_heads = args.n_heads
         self.dim = args.dim
@@ -390,19 +243,6 @@ class TransformerBlock(nn.Module):
         freqs_cis: torch.Tensor,
         mask: Optional[torch.Tensor],
     ):
-        """"""
-        Perform a forward pass through the TransformerBlock.
-
-        Args:
-            x (torch.Tensor): Input tensor.
-            start_pos (int): Starting position for attention caching.
-            freqs_cis (torch.Tensor): Precomputed cosine and sine frequencies.
-            mask (torch.Tensor, optional): Masking tensor for attention. Defaults to None.
-
-        Returns:
-            torch.Tensor: Output tensor after applying attention and feedforward layers.
-
-        """"""
         h = x + self.attention(self.attention_norm(x), start_pos, freqs_cis, mask)
         out = h + self.feed_forward(self.ffn_norm(h))
         return out
@@ -410,23 +250,6 @@ class TransformerBlock(nn.Module):
 
 class Transformer(nn.Module):
     def __init__(self, params: ModelArgs):
-        """"""
-        Initialize a Transformer model.
-
-        Args:
-            params (ModelArgs): Model configuration parameters.
-
-        Attributes:
-            params (ModelArgs): Model configuration parameters.
-            vocab_size (int): Vocabulary size.
-            n_layers (int): Number of layers in the model.
-            tok_embeddings (VocabParallelEmbedding): Token embeddings.
-            layers (torch.nn.ModuleList): List of Transformer blocks.
-            norm (RMSNorm): Layer normalization for the model output.
-            output (ColumnParallelLinear): Linear layer for final output.
-            freqs_cis (torch.Tensor): Precomputed cosine and sine frequencies.
-
-        """"""
         super().__init__()
         self.params = params
         self.vocab_size = params.vocab_size
@@ -446,23 +269,13 @@ class Transformer(nn.Module):
         )
 
         self.freqs_cis = precompute_freqs_cis(
-            self.params.dim // self.params.n_heads,
-            self.params.max_seq_len * 2,
+            params.dim // params.n_heads,
+            params.max_seq_len * 2,
+            params.rope_theta,
         )
 
     @torch.inference_mode()
     def forward(self, tokens: torch.Tensor, start_pos: int):
-        """"""
-        Perform a forward pass through the Transformer model.
-
-        Args:
-            tokens (torch.Tensor): Input token indices.
-            start_pos (int): Starting position for attention caching.
-
-        Returns:
-            torch.Tensor: Output logits after applying the Transformer model.
-
-        """"""
         _bsz, seqlen = tokens.shape
         h = self.tok_embeddings(tokens)
         self.freqs_cis = self.freqs_cis.to(h.device)",No
llama/test_tokenizer.py,llama/test_tokenizer.py,32b7ddc9b638f0fd6b04b80e1845536a95f7a5d5,3afbe13a9b7beb106e43e232b281113edc9e907b,rope theta + nits,"diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index f11593d..f4ea08a 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -3,10 +3,12 @@
 
 import os
 from unittest import TestCase
-from llama.tokenizer import ChatFormat, Tokenizer
+
+from llama.tokenizer import ChatFormat, Dialog, Message, Tokenizer
 
 # TOKENIZER_PATH=<path> python -m unittest llama/test_tokenizer.py
 
+
 class TokenizerTests(TestCase):
     def setUp(self):
         self.tokenizer = Tokenizer(os.environ[""TOKENIZER_PATH""])
@@ -20,11 +22,7 @@ class TokenizerTests(TestCase):
 
     def test_encode(self):
         self.assertEqual(
-            self.tokenizer.encode(
-                ""This is a test sentence."",
-                bos=True,
-                eos=True
-            ),
+            self.tokenizer.encode(""This is a test sentence."", bos=True, eos=True),
             [128000, 2028, 374, 264, 1296, 11914, 13, 128001],
         )
 
@@ -37,7 +35,7 @@ class TokenizerTests(TestCase):
         )
 
     def test_encode_message(self):
-        message = {
+        message: Message = {
             ""role"": ""user"",
             ""content"": ""This is a test sentence."",
         }
@@ -48,13 +46,18 @@ class TokenizerTests(TestCase):
                 882,  # ""user""
                 128007,  # <|end_of_header|>
                 271,  # ""\n\n""
-                2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
+                2028,
+                374,
+                264,
+                1296,
+                11914,
+                13,  # This is a test sentence.
                 128009,  # <|eot_id|>
-            ]
+            ],
         )
 
     def test_encode_dialog(self):
-        dialog = [
+        dialog: Dialog = [
             {
                 ""role"": ""system"",
                 ""content"": ""This is a test sentence."",
@@ -62,27 +65,36 @@ class TokenizerTests(TestCase):
             {
                 ""role"": ""user"",
                 ""content"": ""This is a response."",
-            }
+            },
         ]
         self.assertEqual(
             self.format.encode_dialog_prompt(dialog),
             [
                 128000,  # <|begin_of_text|>
                 128006,  # <|start_header_id|>
-                9125,     # ""system""
+                9125,  # ""system""
                 128007,  # <|end_of_header|>
-                271,     # ""\n\n""
-                2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
+                271,  # ""\n\n""
+                2028,
+                374,
+                264,
+                1296,
+                11914,
+                13,  # ""This is a test sentence.""
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
-                882,     # ""user""
+                882,  # ""user""
                 128007,  # <|end_of_header|>
-                271,     # ""\n\n""
-                2028, 374, 264, 2077, 13,  # ""This is a response."",
+                271,  # ""\n\n""
+                2028,
+                374,
+                264,
+                2077,
+                13,  # ""This is a response."",
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
-                78191,   # ""assistant""
+                78191,  # ""assistant""
                 128007,  # <|end_of_header|>
-                271,     # ""\n\n""
-            ]
+                271,  # ""\n\n""
+            ],
         )","diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index f11593d..f4ea08a 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -3,10 +3,12 @@
 
 import os
 from unittest import TestCase
-from llama.tokenizer import ChatFormat, Tokenizer
+
+from llama.tokenizer import ChatFormat, Dialog, Message, Tokenizer
 
 # TOKENIZER_PATH=<path> python -m unittest llama/test_tokenizer.py
 
+
 class TokenizerTests(TestCase):
     def setUp(self):
         self.tokenizer = Tokenizer(os.environ[""TOKENIZER_PATH""])
@@ -20,11 +22,7 @@ class TokenizerTests(TestCase):
 
     def test_encode(self):
         self.assertEqual(
-            self.tokenizer.encode(
-                ""This is a test sentence."",
-                bos=True,
-                eos=True
-            ),
+            self.tokenizer.encode(""This is a test sentence."", bos=True, eos=True),
             [128000, 2028, 374, 264, 1296, 11914, 13, 128001],
         )
 
@@ -37,7 +35,7 @@ class TokenizerTests(TestCase):
         )
 
     def test_encode_message(self):
-        message = {
+        message: Message = {
             ""role"": ""user"",
             ""content"": ""This is a test sentence."",
         }
@@ -48,13 +46,18 @@ class TokenizerTests(TestCase):
                 882,  # ""user""
                 128007,  # <|end_of_header|>
                 271,  # ""\n\n""
-                2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
+                2028,
+                374,
+                264,
+                1296,
+                11914,
+                13,  # This is a test sentence.
                 128009,  # <|eot_id|>
-            ]
+            ],
         )
 
     def test_encode_dialog(self):
-        dialog = [
+        dialog: Dialog = [
             {
                 ""role"": ""system"",
                 ""content"": ""This is a test sentence."",
@@ -62,27 +65,36 @@ class TokenizerTests(TestCase):
             {
                 ""role"": ""user"",
                 ""content"": ""This is a response."",
-            }
+            },
         ]
         self.assertEqual(
             self.format.encode_dialog_prompt(dialog),
             [
                 128000,  # <|begin_of_text|>
                 128006,  # <|start_header_id|>
-                9125,     # ""system""
+                9125,  # ""system""
                 128007,  # <|end_of_header|>
-                271,     # ""\n\n""
-                2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
+                271,  # ""\n\n""
+                2028,
+                374,
+                264,
+                1296,
+                11914,
+                13,  # ""This is a test sentence.""
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
-                882,     # ""user""
+                882,  # ""user""
                 128007,  # <|end_of_header|>
-                271,     # ""\n\n""
-                2028, 374, 264, 2077, 13,  # ""This is a response."",
+                271,  # ""\n\n""
+                2028,
+                374,
+                264,
+                2077,
+                13,  # ""This is a response."",
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
-                78191,   # ""assistant""
+                78191,  # ""assistant""
                 128007,  # <|end_of_header|>
-                271,     # ""\n\n""
-            ]
+                271,  # ""\n\n""
+            ],
         )",No
llama/test_tokenizer.py,llama/test_tokenizer.py,f33e46b1b03af5185d0c12645d84f6107a7d6c53,32b7ddc9b638f0fd6b04b80e1845536a95f7a5d5,fix format,"diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index f4ea08a..f11593d 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -3,12 +3,10 @@
 
 import os
 from unittest import TestCase
-
-from llama.tokenizer import ChatFormat, Dialog, Message, Tokenizer
+from llama.tokenizer import ChatFormat, Tokenizer
 
 # TOKENIZER_PATH=<path> python -m unittest llama/test_tokenizer.py
 
-
 class TokenizerTests(TestCase):
     def setUp(self):
         self.tokenizer = Tokenizer(os.environ[""TOKENIZER_PATH""])
@@ -22,7 +20,11 @@ class TokenizerTests(TestCase):
 
     def test_encode(self):
         self.assertEqual(
-            self.tokenizer.encode(""This is a test sentence."", bos=True, eos=True),
+            self.tokenizer.encode(
+                ""This is a test sentence."",
+                bos=True,
+                eos=True
+            ),
             [128000, 2028, 374, 264, 1296, 11914, 13, 128001],
         )
 
@@ -35,7 +37,7 @@ class TokenizerTests(TestCase):
         )
 
     def test_encode_message(self):
-        message: Message = {
+        message = {
             ""role"": ""user"",
             ""content"": ""This is a test sentence."",
         }
@@ -46,18 +48,13 @@ class TokenizerTests(TestCase):
                 882,  # ""user""
                 128007,  # <|end_of_header|>
                 271,  # ""\n\n""
-                2028,
-                374,
-                264,
-                1296,
-                11914,
-                13,  # This is a test sentence.
+                2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
                 128009,  # <|eot_id|>
-            ],
+            ]
         )
 
     def test_encode_dialog(self):
-        dialog: Dialog = [
+        dialog = [
             {
                 ""role"": ""system"",
                 ""content"": ""This is a test sentence."",
@@ -65,36 +62,27 @@ class TokenizerTests(TestCase):
             {
                 ""role"": ""user"",
                 ""content"": ""This is a response."",
-            },
+            }
         ]
         self.assertEqual(
             self.format.encode_dialog_prompt(dialog),
             [
                 128000,  # <|begin_of_text|>
                 128006,  # <|start_header_id|>
-                9125,  # ""system""
+                9125,     # ""system""
                 128007,  # <|end_of_header|>
-                271,  # ""\n\n""
-                2028,
-                374,
-                264,
-                1296,
-                11914,
-                13,  # ""This is a test sentence.""
+                271,     # ""\n\n""
+                2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
-                882,  # ""user""
+                882,     # ""user""
                 128007,  # <|end_of_header|>
-                271,  # ""\n\n""
-                2028,
-                374,
-                264,
-                2077,
-                13,  # ""This is a response."",
+                271,     # ""\n\n""
+                2028, 374, 264, 2077, 13,  # ""This is a response."",
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
-                78191,  # ""assistant""
+                78191,   # ""assistant""
                 128007,  # <|end_of_header|>
-                271,  # ""\n\n""
-            ],
+                271,     # ""\n\n""
+            ]
         )","diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index f4ea08a..f11593d 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -3,12 +3,10 @@
 
 import os
 from unittest import TestCase
-
-from llama.tokenizer import ChatFormat, Dialog, Message, Tokenizer
+from llama.tokenizer import ChatFormat, Tokenizer
 
 # TOKENIZER_PATH=<path> python -m unittest llama/test_tokenizer.py
 
-
 class TokenizerTests(TestCase):
     def setUp(self):
         self.tokenizer = Tokenizer(os.environ[""TOKENIZER_PATH""])
@@ -22,7 +20,11 @@ class TokenizerTests(TestCase):
 
     def test_encode(self):
         self.assertEqual(
-            self.tokenizer.encode(""This is a test sentence."", bos=True, eos=True),
+            self.tokenizer.encode(
+                ""This is a test sentence."",
+                bos=True,
+                eos=True
+            ),
             [128000, 2028, 374, 264, 1296, 11914, 13, 128001],
         )
 
@@ -35,7 +37,7 @@ class TokenizerTests(TestCase):
         )
 
     def test_encode_message(self):
-        message: Message = {
+        message = {
             ""role"": ""user"",
             ""content"": ""This is a test sentence."",
         }
@@ -46,18 +48,13 @@ class TokenizerTests(TestCase):
                 882,  # ""user""
                 128007,  # <|end_of_header|>
                 271,  # ""\n\n""
-                2028,
-                374,
-                264,
-                1296,
-                11914,
-                13,  # This is a test sentence.
+                2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
                 128009,  # <|eot_id|>
-            ],
+            ]
         )
 
     def test_encode_dialog(self):
-        dialog: Dialog = [
+        dialog = [
             {
                 ""role"": ""system"",
                 ""content"": ""This is a test sentence."",
@@ -65,36 +62,27 @@ class TokenizerTests(TestCase):
             {
                 ""role"": ""user"",
                 ""content"": ""This is a response."",
-            },
+            }
         ]
         self.assertEqual(
             self.format.encode_dialog_prompt(dialog),
             [
                 128000,  # <|begin_of_text|>
                 128006,  # <|start_header_id|>
-                9125,  # ""system""
+                9125,     # ""system""
                 128007,  # <|end_of_header|>
-                271,  # ""\n\n""
-                2028,
-                374,
-                264,
-                1296,
-                11914,
-                13,  # ""This is a test sentence.""
+                271,     # ""\n\n""
+                2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
-                882,  # ""user""
+                882,     # ""user""
                 128007,  # <|end_of_header|>
-                271,  # ""\n\n""
-                2028,
-                374,
-                264,
-                2077,
-                13,  # ""This is a response."",
+                271,     # ""\n\n""
+                2028, 374, 264, 2077, 13,  # ""This is a response."",
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
-                78191,  # ""assistant""
+                78191,   # ""assistant""
                 128007,  # <|end_of_header|>
-                271,  # ""\n\n""
-            ],
+                271,     # ""\n\n""
+            ]
         )",No
README.md,README.md,8a483b4c3a68a274ebd39a4b4aec0b86d88d1d47,f33e46b1b03af5185d0c12645d84f6107a7d6c53,Update README.md,"diff --git a/README.md b/README.md
index 1bbf5f5..aab6d0f 100644
--- a/README.md
+++ b/README.md
@@ -93,7 +93,7 @@ torchrun --nproc_per_node 1 example_chat_completion.py \
 ```
 
 Llama 3 is a new technology that carries potential risks with use. Testing conducted to date has not — and could not — cover all scenarios.
-In order to help developers address these risks, we have created the [Responsible Use Guide][(https://ai.meta.com/static-resource/responsible-use-guide/).
+In order to help developers address these risks, we have created the [Responsible Use Guide](https://ai.meta.com/static-resource/responsible-use-guide/).
 
 ## Issues
 ","diff --git a/README.md b/README.md
index 1bbf5f5..aab6d0f 100644
--- a/README.md
+++ b/README.md
@@ -93,7 +93,7 @@ torchrun --nproc_per_node 1 example_chat_completion.py \
 ```
 
 Llama 3 is a new technology that carries potential risks with use. Testing conducted to date has not — and could not — cover all scenarios.
-In order to help developers address these risks, we have created the [Responsible Use Guide][(https://ai.meta.com/static-resource/responsible-use-guide/).
+In order to help developers address these risks, we have created the [Responsible Use Guide](https://ai.meta.com/static-resource/responsible-use-guide/).
 
 ## Issues
 ",No
README.md,README.md,e2aab36a0c4e0732a14075db1bb5a71d5b0a66f6,8a483b4c3a68a274ebd39a4b4aec0b86d88d1d47,Model Card,"diff --git a/README.md b/README.md
index aab6d0f..c74190e 100644
--- a/README.md
+++ b/README.md
@@ -103,7 +103,7 @@ Please report any software “bug”, or other problems with the models through
 - Reporting bugs and security concerns: [facebook.com/whitehat/info](http://facebook.com/whitehat/info)
 
 ## Model Card
-See [MODEL_CARD.md](..).
+See [MODEL_CARD.md](MODEL_CARD.md).
 
 ## License
 ","diff --git a/README.md b/README.md
index aab6d0f..c74190e 100644
--- a/README.md
+++ b/README.md
@@ -103,7 +103,7 @@ Please report any software “bug”, or other problems with the models through
 - Reporting bugs and security concerns: [facebook.com/whitehat/info](http://facebook.com/whitehat/info)
 
 ## Model Card
-See [MODEL_CARD.md](..).
+See [MODEL_CARD.md](MODEL_CARD.md).
 
 ## License
 ",No
llama/tokenizer.py,llama/tokenizer.py,71367a6cafecf2eea125c374161e6cea10b69dfa,e2aab36a0c4e0732a14075db1bb5a71d5b0a66f6,Update tokenizer.py,"diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index 9ff9206..e691beb 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -37,7 +37,7 @@ Dialog = Sequence[Message]
 
 class Tokenizer:
     """"""
-    tokenizing and encoding/decoding text using the Tiktoken tokenizer.
+    Tokenizing and encoding/decoding text using the Tiktoken tokenizer.
     """"""
 
     special_tokens: Dict[str, int]
@@ -53,7 +53,6 @@ class Tokenizer:
         Args:
             model_path (str): The path to the Tiktoken model file.
         """"""
-        # reload tokenizer
         assert os.path.isfile(model_path), model_path
 
         mergeable_ranks = load_tiktoken_bpe(model_path)
@@ -84,8 +83,8 @@ class Tokenizer:
         )
         logger.info(f""Reloaded tiktoken model from {model_path}"")
 
-        # BOS / EOS token IDs
         self.n_words: int = self.model.n_vocab
+        # BOS / EOS token IDs
         self.bos_id: int = self.special_tokens[""<|begin_of_text|>""]
         self.eos_id: int = self.special_tokens[""<|end_of_text|>""]
         self.pad_id: int = -1
@@ -130,7 +129,7 @@ class Tokenizer:
         assert type(s) is str
 
         # The tiktoken tokenizer can handle <=400k chars without
-        # pyo3_runtime.PanicException (may go beyond 400k)
+        # pyo3_runtime.PanicException.
         TIKTOKEN_MAX_ENCODE_CHARS = 400_000
 
         # https://github.com/openai/tiktoken/issues/195
@@ -170,7 +169,7 @@ class Tokenizer:
         Returns:
             str: The decoded string.
         """"""
-        # typecast is safe here, Tiktoken doesn't do anything list-related with the sequence.
+        # Typecast is safe here. Tiktoken doesn't do anything list-related with the sequence.
         return self.model.decode(cast(List[int], t))
 
     @staticmethod
@@ -178,8 +177,8 @@ class Tokenizer:
         s: str, max_consecutive_slice_len: int
     ) -> Iterator[str]:
         """"""
-        Split the string `s` so that each substring contains no more than `max_consecutive_slice_len`
-        consecutive whitespaces or consecutive non-whitespaces
+        Splits the string `s` so that each substring contains no more than `max_consecutive_slice_len`
+        consecutive whitespaces or consecutive non-whitespaces.
         """"""
         current_slice_len = 0
         current_slice_is_space = s[0].isspace() if len(s) > 0 else False
@@ -225,6 +224,6 @@ class ChatFormat:
         tokens.append(self.tokenizer.special_tokens[""<|begin_of_text|>""])
         for message in dialog:
             tokens.extend(self.encode_message(message))
-        # Add the start of an assistant message for the model to complete
+        # Add the start of an assistant message for the model to complete.
         tokens.extend(self.encode_header({""role"": ""assistant"", ""content"": """"}))
         return tokens","diff --git a/llama/tokenizer.py b/llama/tokenizer.py
index 9ff9206..e691beb 100644
--- a/llama/tokenizer.py
+++ b/llama/tokenizer.py
@@ -37,7 +37,7 @@ Dialog = Sequence[Message]
 
 class Tokenizer:
     """"""
-    tokenizing and encoding/decoding text using the Tiktoken tokenizer.
+    Tokenizing and encoding/decoding text using the Tiktoken tokenizer.
     """"""
 
     special_tokens: Dict[str, int]
@@ -53,7 +53,6 @@ class Tokenizer:
         Args:
             model_path (str): The path to the Tiktoken model file.
         """"""
-        # reload tokenizer
         assert os.path.isfile(model_path), model_path
 
         mergeable_ranks = load_tiktoken_bpe(model_path)
@@ -84,8 +83,8 @@ class Tokenizer:
         )
         logger.info(f""Reloaded tiktoken model from {model_path}"")
 
-        # BOS / EOS token IDs
         self.n_words: int = self.model.n_vocab
+        # BOS / EOS token IDs
         self.bos_id: int = self.special_tokens[""<|begin_of_text|>""]
         self.eos_id: int = self.special_tokens[""<|end_of_text|>""]
         self.pad_id: int = -1
@@ -130,7 +129,7 @@ class Tokenizer:
         assert type(s) is str
 
         # The tiktoken tokenizer can handle <=400k chars without
-        # pyo3_runtime.PanicException (may go beyond 400k)
+        # pyo3_runtime.PanicException.
         TIKTOKEN_MAX_ENCODE_CHARS = 400_000
 
         # https://github.com/openai/tiktoken/issues/195
@@ -170,7 +169,7 @@ class Tokenizer:
         Returns:
             str: The decoded string.
         """"""
-        # typecast is safe here, Tiktoken doesn't do anything list-related with the sequence.
+        # Typecast is safe here. Tiktoken doesn't do anything list-related with the sequence.
         return self.model.decode(cast(List[int], t))
 
     @staticmethod
@@ -178,8 +177,8 @@ class Tokenizer:
         s: str, max_consecutive_slice_len: int
     ) -> Iterator[str]:
         """"""
-        Split the string `s` so that each substring contains no more than `max_consecutive_slice_len`
-        consecutive whitespaces or consecutive non-whitespaces
+        Splits the string `s` so that each substring contains no more than `max_consecutive_slice_len`
+        consecutive whitespaces or consecutive non-whitespaces.
         """"""
         current_slice_len = 0
         current_slice_is_space = s[0].isspace() if len(s) > 0 else False
@@ -225,6 +224,6 @@ class ChatFormat:
         tokens.append(self.tokenizer.special_tokens[""<|begin_of_text|>""])
         for message in dialog:
             tokens.extend(self.encode_message(message))
-        # Add the start of an assistant message for the model to complete
+        # Add the start of an assistant message for the model to complete.
         tokens.extend(self.encode_header({""role"": ""assistant"", ""content"": """"}))
         return tokens",No
README.md,README.md,d33526be01d49aebbed5c13a5b2b497e30476e29,71367a6cafecf2eea125c374161e6cea10b69dfa,Model size fix,"diff --git a/README.md b/README.md
index c74190e..8509da7 100644
--- a/README.md
+++ b/README.md
@@ -2,7 +2,7 @@
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.
 
-This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 7B to 70B parameters.
+This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 8B to 70B parameters.
 
 This repository is intended as a minimal example to load Llama 3 models and run inference. For more detailed examples, see [llama-recipes](https://github.com/facebookresearch/llama-recipes/).
 ","diff --git a/README.md b/README.md
index c74190e..8509da7 100644
--- a/README.md
+++ b/README.md
@@ -2,7 +2,7 @@
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.
 
-This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 7B to 70B parameters.
+This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 8B to 70B parameters.
 
 This repository is intended as a minimal example to load Llama 3 models and run inference. For more detailed examples, see [llama-recipes](https://github.com/facebookresearch/llama-recipes/).
 ",No
README.md,README.md,cf4b9984031d981babd891837f2130e2a48110bb,223e08fc54cf48f41de35747892f8f775ad09cf5,Update README.md,"diff --git a/README.md b/README.md
index 8509da7..5774d5c 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-# Llama 3
+# Meta Llama 3
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.
 ","diff --git a/README.md b/README.md
index 8509da7..5774d5c 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-# Llama 3
+# Meta Llama 3
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.
 ",No
README.md,README.md,c41d1702368e5fcd0276b2d70dd909a18bfb0aa5,a5c3a2ddd017bb8de29b5fe7b2fea145b31531c5,Link to LICENSE,"diff --git a/README.md b/README.md
index 5774d5c..daf1a81 100644
--- a/README.md
+++ b/README.md
@@ -109,7 +109,7 @@ See [MODEL_CARD.md](MODEL_CARD.md).
 
 Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements.
 
-See the [LICENSE](..) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
+See the [LICENSE](LICENSE.md) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
 ## Questions
 ","diff --git a/README.md b/README.md
index 5774d5c..daf1a81 100644
--- a/README.md
+++ b/README.md
@@ -109,7 +109,7 @@ See [MODEL_CARD.md](MODEL_CARD.md).
 
 Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements.
 
-See the [LICENSE](..) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
+See the [LICENSE](LICENSE.md) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
 ## Questions
 ",No
README.md,README.md,590883a45dcb22080934ec63e4fdd9f04804ad96,c41d1702368e5fcd0276b2d70dd909a18bfb0aa5,Fix link,"diff --git a/README.md b/README.md
index daf1a81..784099a 100644
--- a/README.md
+++ b/README.md
@@ -109,7 +109,7 @@ See [MODEL_CARD.md](MODEL_CARD.md).
 
 Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements.
 
-See the [LICENSE](LICENSE.md) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
+See the [LICENSE](LICENSE) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
 ## Questions
 ","diff --git a/README.md b/README.md
index daf1a81..784099a 100644
--- a/README.md
+++ b/README.md
@@ -109,7 +109,7 @@ See [MODEL_CARD.md](MODEL_CARD.md).
 
 Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements.
 
-See the [LICENSE](LICENSE.md) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
+See the [LICENSE](LICENSE) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
 ## Questions
 ",No
LICENSE,LICENSE,dab0ae890fd0316369b89901b199355034bbe1b5,590883a45dcb22080934ec63e4fdd9f04804ad96,Update LICENSE,"diff --git a/LICENSE b/LICENSE
index 6e966fc..1fec50c 100644
--- a/LICENSE
+++ b/LICENSE
@@ -19,11 +19,11 @@ By clicking “I Accept” below or by using or distributing any portion or elem
 
 	a. Grant of Rights. You are granted a non-exclusive, worldwide, non-transferable and royalty-free limited license under Meta’s intellectual property or other rights owned by Meta embodied in the Llama Materials to use, reproduce, distribute, copy, create derivative works of, and make modifications to the Llama Materials. 
 	b. Redistribution and Use.  
-			i. If you distribute or make available the Llama Materials (or any derivative works thereof), or a product or service that uses any of them, including another AI model, you shall (A) provide a copy of this Agreement with any such Llama Materials; and (B) prominently display “Built with Meta Llama 3” on a related website, user interface, blogpost, about page, or product documentation. If you use the Llama Materials to create, train, fine tune, or otherwise improve an AI model, which is distributed or made available, you shall also include “Llama 3” at the beginning of any such AI model name.
-			ii. If you receive Llama Materials, or any derivative works thereof, from a Licensee as part of an integrated end user product, then Section 2 of this Agreement will not apply to you. 
-			iii. You must retain in all copies of the Llama Materials that you distribute the following attribution notice within a “Notice” text file distributed as a part of such copies: “Meta Llama 3 is licensed under the Meta Llama 3 Community License, Copyright © Meta Platforms, Inc. All Rights Reserved.”
-			iv. Your use of the Llama Materials must comply with applicable laws and regulations (including trade compliance laws and regulations) and adhere to the Acceptable Use Policy for the Llama Materials (available at https://llama.meta.com/llama3/use-policy), which is hereby incorporated by reference into this Agreement.
-			v. You will not use the Llama Materials or any output or results of the Llama Materials to improve any other large language model (excluding Meta Llama 3 or derivative works thereof).  
+		i. If you distribute or make available the Llama Materials (or any derivative works thereof), or a product or service that uses any of them, including another AI model, you shall (A) provide a copy of this Agreement with any such Llama Materials; and (B) prominently display “Built with Meta Llama 3” on a related website, user interface, blogpost, about page, or product documentation. If you use the Llama Materials to create, train, fine tune, or otherwise improve an AI model, which is distributed or made available, you shall also include “Llama 3” at the beginning of any such AI model name.
+		ii. If you receive Llama Materials, or any derivative works thereof, from a Licensee as part of an integrated end user product, then Section 2 of this Agreement will not apply to you. 
+		iii. You must retain in all copies of the Llama Materials that you distribute the following attribution notice within a “Notice” text file distributed as a part of such copies: “Meta Llama 3 is licensed under the Meta Llama 3 Community License, Copyright © Meta Platforms, Inc. All Rights Reserved.”
+		iv. Your use of the Llama Materials must comply with applicable laws and regulations (including trade compliance laws and regulations) and adhere to the Acceptable Use Policy for the Llama Materials (available at https://llama.meta.com/llama3/use-policy), which is hereby incorporated by reference into this Agreement.
+		v. You will not use the Llama Materials or any output or results of the Llama Materials to improve any other large language model (excluding Meta Llama 3 or derivative works thereof).  
 
 2. Additional Commercial Terms. If, on the Meta Llama 3 version release date, the monthly active users of the products or services made available by or for Licensee, or Licensee’s affiliates, is greater than 700 million monthly active users in the preceding calendar month, you must request a license from Meta, which Meta may grant to you in its sole discretion, and you are not authorized to exercise any of the rights under this Agreement unless or until Meta otherwise expressly grants you such rights.
 
@@ -32,7 +32,7 @@ By clicking “I Accept” below or by using or distributing any portion or elem
 4. Limitation of Liability. IN NO EVENT WILL META OR ITS AFFILIATES BE LIABLE UNDER ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, TORT, NEGLIGENCE, PRODUCTS LIABILITY, OR OTHERWISE, ARISING OUT OF THIS AGREEMENT, FOR ANY LOST PROFITS OR ANY INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL, EXEMPLARY OR PUNITIVE DAMAGES, EVEN IF META OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF ANY OF THE FOREGOING.
  
 5. Intellectual Property.
-	a. No trademark licenses are granted under this Agreement, and in connection with the Llama Materials, neither Meta nor Licensee may use any name or mark owned by or associated with the other or any of its affiliates, except as required for reasonable and customary use in describing and redistributing the Llama Materials or as set forth in this Section 5(a). Meta hereby grants you a license to use “Llama 3” (the “Mark”) solely as required to comply with the last sentence of Section 			1.b.i. You will comply with Meta’s brand guidelines (currently accessible at https://about.meta.com/brand/resources/meta/company-brand/  ). All goodwill arising out of your use of the Mark will inure to the benefit of Meta.
+	a. No trademark licenses are granted under this Agreement, and in connection with the Llama Materials, neither Meta nor Licensee may use any name or mark owned by or associated with the other or any of its affiliates, except as required for reasonable and customary use in describing and redistributing the Llama Materials or as set forth in this Section 5(a). Meta hereby grants you a license to use “Llama 3” (the “Mark”) solely as required to comply with the last sentence of Section 1.b.i. You will comply with Meta’s brand guidelines (currently accessible at https://about.meta.com/brand/resources/meta/company-brand/  ). All goodwill arising out of your use of the Mark will inure to the benefit of Meta.
 	b. Subject to Meta’s ownership of Llama Materials and derivatives made by or for Meta, with respect to any derivative works and modifications of the Llama Materials that are made by you, as between you and Meta, you are and will be the owner of such derivative works and modifications.
 	c. If you institute litigation or other proceedings against Meta or any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Llama Materials or Meta Llama 3 outputs or results, or any portion of any of the foregoing, constitutes infringement of intellectual property or other rights owned or licensable by you, then any licenses granted to you under this Agreement shall terminate as of the date such litigation or claim is filed or instituted. You will indemnify and hold harmless Meta from and against any claim by any third party arising out of or related to your use or distribution of the Llama Materials.
 
@@ -46,39 +46,39 @@ Meta is committed to promoting safe and fair use of its tools and features, incl
 Prohibited Uses
 We want everyone to use Meta Llama 3 safely and responsibly. You agree you will not use, or allow others to use, Meta Llama 3 to: 
 1. Violate the law or others’ rights, including to:
-   a. Engage in, promote, generate, contribute to, encourage, plan, incite, or further illegal or unlawful activity or content, such as: 
-      i. Violence or terrorism 
-      ii. Exploitation or harm to children, including the solicitation, creation, acquisition, or dissemination of child exploitative content or failure to report Child Sexual Abuse Material
-      iii. Human trafficking, exploitation, and sexual violence
-      iv. The illegal distribution of information or materials to minors, including obscene materials, or failure to employ legally required age-gating in connection with such information or materials.
-      v. Sexual solicitation
-      vi. Any other criminal activity
-   b. Engage in, promote, incite, or facilitate the harassment, abuse, threatening, or bullying of individuals or groups of individuals
-   c. Engage in, promote, incite, or facilitate discrimination or other unlawful or harmful conduct in the provision of employment, employment benefits, credit, housing, other economic benefits, or other essential goods and services
-   d. Engage in the unauthorized or unlicensed practice of any profession including, but not limited to, financial, legal, medical/health, or related professional practices 
-   e. Collect, process, disclose, generate, or infer health, demographic, or other sensitive personal or private information about individuals without rights and consents required by applicable laws
-   f. Engage in or facilitate any action or generate any content that infringes, misappropriates, or otherwise violates any third-party rights, including the outputs or results of any products or services using the Llama Materials
-   g. Create, generate, or facilitate the creation of malicious code, malware, computer viruses or do anything else that could disable, overburden, interfere with or impair the proper working, integrity, operation or appearance of a website or computer system 
+	a. Engage in, promote, generate, contribute to, encourage, plan, incite, or further illegal or unlawful activity or content, such as: 
+      		i. Violence or terrorism 
+      		ii. Exploitation or harm to children, including the solicitation, creation, acquisition, or dissemination of child exploitative content or failure to report Child Sexual Abuse Material
+      		iii. Human trafficking, exploitation, and sexual violence
+      		iv. The illegal distribution of information or materials to minors, including obscene materials, or failure to employ legally required age-gating in connection with such information or materials.
+      		v. Sexual solicitation
+      		vi. Any other criminal activity
+   	b. Engage in, promote, incite, or facilitate the harassment, abuse, threatening, or bullying of individuals or groups of individuals
+   	c. Engage in, promote, incite, or facilitate discrimination or other unlawful or harmful conduct in the provision of employment, employment benefits, credit, housing, other economic benefits, or other essential goods and services
+   	d. Engage in the unauthorized or unlicensed practice of any profession including, but not limited to, financial, legal, medical/health, or related professional practices 
+   	e. Collect, process, disclose, generate, or infer health, demographic, or other sensitive personal or private information about individuals without rights and consents required by applicable laws
+   	f. Engage in or facilitate any action or generate any content that infringes, misappropriates, or otherwise violates any third-party rights, including the outputs or results of any products or services using the Llama Materials
+   	g. Create, generate, or facilitate the creation of malicious code, malware, computer viruses or do anything else that could disable, overburden, interfere with or impair the proper working, integrity, operation or appearance of a website or computer system 
 
 2. Engage in, promote, incite, facilitate, or assist in the planning or development of activities that present a risk of death or bodily harm to individuals, including use of Meta Llama 3 related to the following:
-   a. Military, warfare, nuclear industries or applications, espionage, use for materials or activities that are subject to the International Traffic Arms Regulations (ITAR) maintained by the United States Department of State
-   b. Guns and illegal weapons (including weapon development)
-   c. Illegal drugs and regulated/controlled substances
-   d. Operation of critical infrastructure, transportation technologies, or heavy machinery
-   e. Self-harm or harm to others, including suicide, cutting, and eating disorders
-   f. Any content intended to incite or promote violence, abuse, or any infliction of bodily harm to an individual
+   	a. Military, warfare, nuclear industries or applications, espionage, use for materials or activities that are subject to the International Traffic Arms Regulations (ITAR) maintained by the United States Department of State
+   	b. Guns and illegal weapons (including weapon development)
+   	c. Illegal drugs and regulated/controlled substances
+   	d. Operation of critical infrastructure, transportation technologies, or heavy machinery
+   	e. Self-harm or harm to others, including suicide, cutting, and eating disorders
+   	f. Any content intended to incite or promote violence, abuse, or any infliction of bodily harm to an individual
 
 3. Intentionally deceive or mislead others, including use of Meta Llama 3 related to the following:
-   a. Generating, promoting, or furthering fraud or the creation or promotion of disinformation
-   b. Generating, promoting, or furthering defamatory content, including the creation of defamatory statements, images, or other content
-   c. Generating, promoting, or further distributing spam
-   d. Impersonating another individual without consent, authorization, or legal right
-   e. Representing that the use of Meta Llama 3 or outputs are human-generated
-   f. Generating or facilitating false online engagement, including fake reviews and other means of fake online engagement 
-   g. Fail to appropriately disclose to end users any known dangers of your AI system 
+   	a. Generating, promoting, or furthering fraud or the creation or promotion of disinformation
+   	b. Generating, promoting, or furthering defamatory content, including the creation of defamatory statements, images, or other content
+   	c. Generating, promoting, or further distributing spam
+   	d. Impersonating another individual without consent, authorization, or legal right
+   	e. Representing that the use of Meta Llama 3 or outputs are human-generated
+   	f. Generating or facilitating false online engagement, including fake reviews and other means of fake online engagement 
+   	g. Fail to appropriately disclose to end users any known dangers of your AI system 
 
 Please report any violation of this Policy, software “bug,” or other problems that could lead to a violation of this Policy through one of the following means:
-   * Reporting issues with the model: https://github.com/meta-llama/llama3
-   * Reporting risky content generated by the model: developers.facebook.com/llama_output_feedback
-   * Reporting bugs and security concerns: facebook.com/whitehat/info
-   * Reporting violations of the Acceptable Use Policy or unlicensed uses of Meta Llama 3: LlamaUseReport@meta.com
+   	* Reporting issues with the model: https://github.com/meta-llama/llama3
+   	* Reporting risky content generated by the model: developers.facebook.com/llama_output_feedback
+   	* Reporting bugs and security concerns: facebook.com/whitehat/info
+   	* Reporting violations of the Acceptable Use Policy or unlicensed uses of Meta Llama 3: LlamaUseReport@meta.com","diff --git a/LICENSE b/LICENSE
index 6e966fc..1fec50c 100644
--- a/LICENSE
+++ b/LICENSE
@@ -19,11 +19,11 @@ By clicking “I Accept” below or by using or distributing any portion or elem
 
 	a. Grant of Rights. You are granted a non-exclusive, worldwide, non-transferable and royalty-free limited license under Meta’s intellectual property or other rights owned by Meta embodied in the Llama Materials to use, reproduce, distribute, copy, create derivative works of, and make modifications to the Llama Materials. 
 	b. Redistribution and Use.  
-			i. If you distribute or make available the Llama Materials (or any derivative works thereof), or a product or service that uses any of them, including another AI model, you shall (A) provide a copy of this Agreement with any such Llama Materials; and (B) prominently display “Built with Meta Llama 3” on a related website, user interface, blogpost, about page, or product documentation. If you use the Llama Materials to create, train, fine tune, or otherwise improve an AI model, which is distributed or made available, you shall also include “Llama 3” at the beginning of any such AI model name.
-			ii. If you receive Llama Materials, or any derivative works thereof, from a Licensee as part of an integrated end user product, then Section 2 of this Agreement will not apply to you. 
-			iii. You must retain in all copies of the Llama Materials that you distribute the following attribution notice within a “Notice” text file distributed as a part of such copies: “Meta Llama 3 is licensed under the Meta Llama 3 Community License, Copyright © Meta Platforms, Inc. All Rights Reserved.”
-			iv. Your use of the Llama Materials must comply with applicable laws and regulations (including trade compliance laws and regulations) and adhere to the Acceptable Use Policy for the Llama Materials (available at https://llama.meta.com/llama3/use-policy), which is hereby incorporated by reference into this Agreement.
-			v. You will not use the Llama Materials or any output or results of the Llama Materials to improve any other large language model (excluding Meta Llama 3 or derivative works thereof).  
+		i. If you distribute or make available the Llama Materials (or any derivative works thereof), or a product or service that uses any of them, including another AI model, you shall (A) provide a copy of this Agreement with any such Llama Materials; and (B) prominently display “Built with Meta Llama 3” on a related website, user interface, blogpost, about page, or product documentation. If you use the Llama Materials to create, train, fine tune, or otherwise improve an AI model, which is distributed or made available, you shall also include “Llama 3” at the beginning of any such AI model name.
+		ii. If you receive Llama Materials, or any derivative works thereof, from a Licensee as part of an integrated end user product, then Section 2 of this Agreement will not apply to you. 
+		iii. You must retain in all copies of the Llama Materials that you distribute the following attribution notice within a “Notice” text file distributed as a part of such copies: “Meta Llama 3 is licensed under the Meta Llama 3 Community License, Copyright © Meta Platforms, Inc. All Rights Reserved.”
+		iv. Your use of the Llama Materials must comply with applicable laws and regulations (including trade compliance laws and regulations) and adhere to the Acceptable Use Policy for the Llama Materials (available at https://llama.meta.com/llama3/use-policy), which is hereby incorporated by reference into this Agreement.
+		v. You will not use the Llama Materials or any output or results of the Llama Materials to improve any other large language model (excluding Meta Llama 3 or derivative works thereof).  
 
 2. Additional Commercial Terms. If, on the Meta Llama 3 version release date, the monthly active users of the products or services made available by or for Licensee, or Licensee’s affiliates, is greater than 700 million monthly active users in the preceding calendar month, you must request a license from Meta, which Meta may grant to you in its sole discretion, and you are not authorized to exercise any of the rights under this Agreement unless or until Meta otherwise expressly grants you such rights.
 
@@ -32,7 +32,7 @@ By clicking “I Accept” below or by using or distributing any portion or elem
 4. Limitation of Liability. IN NO EVENT WILL META OR ITS AFFILIATES BE LIABLE UNDER ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, TORT, NEGLIGENCE, PRODUCTS LIABILITY, OR OTHERWISE, ARISING OUT OF THIS AGREEMENT, FOR ANY LOST PROFITS OR ANY INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL, EXEMPLARY OR PUNITIVE DAMAGES, EVEN IF META OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF ANY OF THE FOREGOING.
  
 5. Intellectual Property.
-	a. No trademark licenses are granted under this Agreement, and in connection with the Llama Materials, neither Meta nor Licensee may use any name or mark owned by or associated with the other or any of its affiliates, except as required for reasonable and customary use in describing and redistributing the Llama Materials or as set forth in this Section 5(a). Meta hereby grants you a license to use “Llama 3” (the “Mark”) solely as required to comply with the last sentence of Section 			1.b.i. You will comply with Meta’s brand guidelines (currently accessible at https://about.meta.com/brand/resources/meta/company-brand/  ). All goodwill arising out of your use of the Mark will inure to the benefit of Meta.
+	a. No trademark licenses are granted under this Agreement, and in connection with the Llama Materials, neither Meta nor Licensee may use any name or mark owned by or associated with the other or any of its affiliates, except as required for reasonable and customary use in describing and redistributing the Llama Materials or as set forth in this Section 5(a). Meta hereby grants you a license to use “Llama 3” (the “Mark”) solely as required to comply with the last sentence of Section 1.b.i. You will comply with Meta’s brand guidelines (currently accessible at https://about.meta.com/brand/resources/meta/company-brand/  ). All goodwill arising out of your use of the Mark will inure to the benefit of Meta.
 	b. Subject to Meta’s ownership of Llama Materials and derivatives made by or for Meta, with respect to any derivative works and modifications of the Llama Materials that are made by you, as between you and Meta, you are and will be the owner of such derivative works and modifications.
 	c. If you institute litigation or other proceedings against Meta or any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Llama Materials or Meta Llama 3 outputs or results, or any portion of any of the foregoing, constitutes infringement of intellectual property or other rights owned or licensable by you, then any licenses granted to you under this Agreement shall terminate as of the date such litigation or claim is filed or instituted. You will indemnify and hold harmless Meta from and against any claim by any third party arising out of or related to your use or distribution of the Llama Materials.
 
@@ -46,39 +46,39 @@ Meta is committed to promoting safe and fair use of its tools and features, incl
 Prohibited Uses
 We want everyone to use Meta Llama 3 safely and responsibly. You agree you will not use, or allow others to use, Meta Llama 3 to: 
 1. Violate the law or others’ rights, including to:
-   a. Engage in, promote, generate, contribute to, encourage, plan, incite, or further illegal or unlawful activity or content, such as: 
-      i. Violence or terrorism 
-      ii. Exploitation or harm to children, including the solicitation, creation, acquisition, or dissemination of child exploitative content or failure to report Child Sexual Abuse Material
-      iii. Human trafficking, exploitation, and sexual violence
-      iv. The illegal distribution of information or materials to minors, including obscene materials, or failure to employ legally required age-gating in connection with such information or materials.
-      v. Sexual solicitation
-      vi. Any other criminal activity
-   b. Engage in, promote, incite, or facilitate the harassment, abuse, threatening, or bullying of individuals or groups of individuals
-   c. Engage in, promote, incite, or facilitate discrimination or other unlawful or harmful conduct in the provision of employment, employment benefits, credit, housing, other economic benefits, or other essential goods and services
-   d. Engage in the unauthorized or unlicensed practice of any profession including, but not limited to, financial, legal, medical/health, or related professional practices 
-   e. Collect, process, disclose, generate, or infer health, demographic, or other sensitive personal or private information about individuals without rights and consents required by applicable laws
-   f. Engage in or facilitate any action or generate any content that infringes, misappropriates, or otherwise violates any third-party rights, including the outputs or results of any products or services using the Llama Materials
-   g. Create, generate, or facilitate the creation of malicious code, malware, computer viruses or do anything else that could disable, overburden, interfere with or impair the proper working, integrity, operation or appearance of a website or computer system 
+	a. Engage in, promote, generate, contribute to, encourage, plan, incite, or further illegal or unlawful activity or content, such as: 
+      		i. Violence or terrorism 
+      		ii. Exploitation or harm to children, including the solicitation, creation, acquisition, or dissemination of child exploitative content or failure to report Child Sexual Abuse Material
+      		iii. Human trafficking, exploitation, and sexual violence
+      		iv. The illegal distribution of information or materials to minors, including obscene materials, or failure to employ legally required age-gating in connection with such information or materials.
+      		v. Sexual solicitation
+      		vi. Any other criminal activity
+   	b. Engage in, promote, incite, or facilitate the harassment, abuse, threatening, or bullying of individuals or groups of individuals
+   	c. Engage in, promote, incite, or facilitate discrimination or other unlawful or harmful conduct in the provision of employment, employment benefits, credit, housing, other economic benefits, or other essential goods and services
+   	d. Engage in the unauthorized or unlicensed practice of any profession including, but not limited to, financial, legal, medical/health, or related professional practices 
+   	e. Collect, process, disclose, generate, or infer health, demographic, or other sensitive personal or private information about individuals without rights and consents required by applicable laws
+   	f. Engage in or facilitate any action or generate any content that infringes, misappropriates, or otherwise violates any third-party rights, including the outputs or results of any products or services using the Llama Materials
+   	g. Create, generate, or facilitate the creation of malicious code, malware, computer viruses or do anything else that could disable, overburden, interfere with or impair the proper working, integrity, operation or appearance of a website or computer system 
 
 2. Engage in, promote, incite, facilitate, or assist in the planning or development of activities that present a risk of death or bodily harm to individuals, including use of Meta Llama 3 related to the following:
-   a. Military, warfare, nuclear industries or applications, espionage, use for materials or activities that are subject to the International Traffic Arms Regulations (ITAR) maintained by the United States Department of State
-   b. Guns and illegal weapons (including weapon development)
-   c. Illegal drugs and regulated/controlled substances
-   d. Operation of critical infrastructure, transportation technologies, or heavy machinery
-   e. Self-harm or harm to others, including suicide, cutting, and eating disorders
-   f. Any content intended to incite or promote violence, abuse, or any infliction of bodily harm to an individual
+   	a. Military, warfare, nuclear industries or applications, espionage, use for materials or activities that are subject to the International Traffic Arms Regulations (ITAR) maintained by the United States Department of State
+   	b. Guns and illegal weapons (including weapon development)
+   	c. Illegal drugs and regulated/controlled substances
+   	d. Operation of critical infrastructure, transportation technologies, or heavy machinery
+   	e. Self-harm or harm to others, including suicide, cutting, and eating disorders
+   	f. Any content intended to incite or promote violence, abuse, or any infliction of bodily harm to an individual
 
 3. Intentionally deceive or mislead others, including use of Meta Llama 3 related to the following:
-   a. Generating, promoting, or furthering fraud or the creation or promotion of disinformation
-   b. Generating, promoting, or furthering defamatory content, including the creation of defamatory statements, images, or other content
-   c. Generating, promoting, or further distributing spam
-   d. Impersonating another individual without consent, authorization, or legal right
-   e. Representing that the use of Meta Llama 3 or outputs are human-generated
-   f. Generating or facilitating false online engagement, including fake reviews and other means of fake online engagement 
-   g. Fail to appropriately disclose to end users any known dangers of your AI system 
+   	a. Generating, promoting, or furthering fraud or the creation or promotion of disinformation
+   	b. Generating, promoting, or furthering defamatory content, including the creation of defamatory statements, images, or other content
+   	c. Generating, promoting, or further distributing spam
+   	d. Impersonating another individual without consent, authorization, or legal right
+   	e. Representing that the use of Meta Llama 3 or outputs are human-generated
+   	f. Generating or facilitating false online engagement, including fake reviews and other means of fake online engagement 
+   	g. Fail to appropriately disclose to end users any known dangers of your AI system 
 
 Please report any violation of this Policy, software “bug,” or other problems that could lead to a violation of this Policy through one of the following means:
-   * Reporting issues with the model: https://github.com/meta-llama/llama3
-   * Reporting risky content generated by the model: developers.facebook.com/llama_output_feedback
-   * Reporting bugs and security concerns: facebook.com/whitehat/info
-   * Reporting violations of the Acceptable Use Policy or unlicensed uses of Meta Llama 3: LlamaUseReport@meta.com
+   	* Reporting issues with the model: https://github.com/meta-llama/llama3
+   	* Reporting risky content generated by the model: developers.facebook.com/llama_output_feedback
+   	* Reporting bugs and security concerns: facebook.com/whitehat/info
+   	* Reporting violations of the Acceptable Use Policy or unlicensed uses of Meta Llama 3: LlamaUseReport@meta.com",No
README.md,README.md,9eaf99d7da92b93e204fe79b70497f4b5610f813,dab0ae890fd0316369b89901b199355034bbe1b5,Removing instances of llama2 7b model in examples,"diff --git a/README.md b/README.md
index 784099a..c997433 100644
--- a/README.md
+++ b/README.md
@@ -67,7 +67,7 @@ All models support sequence length up to 8192 tokens, but we pre-allocate the ca
 
 These models are not finetuned for chat or Q&A. They should be prompted so that the expected answer is the natural continuation of the prompt.
 
-See `example_text_completion.py` for some examples. To illustrate, see the command below to run it with the llama-2-7b model (`nproc_per_node` needs to be set to the `MP` value):
+See `example_text_completion.py` for some examples. To illustrate, see the command below to run it with the llama-3-8b model (`nproc_per_node` needs to be set to the `MP` value):
 
 ```
 torchrun --nproc_per_node 1 example_text_completion.py \
@@ -83,7 +83,7 @@ needs to be followed, including the `INST` and `<<SYS>>` tags, `BOS` and `EOS` t
 
 You can also deploy additional classifiers for filtering out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/facebookresearch/llama-recipes/blob/main/examples/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
 
-Examples using llama-2-7b-chat:
+Examples using llama-3-8b-chat:
 
 ```
 torchrun --nproc_per_node 1 example_chat_completion.py \","diff --git a/README.md b/README.md
index 784099a..c997433 100644
--- a/README.md
+++ b/README.md
@@ -67,7 +67,7 @@ All models support sequence length up to 8192 tokens, but we pre-allocate the ca
 
 These models are not finetuned for chat or Q&A. They should be prompted so that the expected answer is the natural continuation of the prompt.
 
-See `example_text_completion.py` for some examples. To illustrate, see the command below to run it with the llama-2-7b model (`nproc_per_node` needs to be set to the `MP` value):
+See `example_text_completion.py` for some examples. To illustrate, see the command below to run it with the llama-3-8b model (`nproc_per_node` needs to be set to the `MP` value):
 
 ```
 torchrun --nproc_per_node 1 example_text_completion.py \
@@ -83,7 +83,7 @@ needs to be followed, including the `INST` and `<<SYS>>` tags, `BOS` and `EOS` t
 
 You can also deploy additional classifiers for filtering out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/facebookresearch/llama-recipes/blob/main/examples/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
 
-Examples using llama-2-7b-chat:
+Examples using llama-3-8b-chat:
 
 ```
 torchrun --nproc_per_node 1 example_chat_completion.py \",No
eval_methodology.md,eval_methodology.md,fe39b65db88519158e67223d900da322a0ff5be8,ef3059172521a8742a8a445e8c95712d3241fd5e,Update eval_methodology.md,"diff --git a/eval_methodology.md b/eval_methodology.md
index 1333ed7..a0e37de 100644
--- a/eval_methodology.md
+++ b/eval_methodology.md
@@ -1 +1,3 @@
 TODO
+
+- ","diff --git a/eval_methodology.md b/eval_methodology.md
index 1333ed7..a0e37de 100644
--- a/eval_methodology.md
+++ b/eval_methodology.md
@@ -1 +1,3 @@
 TODO
+
+- ",No
eval_methodology.md,eval_methodology.md,81e60c92220e94be5b725ce7e72faf74de579189,fe39b65db88519158e67223d900da322a0ff5be8,"Update eval_methodology.md

Adding details of eval parameters.","diff --git a/eval_methodology.md b/eval_methodology.md
index a0e37de..d910fc8 100644
--- a/eval_methodology.md
+++ b/eval_methodology.md
@@ -1,3 +1,34 @@
-TODO
+### Llama 3 Evaluation Details
+This document contains additional context on the settings and methodology for how we evaluated the Llama 3 8 and 70B Pre-trained and Instruct-aligned models.
 
-- 
+#### MMLU
+- We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 7B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
+- For the instruct-aligned MMLU we ask the model to generate the best choice character
+#### AGI English
+- We use the default few-shot and prompt settings as specified here. The score is averaged over the english subtasks.
+#### CommonSenseQA
+- We use the same 7-shot chain-of-thought prompt as in Wei et al. (2022).
+#### Winogrande
+- We use a choice based setup for evaluation where we fill in the missing blank with the two possible choices and then compute log-likelihood over the suffix. We use 5 shots for evaluation.
+#### BIG-Bench Hard
+- We use a 3-shot chain of thought style prompting and compute the average exact match over the subsets in this task.
+#### ARC-Challenge
+- We use the arc-challenge subset from the arc benchmark. We use 25 shots and use the MMLU setup for evaluation where we provide all the choices in the prompt and calculate likelihood over choice characters
+#### TriviaQA-WIKI
+- We evaluate on the Wiki validation set and use 5 few-shot examples.
+#### SQuAD
+- We are using SQuAD v2 and compute exact match in a 1-shot setting.
+#### QuAC
+- Same setting as Llama 2 (1-shot, f1).
+#### BoolQ
+- Same setting as Llama 1 and Llama 2 (0-shot, accuracy).
+#### DROP
+- For each validation example, we draw 3 random few-shot examples from the train split.
+#### GPQA
+- We report 0-shot exact match scores over the possible options using the Main subset for our models and other open-source models (Mistral, Gemma).
+#### HumanEval
+- Same setting as Llama 1 and Llama 2 (pass@1).
+#### GSM8K
+- We use the same 8-shot chain-of-thought prompt as in Wei et al. (2022) (maj@1).
+#### MATH
+- We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).","diff --git a/eval_methodology.md b/eval_methodology.md
index a0e37de..d910fc8 100644
--- a/eval_methodology.md
+++ b/eval_methodology.md
@@ -1,3 +1,34 @@
-TODO
+### Llama 3 Evaluation Details
+This document contains additional context on the settings and methodology for how we evaluated the Llama 3 8 and 70B Pre-trained and Instruct-aligned models.
 
-- 
+#### MMLU
+- We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 7B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
+- For the instruct-aligned MMLU we ask the model to generate the best choice character
+#### AGI English
+- We use the default few-shot and prompt settings as specified here. The score is averaged over the english subtasks.
+#### CommonSenseQA
+- We use the same 7-shot chain-of-thought prompt as in Wei et al. (2022).
+#### Winogrande
+- We use a choice based setup for evaluation where we fill in the missing blank with the two possible choices and then compute log-likelihood over the suffix. We use 5 shots for evaluation.
+#### BIG-Bench Hard
+- We use a 3-shot chain of thought style prompting and compute the average exact match over the subsets in this task.
+#### ARC-Challenge
+- We use the arc-challenge subset from the arc benchmark. We use 25 shots and use the MMLU setup for evaluation where we provide all the choices in the prompt and calculate likelihood over choice characters
+#### TriviaQA-WIKI
+- We evaluate on the Wiki validation set and use 5 few-shot examples.
+#### SQuAD
+- We are using SQuAD v2 and compute exact match in a 1-shot setting.
+#### QuAC
+- Same setting as Llama 2 (1-shot, f1).
+#### BoolQ
+- Same setting as Llama 1 and Llama 2 (0-shot, accuracy).
+#### DROP
+- For each validation example, we draw 3 random few-shot examples from the train split.
+#### GPQA
+- We report 0-shot exact match scores over the possible options using the Main subset for our models and other open-source models (Mistral, Gemma).
+#### HumanEval
+- Same setting as Llama 1 and Llama 2 (pass@1).
+#### GSM8K
+- We use the same 8-shot chain-of-thought prompt as in Wei et al. (2022) (maj@1).
+#### MATH
+- We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).",No
eval_methodology.md,eval_methodology.md,f0a6fec3e326d8a0e1f35a45b1c1f2601b2b33ec,81e60c92220e94be5b725ce7e72faf74de579189,"Update eval_methodology.md

typo","diff --git a/eval_methodology.md b/eval_methodology.md
index d910fc8..843c221 100644
--- a/eval_methodology.md
+++ b/eval_methodology.md
@@ -2,7 +2,7 @@
 This document contains additional context on the settings and methodology for how we evaluated the Llama 3 8 and 70B Pre-trained and Instruct-aligned models.
 
 #### MMLU
-- We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 7B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
+- We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
 - For the instruct-aligned MMLU we ask the model to generate the best choice character
 #### AGI English
 - We use the default few-shot and prompt settings as specified here. The score is averaged over the english subtasks.","diff --git a/eval_methodology.md b/eval_methodology.md
index d910fc8..843c221 100644
--- a/eval_methodology.md
+++ b/eval_methodology.md
@@ -2,7 +2,7 @@
 This document contains additional context on the settings and methodology for how we evaluated the Llama 3 8 and 70B Pre-trained and Instruct-aligned models.
 
 #### MMLU
-- We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 7B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
+- We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
 - For the instruct-aligned MMLU we ask the model to generate the best choice character
 #### AGI English
 - We use the default few-shot and prompt settings as specified here. The score is averaged over the english subtasks.",No
eval_methodology.md,eval_methodology.md,9c6113b4e0de8803afcc2ce6944cf82d155c2644,f0a6fec3e326d8a0e1f35a45b1c1f2601b2b33ec,"Update eval_methodology.md

Minor update","diff --git a/eval_methodology.md b/eval_methodology.md
index 843c221..be41b3d 100644
--- a/eval_methodology.md
+++ b/eval_methodology.md
@@ -1,5 +1,5 @@
 ### Llama 3 Evaluation Details
-This document contains additional context on the settings and methodology for how we evaluated the Llama 3 8 and 70B Pre-trained and Instruct-aligned models.
+This document contains additional context on the settings and parameters for how we evaluated the Llama 3 8B and 70B pre-trained and instruct-aligned models.
 
 #### MMLU
 - We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models","diff --git a/eval_methodology.md b/eval_methodology.md
index 843c221..be41b3d 100644
--- a/eval_methodology.md
+++ b/eval_methodology.md
@@ -1,5 +1,5 @@
 ### Llama 3 Evaluation Details
-This document contains additional context on the settings and methodology for how we evaluated the Llama 3 8 and 70B Pre-trained and Instruct-aligned models.
+This document contains additional context on the settings and parameters for how we evaluated the Llama 3 8B and 70B pre-trained and instruct-aligned models.
 
 #### MMLU
 - We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models",No
Llama3_Repo.jpeg,Llama3_Repo.jpeg,88720e2135c832b8dbf465f5aba459eb22199095,9c6113b4e0de8803afcc2ce6944cf82d155c2644,Add files via upload,"diff --git a/Llama3_Repo.jpeg b/Llama3_Repo.jpeg
new file mode 100644
index 0000000..1d2d1a6
Binary files /dev/null and b/Llama3_Repo.jpeg differ","diff --git a/Llama3_Repo.jpeg b/Llama3_Repo.jpeg
new file mode 100644
index 0000000..1d2d1a6
Binary files /dev/null and b/Llama3_Repo.jpeg differ",No
README.md,README.md,4e52925f86582890530602b6065c5ae866b92482,88720e2135c832b8dbf465f5aba459eb22199095,Update README.md,"diff --git a/README.md b/README.md
index c997433..0b174a2 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,14 @@
+<p align=""center"">
+  <img src=""https://github.com/meta-llama/llama/blob/main/Llama3_Repo.jpeg"" width=""400""/>
+</p>
+
+<p align=""center"">
+        🤗 <a href=""https://huggingface.co/meta-Llama""> Models on Hugging Face</a>&nbsp | <a href=""https://ai.meta.com/blog/""> Blog</a>&nbsp |  <a href=""https://llama.meta.com/"">Website</a>&nbsp
+<br>
+
+---
+
+
 # Meta Llama 3
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.","diff --git a/README.md b/README.md
index c997433..0b174a2 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,14 @@
+<p align=""center"">
+  <img src=""https://github.com/meta-llama/llama/blob/main/Llama3_Repo.jpeg"" width=""400""/>
+</p>
+
+<p align=""center"">
+        🤗 <a href=""https://huggingface.co/meta-Llama""> Models on Hugging Face</a>&nbsp | <a href=""https://ai.meta.com/blog/""> Blog</a>&nbsp |  <a href=""https://llama.meta.com/"">Website</a>&nbsp
+<br>
+
+---
+
+
 # Meta Llama 3
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.",No
README.md,README.md,b16c9c161149c4360541d06f3ffb2995a7560467,4e52925f86582890530602b6065c5ae866b92482,Update README.md,"diff --git a/README.md b/README.md
index 0b174a2..bb9450b 100644
--- a/README.md
+++ b/README.md
@@ -1,9 +1,9 @@
 <p align=""center"">
-  <img src=""https://github.com/meta-llama/llama/blob/main/Llama3_Repo.jpeg"" width=""400""/>
+  <img src=""https://github.com/meta-llama/llama3/blob/main/Llama3_Repo.jpeg"" width=""400""/>
 </p>
 
 <p align=""center"">
-        🤗 <a href=""https://huggingface.co/meta-Llama""> Models on Hugging Face</a>&nbsp | <a href=""https://ai.meta.com/blog/""> Blog</a>&nbsp |  <a href=""https://llama.meta.com/"">Website</a>&nbsp
+        🤗 <a href=""https://huggingface.co/meta-Llama""> Models on Hugging Face</a>&nbsp | <a href=""https://ai.meta.com/blog/""> Blog</a>&nbsp |  <a href=""https://llama.meta.com/"">Website</a>&nbsp | <a href=""https://llama.meta.com/get-started/"">Get Started</a>&nbsp
 <br>
 
 ---","diff --git a/README.md b/README.md
index 0b174a2..bb9450b 100644
--- a/README.md
+++ b/README.md
@@ -1,9 +1,9 @@
 <p align=""center"">
-  <img src=""https://github.com/meta-llama/llama/blob/main/Llama3_Repo.jpeg"" width=""400""/>
+  <img src=""https://github.com/meta-llama/llama3/blob/main/Llama3_Repo.jpeg"" width=""400""/>
 </p>
 
 <p align=""center"">
-        🤗 <a href=""https://huggingface.co/meta-Llama""> Models on Hugging Face</a>&nbsp | <a href=""https://ai.meta.com/blog/""> Blog</a>&nbsp |  <a href=""https://llama.meta.com/"">Website</a>&nbsp
+        🤗 <a href=""https://huggingface.co/meta-Llama""> Models on Hugging Face</a>&nbsp | <a href=""https://ai.meta.com/blog/""> Blog</a>&nbsp |  <a href=""https://llama.meta.com/"">Website</a>&nbsp | <a href=""https://llama.meta.com/get-started/"">Get Started</a>&nbsp
 <br>
 
 ---",No
README.md,README.md,4dc8b52e118ca8866501cf6a1e043fb735648130,b16c9c161149c4360541d06f3ffb2995a7560467,Update examples to point to downloaded folder names,"diff --git a/README.md b/README.md
index bb9450b..d4040b4 100644
--- a/README.md
+++ b/README.md
@@ -53,12 +53,12 @@ You can follow the steps below to quickly get up and running with Llama 3 models
 6. Once the model/s you want have been downloaded, you can run the model locally using the command below:
 ```bash
 torchrun --nproc_per_node 1 example_chat_completion.py \
-    --ckpt_dir llama-3-8b-prerelease-instruct/ \
+    --ckpt_dir 8b_instruction_tuned/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 512 --max_batch_size 6
 ```
 **Note**
-- Replace  `llama-3-8b-prerelease-instruct/` with the path to your checkpoint directory and `tokenizer.model` with the path to your tokenizer model.
+- Replace  `8b_instruction_tuned/` with the path to your checkpoint directory and `tokenizer.model` with the path to your tokenizer model.
 - The `–nproc_per_node` should be set to the [MP](#inference) value for the model you are using.
 - Adjust the `max_seq_len` and `max_batch_size` parameters as needed.
 - This example runs the [example_chat_completion.py](example_chat_completion.py) found in this repository but you can change that to a different .py file.
@@ -82,7 +82,7 @@ See `example_text_completion.py` for some examples. To illustrate, see the comma
 
 ```
 torchrun --nproc_per_node 1 example_text_completion.py \
-    --ckpt_dir llama-3-8b-prerelease/ \
+    --ckpt_dir 8b_pre_trained/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 128 --max_batch_size 4
 ```","diff --git a/README.md b/README.md
index bb9450b..d4040b4 100644
--- a/README.md
+++ b/README.md
@@ -53,12 +53,12 @@ You can follow the steps below to quickly get up and running with Llama 3 models
 6. Once the model/s you want have been downloaded, you can run the model locally using the command below:
 ```bash
 torchrun --nproc_per_node 1 example_chat_completion.py \
-    --ckpt_dir llama-3-8b-prerelease-instruct/ \
+    --ckpt_dir 8b_instruction_tuned/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 512 --max_batch_size 6
 ```
 **Note**
-- Replace  `llama-3-8b-prerelease-instruct/` with the path to your checkpoint directory and `tokenizer.model` with the path to your tokenizer model.
+- Replace  `8b_instruction_tuned/` with the path to your checkpoint directory and `tokenizer.model` with the path to your tokenizer model.
 - The `–nproc_per_node` should be set to the [MP](#inference) value for the model you are using.
 - Adjust the `max_seq_len` and `max_batch_size` parameters as needed.
 - This example runs the [example_chat_completion.py](example_chat_completion.py) found in this repository but you can change that to a different .py file.
@@ -82,7 +82,7 @@ See `example_text_completion.py` for some examples. To illustrate, see the comma
 
 ```
 torchrun --nproc_per_node 1 example_text_completion.py \
-    --ckpt_dir llama-3-8b-prerelease/ \
+    --ckpt_dir 8b_pre_trained/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 128 --max_batch_size 4
 ```",No
eval_methodology.md,eval_details.md,4b48ffc371d497c5b732fae69ff5c59904382326,b16c9c161149c4360541d06f3ffb2995a7560467,Rename eval_methodology.md to eval_details.md,"diff --git a/eval_details.md b/eval_details.md
new file mode 100644
index 0000000..be41b3d
--- /dev/null
+++ b/eval_details.md
@@ -0,0 +1,34 @@
+### Llama 3 Evaluation Details
+This document contains additional context on the settings and parameters for how we evaluated the Llama 3 8B and 70B pre-trained and instruct-aligned models.
+
+#### MMLU
+- We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
+- For the instruct-aligned MMLU we ask the model to generate the best choice character
+#### AGI English
+- We use the default few-shot and prompt settings as specified here. The score is averaged over the english subtasks.
+#### CommonSenseQA
+- We use the same 7-shot chain-of-thought prompt as in Wei et al. (2022).
+#### Winogrande
+- We use a choice based setup for evaluation where we fill in the missing blank with the two possible choices and then compute log-likelihood over the suffix. We use 5 shots for evaluation.
+#### BIG-Bench Hard
+- We use a 3-shot chain of thought style prompting and compute the average exact match over the subsets in this task.
+#### ARC-Challenge
+- We use the arc-challenge subset from the arc benchmark. We use 25 shots and use the MMLU setup for evaluation where we provide all the choices in the prompt and calculate likelihood over choice characters
+#### TriviaQA-WIKI
+- We evaluate on the Wiki validation set and use 5 few-shot examples.
+#### SQuAD
+- We are using SQuAD v2 and compute exact match in a 1-shot setting.
+#### QuAC
+- Same setting as Llama 2 (1-shot, f1).
+#### BoolQ
+- Same setting as Llama 1 and Llama 2 (0-shot, accuracy).
+#### DROP
+- For each validation example, we draw 3 random few-shot examples from the train split.
+#### GPQA
+- We report 0-shot exact match scores over the possible options using the Main subset for our models and other open-source models (Mistral, Gemma).
+#### HumanEval
+- Same setting as Llama 1 and Llama 2 (pass@1).
+#### GSM8K
+- We use the same 8-shot chain-of-thought prompt as in Wei et al. (2022) (maj@1).
+#### MATH
+- We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).","diff --git a/eval_details.md b/eval_details.md
new file mode 100644
index 0000000..be41b3d
--- /dev/null
+++ b/eval_details.md
@@ -0,0 +1,34 @@
+### Llama 3 Evaluation Details
+This document contains additional context on the settings and parameters for how we evaluated the Llama 3 8B and 70B pre-trained and instruct-aligned models.
+
+#### MMLU
+- We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
+- For the instruct-aligned MMLU we ask the model to generate the best choice character
+#### AGI English
+- We use the default few-shot and prompt settings as specified here. The score is averaged over the english subtasks.
+#### CommonSenseQA
+- We use the same 7-shot chain-of-thought prompt as in Wei et al. (2022).
+#### Winogrande
+- We use a choice based setup for evaluation where we fill in the missing blank with the two possible choices and then compute log-likelihood over the suffix. We use 5 shots for evaluation.
+#### BIG-Bench Hard
+- We use a 3-shot chain of thought style prompting and compute the average exact match over the subsets in this task.
+#### ARC-Challenge
+- We use the arc-challenge subset from the arc benchmark. We use 25 shots and use the MMLU setup for evaluation where we provide all the choices in the prompt and calculate likelihood over choice characters
+#### TriviaQA-WIKI
+- We evaluate on the Wiki validation set and use 5 few-shot examples.
+#### SQuAD
+- We are using SQuAD v2 and compute exact match in a 1-shot setting.
+#### QuAC
+- Same setting as Llama 2 (1-shot, f1).
+#### BoolQ
+- Same setting as Llama 1 and Llama 2 (0-shot, accuracy).
+#### DROP
+- For each validation example, we draw 3 random few-shot examples from the train split.
+#### GPQA
+- We report 0-shot exact match scores over the possible options using the Main subset for our models and other open-source models (Mistral, Gemma).
+#### HumanEval
+- Same setting as Llama 1 and Llama 2 (pass@1).
+#### GSM8K
+- We use the same 8-shot chain-of-thought prompt as in Wei et al. (2022) (maj@1).
+#### MATH
+- We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).",No
eval_details.md,eval_details.md,a41edb73ea698e405e145adf836ac694fdc45a49,4b48ffc371d497c5b732fae69ff5c59904382326,Adding human eval details,"diff --git a/eval_details.md b/eval_details.md
index be41b3d..d897d98 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -1,6 +1,6 @@
 ### Llama 3 Evaluation Details
-This document contains additional context on the settings and parameters for how we evaluated the Llama 3 8B and 70B pre-trained and instruct-aligned models.
-
+This document contains additional context on the settings and parameters for how we evaluated the Llama 3 pre-trained and instruct-aligned models.
+### Auto-eval benchmark notes
 #### MMLU
 - We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
 - For the instruct-aligned MMLU we ask the model to generate the best choice character
@@ -32,3 +32,19 @@ This document contains additional context on the settings and parameters for how
 - We use the same 8-shot chain-of-thought prompt as in Wei et al. (2022) (maj@1).
 #### MATH
 - We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).
+### Human evaluation notes
+This evaluation set contains 1,800 prompts that cover 12 key use cases: asking for advice, brainstorming, classification, closed question answering, coding, creative writing, extraction, inhabiting a character/persona, open question answering, reasoning, rewriting, and summarization.
+|Capability|Category|Count|
+|----------|--------|-----|
+|Coding|Coding|150|
+|Reasoning|Mathematical reasoning|150|
+|English|Asking for Advice|150|
+|English|Brainstorming|150|
+|English|Classification|150|
+|English|Closed Question Answering|150|
+|English|Creative Writing|150|
+|English|Extraction|150|
+|English|Inhabiting a Character/Persona|150|
+|English|Open Question Answering|150|
+|English|Rewriting|150|
+|English|Summarization|150|","diff --git a/eval_details.md b/eval_details.md
index be41b3d..d897d98 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -1,6 +1,6 @@
 ### Llama 3 Evaluation Details
-This document contains additional context on the settings and parameters for how we evaluated the Llama 3 8B and 70B pre-trained and instruct-aligned models.
-
+This document contains additional context on the settings and parameters for how we evaluated the Llama 3 pre-trained and instruct-aligned models.
+### Auto-eval benchmark notes
 #### MMLU
 - We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
 - For the instruct-aligned MMLU we ask the model to generate the best choice character
@@ -32,3 +32,19 @@ This document contains additional context on the settings and parameters for how
 - We use the same 8-shot chain-of-thought prompt as in Wei et al. (2022) (maj@1).
 #### MATH
 - We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).
+### Human evaluation notes
+This evaluation set contains 1,800 prompts that cover 12 key use cases: asking for advice, brainstorming, classification, closed question answering, coding, creative writing, extraction, inhabiting a character/persona, open question answering, reasoning, rewriting, and summarization.
+|Capability|Category|Count|
+|----------|--------|-----|
+|Coding|Coding|150|
+|Reasoning|Mathematical reasoning|150|
+|English|Asking for Advice|150|
+|English|Brainstorming|150|
+|English|Classification|150|
+|English|Closed Question Answering|150|
+|English|Creative Writing|150|
+|English|Extraction|150|
+|English|Inhabiting a Character/Persona|150|
+|English|Open Question Answering|150|
+|English|Rewriting|150|
+|English|Summarization|150|",No
README.md,README.md,8fb389519a8c0f3cbb8858086e049418567c28f1,4dc8b52e118ca8866501cf6a1e043fb735648130,update in the instruction tuned model example,"diff --git a/README.md b/README.md
index d4040b4..2e1fb3f 100644
--- a/README.md
+++ b/README.md
@@ -98,7 +98,7 @@ Examples using llama-3-8b-chat:
 
 ```
 torchrun --nproc_per_node 1 example_chat_completion.py \
-    --ckpt_dir llama-3-8b-prerelease-instruct/ \
+    --ckpt_dir 8b_instruction_tuned/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 512 --max_batch_size 6
 ```","diff --git a/README.md b/README.md
index d4040b4..2e1fb3f 100644
--- a/README.md
+++ b/README.md
@@ -98,7 +98,7 @@ Examples using llama-3-8b-chat:
 
 ```
 torchrun --nproc_per_node 1 example_chat_completion.py \
-    --ckpt_dir llama-3-8b-prerelease-instruct/ \
+    --ckpt_dir 8b_instruction_tuned/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 512 --max_batch_size 6
 ```",No
download.sh,download.sh,8d5d2931be6ec573300bef100dfb1e2960e4fc46,14fdf1332d25b07844a1e6c3dbfa652a4b267229,update the weight folder name,"diff --git a/download.sh b/download.sh
index dfd1516..05303d7 100644
--- a/download.sh
+++ b/download.sh
@@ -23,33 +23,37 @@ for m in ${MODEL_SIZE//,/ }
 do
     if [[ $m == ""8B"" ]] || [[ $m == ""8b"" ]]; then
         SHARD=0
+        MODEL_FOLDER_PATH=""Meta-Llama-3-8B""
         MODEL_PATH=""8b_pre_trained""
-    elif [[ $m == ""8B-instruct"" ]] || [[ $m == ""8b-instruct"" ]]; then
+    elif [[ $m == ""8B-instruct"" ]] || [[ $m == ""8b-instruct"" ]] || [[ $m == ""8b-Instruct"" ]] || [[ $m == ""8B-Instruct"" ]]; then
         SHARD=0
+        MODEL_FOLDER_PATH=""Meta-Llama-3-8B-Instruct""
         MODEL_PATH=""8b_instruction_tuned""
     elif [[ $m == ""70B"" ]] || [[ $m == ""70b"" ]]; then
         SHARD=7
+        MODEL_FOLDER_PATH=""Meta-Llama-3-70B""
         MODEL_PATH=""70b_pre_trained""
-    elif [[ $m == ""70B-instruct"" ]] || [[ $m == ""70b-instruct"" ]]; then
+    elif [[ $m == ""70B-instruct"" ]] || [[ $m == ""70b-instruct"" ]] || [[ $m == ""70b-Instruct"" ]] || [[ $m == ""70B-Instruct"" ]]; then
         SHARD=7
+        MODEL_FOLDER_PATH=""Meta-Llama-3-70B-Instruct""
         MODEL_PATH=""70b_instruction_tuned""
     fi
 
     echo ""Downloading ${MODEL_PATH}""
-    mkdir -p ${TARGET_FOLDER}""/${MODEL_PATH}""
+    mkdir -p ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}""
 
     for s in $(seq -f ""0%g"" 0 ${SHARD})
     do
-        wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/consolidated.${s}.pth""} -O ${TARGET_FOLDER}""/${MODEL_PATH}/consolidated.${s}.pth""
+        wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/consolidated.${s}.pth""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/consolidated.${s}.pth""
     done
 
-    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/params.json""} -O ${TARGET_FOLDER}""/${MODEL_PATH}/params.json""
-    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/tokenizer.model""} -O ${TARGET_FOLDER}""/${MODEL_PATH}/tokenizer.model""
-    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/checklist.chk""} -O ${TARGET_FOLDER}""/${MODEL_PATH}/checklist.chk""
+    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/params.json""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/params.json""
+    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/tokenizer.model""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/tokenizer.model""
+    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/checklist.chk""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/checklist.chk""
     echo ""Checking checksums""
     if [ ""$CPU_ARCH"" = ""arm64"" ]; then
-      (cd ${TARGET_FOLDER}""/${MODEL_PATH}"" && md5 checklist.chk)
+      (cd ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}"" && md5 checklist.chk)
     else
-      (cd ${TARGET_FOLDER}""/${MODEL_PATH}"" && md5sum -c checklist.chk)
+      (cd ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}"" && md5sum -c checklist.chk)
     fi
 done","diff --git a/download.sh b/download.sh
index dfd1516..05303d7 100644
--- a/download.sh
+++ b/download.sh
@@ -23,33 +23,37 @@ for m in ${MODEL_SIZE//,/ }
 do
     if [[ $m == ""8B"" ]] || [[ $m == ""8b"" ]]; then
         SHARD=0
+        MODEL_FOLDER_PATH=""Meta-Llama-3-8B""
         MODEL_PATH=""8b_pre_trained""
-    elif [[ $m == ""8B-instruct"" ]] || [[ $m == ""8b-instruct"" ]]; then
+    elif [[ $m == ""8B-instruct"" ]] || [[ $m == ""8b-instruct"" ]] || [[ $m == ""8b-Instruct"" ]] || [[ $m == ""8B-Instruct"" ]]; then
         SHARD=0
+        MODEL_FOLDER_PATH=""Meta-Llama-3-8B-Instruct""
         MODEL_PATH=""8b_instruction_tuned""
     elif [[ $m == ""70B"" ]] || [[ $m == ""70b"" ]]; then
         SHARD=7
+        MODEL_FOLDER_PATH=""Meta-Llama-3-70B""
         MODEL_PATH=""70b_pre_trained""
-    elif [[ $m == ""70B-instruct"" ]] || [[ $m == ""70b-instruct"" ]]; then
+    elif [[ $m == ""70B-instruct"" ]] || [[ $m == ""70b-instruct"" ]] || [[ $m == ""70b-Instruct"" ]] || [[ $m == ""70B-Instruct"" ]]; then
         SHARD=7
+        MODEL_FOLDER_PATH=""Meta-Llama-3-70B-Instruct""
         MODEL_PATH=""70b_instruction_tuned""
     fi
 
     echo ""Downloading ${MODEL_PATH}""
-    mkdir -p ${TARGET_FOLDER}""/${MODEL_PATH}""
+    mkdir -p ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}""
 
     for s in $(seq -f ""0%g"" 0 ${SHARD})
     do
-        wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/consolidated.${s}.pth""} -O ${TARGET_FOLDER}""/${MODEL_PATH}/consolidated.${s}.pth""
+        wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/consolidated.${s}.pth""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/consolidated.${s}.pth""
     done
 
-    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/params.json""} -O ${TARGET_FOLDER}""/${MODEL_PATH}/params.json""
-    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/tokenizer.model""} -O ${TARGET_FOLDER}""/${MODEL_PATH}/tokenizer.model""
-    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/checklist.chk""} -O ${TARGET_FOLDER}""/${MODEL_PATH}/checklist.chk""
+    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/params.json""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/params.json""
+    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/tokenizer.model""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/tokenizer.model""
+    wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/checklist.chk""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/checklist.chk""
     echo ""Checking checksums""
     if [ ""$CPU_ARCH"" = ""arm64"" ]; then
-      (cd ${TARGET_FOLDER}""/${MODEL_PATH}"" && md5 checklist.chk)
+      (cd ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}"" && md5 checklist.chk)
     else
-      (cd ${TARGET_FOLDER}""/${MODEL_PATH}"" && md5sum -c checklist.chk)
+      (cd ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}"" && md5sum -c checklist.chk)
     fi
 done",No
README.md,README.md,c9791dabee134990e385c103c3e58d50a891e1f8,8d5d2931be6ec573300bef100dfb1e2960e4fc46,Update README.md,"diff --git a/README.md b/README.md
index c997433..59e142b 100644
--- a/README.md
+++ b/README.md
@@ -42,12 +42,12 @@ You can follow the steps below to quickly get up and running with Llama 3 models
 6. Once the model/s you want have been downloaded, you can run the model locally using the command below:
 ```bash
 torchrun --nproc_per_node 1 example_chat_completion.py \
-    --ckpt_dir llama-3-8b-prerelease-instruct/ \
+    --ckpt_dir Meta-Llama-3-8B-Instruct/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 512 --max_batch_size 6
 ```
 **Note**
-- Replace  `llama-3-8b-prerelease-instruct/` with the path to your checkpoint directory and `tokenizer.model` with the path to your tokenizer model.
+- Replace  `Meta-Llama-3-8B-Instruct/` with the path to your checkpoint directory and `tokenizer.model` with the path to your tokenizer model.
 - The `–nproc_per_node` should be set to the [MP](#inference) value for the model you are using.
 - Adjust the `max_seq_len` and `max_batch_size` parameters as needed.
 - This example runs the [example_chat_completion.py](example_chat_completion.py) found in this repository but you can change that to a different .py file.
@@ -71,7 +71,7 @@ See `example_text_completion.py` for some examples. To illustrate, see the comma
 
 ```
 torchrun --nproc_per_node 1 example_text_completion.py \
-    --ckpt_dir llama-3-8b-prerelease/ \
+    --ckpt_dir Meta-Llama-3-8B-Instruct/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 128 --max_batch_size 4
 ```
@@ -87,7 +87,7 @@ Examples using llama-3-8b-chat:
 
 ```
 torchrun --nproc_per_node 1 example_chat_completion.py \
-    --ckpt_dir llama-3-8b-prerelease-instruct/ \
+    --ckpt_dir Meta-Llama-3-8B-Instruct/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 512 --max_batch_size 6
 ```","diff --git a/README.md b/README.md
index c997433..59e142b 100644
--- a/README.md
+++ b/README.md
@@ -42,12 +42,12 @@ You can follow the steps below to quickly get up and running with Llama 3 models
 6. Once the model/s you want have been downloaded, you can run the model locally using the command below:
 ```bash
 torchrun --nproc_per_node 1 example_chat_completion.py \
-    --ckpt_dir llama-3-8b-prerelease-instruct/ \
+    --ckpt_dir Meta-Llama-3-8B-Instruct/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 512 --max_batch_size 6
 ```
 **Note**
-- Replace  `llama-3-8b-prerelease-instruct/` with the path to your checkpoint directory and `tokenizer.model` with the path to your tokenizer model.
+- Replace  `Meta-Llama-3-8B-Instruct/` with the path to your checkpoint directory and `tokenizer.model` with the path to your tokenizer model.
 - The `–nproc_per_node` should be set to the [MP](#inference) value for the model you are using.
 - Adjust the `max_seq_len` and `max_batch_size` parameters as needed.
 - This example runs the [example_chat_completion.py](example_chat_completion.py) found in this repository but you can change that to a different .py file.
@@ -71,7 +71,7 @@ See `example_text_completion.py` for some examples. To illustrate, see the comma
 
 ```
 torchrun --nproc_per_node 1 example_text_completion.py \
-    --ckpt_dir llama-3-8b-prerelease/ \
+    --ckpt_dir Meta-Llama-3-8B-Instruct/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 128 --max_batch_size 4
 ```
@@ -87,7 +87,7 @@ Examples using llama-3-8b-chat:
 
 ```
 torchrun --nproc_per_node 1 example_chat_completion.py \
-    --ckpt_dir llama-3-8b-prerelease-instruct/ \
+    --ckpt_dir Meta-Llama-3-8B-Instruct/ \
     --tokenizer_path tokenizer.model \
     --max_seq_len 512 --max_batch_size 6
 ```",No
eval_details.md,eval_details.md,4064872d283312b9f7594be7fc03f65346d6b911,b5c744feb7c2f20d67a6362141223024fb0adbd9,Remove capabilities column,"diff --git a/eval_details.md b/eval_details.md
index d897d98..e62665f 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -34,17 +34,17 @@ This document contains additional context on the settings and parameters for how
 - We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).
 ### Human evaluation notes
 This evaluation set contains 1,800 prompts that cover 12 key use cases: asking for advice, brainstorming, classification, closed question answering, coding, creative writing, extraction, inhabiting a character/persona, open question answering, reasoning, rewriting, and summarization.
-|Capability|Category|Count|
-|----------|--------|-----|
-|Coding|Coding|150|
-|Reasoning|Mathematical reasoning|150|
-|English|Asking for Advice|150|
-|English|Brainstorming|150|
-|English|Classification|150|
-|English|Closed Question Answering|150|
-|English|Creative Writing|150|
-|English|Extraction|150|
-|English|Inhabiting a Character/Persona|150|
-|English|Open Question Answering|150|
-|English|Rewriting|150|
-|English|Summarization|150|
+|Category|Count|
+|--------|-----|
+|Coding|150|
+|Mathematical reasoning|150|
+|Asking for Advice|150|
+|Brainstorming|150|
+|Classification|150|
+|Closed Question Answering|150|
+|Creative Writing|150|
+|Extraction|150|
+|Inhabiting a Character/Persona|150|
+|Open Question Answering|150|
+|Rewriting|150|
+|Summarization|150|","diff --git a/eval_details.md b/eval_details.md
index d897d98..e62665f 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -34,17 +34,17 @@ This document contains additional context on the settings and parameters for how
 - We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).
 ### Human evaluation notes
 This evaluation set contains 1,800 prompts that cover 12 key use cases: asking for advice, brainstorming, classification, closed question answering, coding, creative writing, extraction, inhabiting a character/persona, open question answering, reasoning, rewriting, and summarization.
-|Capability|Category|Count|
-|----------|--------|-----|
-|Coding|Coding|150|
-|Reasoning|Mathematical reasoning|150|
-|English|Asking for Advice|150|
-|English|Brainstorming|150|
-|English|Classification|150|
-|English|Closed Question Answering|150|
-|English|Creative Writing|150|
-|English|Extraction|150|
-|English|Inhabiting a Character/Persona|150|
-|English|Open Question Answering|150|
-|English|Rewriting|150|
-|English|Summarization|150|
+|Category|Count|
+|--------|-----|
+|Coding|150|
+|Mathematical reasoning|150|
+|Asking for Advice|150|
+|Brainstorming|150|
+|Classification|150|
+|Closed Question Answering|150|
+|Creative Writing|150|
+|Extraction|150|
+|Inhabiting a Character/Persona|150|
+|Open Question Answering|150|
+|Rewriting|150|
+|Summarization|150|",No
README.md,README.md,96dd0c445acbef75910b5b036c95139f84e56ca5,4064872d283312b9f7594be7fc03f65346d6b911,Instructions to download from Hugging Face,"diff --git a/README.md b/README.md
index 2e1fb3f..e8d00c3 100644
--- a/README.md
+++ b/README.md
@@ -29,7 +29,26 @@ Keep in mind that the links expire after 24 hours and a certain amount of downlo
 
 ### Access to Hugging Face
 
-We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama).
+We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
+
+- Visit one of the repos, for example [meta-llama/Llama-3-8b-instruct](https://huggingface.co/meta-llama/Llama-3-8b-instruct).
+- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models.
+- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder.
+- To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:
+
+  ```python
+  import transformers
+  import torch
+
+  model_id = ""meta-llama/Llama-3-8b-instruct""
+
+  pipeline = transformers.pipeline(
+    ""text-generation"",
+    model=""meta-llama/Llama-3-8b-instruct"",
+    model_kwargs={""torch_dtype"": torch.bfloat16},
+    device=""cuda"",
+  )
+  ```
 
 ## Quick Start
 ","diff --git a/README.md b/README.md
index 2e1fb3f..e8d00c3 100644
--- a/README.md
+++ b/README.md
@@ -29,7 +29,26 @@ Keep in mind that the links expire after 24 hours and a certain amount of downlo
 
 ### Access to Hugging Face
 
-We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama).
+We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
+
+- Visit one of the repos, for example [meta-llama/Llama-3-8b-instruct](https://huggingface.co/meta-llama/Llama-3-8b-instruct).
+- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models.
+- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder.
+- To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:
+
+  ```python
+  import transformers
+  import torch
+
+  model_id = ""meta-llama/Llama-3-8b-instruct""
+
+  pipeline = transformers.pipeline(
+    ""text-generation"",
+    model=""meta-llama/Llama-3-8b-instruct"",
+    model_kwargs={""torch_dtype"": torch.bfloat16},
+    device=""cuda"",
+  )
+  ```
 
 ## Quick Start
 ",No
README.md,README.md,92e2fa46a531d4d2c4038873b28d43938f30fa8c,96dd0c445acbef75910b5b036c95139f84e56ca5,"Update README.md

Co-authored-by: Omar Sanseviero <osanseviero@gmail.com>","diff --git a/README.md b/README.md
index e8d00c3..bf66256 100644
--- a/README.md
+++ b/README.md
@@ -32,7 +32,7 @@ Keep in mind that the links expire after 24 hours and a certain amount of downlo
 We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
 
 - Visit one of the repos, for example [meta-llama/Llama-3-8b-instruct](https://huggingface.co/meta-llama/Llama-3-8b-instruct).
-- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models.
+- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder.
 - To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:
 ","diff --git a/README.md b/README.md
index e8d00c3..bf66256 100644
--- a/README.md
+++ b/README.md
@@ -32,7 +32,7 @@ Keep in mind that the links expire after 24 hours and a certain amount of downlo
 We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
 
 - Visit one of the repos, for example [meta-llama/Llama-3-8b-instruct](https://huggingface.co/meta-llama/Llama-3-8b-instruct).
-- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models.
+- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder.
 - To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:
 ",No
README.md,README.md,ecd680f2c8f70f3b9e93f8c0d29fb5808f7da617,92e2fa46a531d4d2c4038873b28d43938f30fa8c,huggingface-cli download example,"diff --git a/README.md b/README.md
index bf66256..e3d9b01 100644
--- a/README.md
+++ b/README.md
@@ -33,7 +33,12 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 - Visit one of the repos, for example [meta-llama/Llama-3-8b-instruct](https://huggingface.co/meta-llama/Llama-3-8b-instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
-- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder.
+- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
+
+```bash
+huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Llama-3-8b-instruct
+```
+
 - To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:
 
   ```python","diff --git a/README.md b/README.md
index bf66256..e3d9b01 100644
--- a/README.md
+++ b/README.md
@@ -33,7 +33,12 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 - Visit one of the repos, for example [meta-llama/Llama-3-8b-instruct](https://huggingface.co/meta-llama/Llama-3-8b-instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
-- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder.
+- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
+
+```bash
+huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Llama-3-8b-instruct
+```
+
 - To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:
 
   ```python",No
MODEL_CARD.md,MODEL_CARD.md,b5f201e771dc9cb7603c4d068dbe28c0e9af76e4,4064872d283312b9f7594be7fc03f65346d6b911,Update MODEL_CARD.md,"diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 63380ff..43ace1b 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -1 +1,515 @@
-To be populated..
+## Model Details
+
+Meta developed and released the Meta Llama 3 family of large language models (LLMs), a collection of pretrained and instruction tuned generative text models in 8 and 70B sizes. The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of the available open source chat models on common industry benchmarks. Further, in developing these models, we took great care to optimize helpfulness and safety. 
+
+**Model developers** Meta
+
+**Variations** Llama 3 comes in two sizes — 8B and 70B parameters — in pre-trained and instruction tuned variants.
+
+**Input** Models input text only.
+
+**Output** Models generate text and code only.
+
+**Model Architecture** Llama 3 is an auto-regressive language model that uses an optimized transformer architecture. The tuned versions use supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety.
+
+
+<table>
+  <tr>
+   <td>
+   </td>
+   <td><strong>Training Data</strong>
+   </td>
+   <td><strong>Params</strong>
+   </td>
+   <td><strong>Context length</strong>
+   </td>
+   <td><strong>GQA</strong>
+   </td>
+   <td><strong>Token count</strong>
+   </td>
+   <td><strong>Knowledge cutoff</strong>
+   </td>
+  </tr>
+  <tr>
+   <td rowspan=""2"" >Llama 3
+   </td>
+   <td rowspan=""2"" >A new mix of publicly available online data.
+   </td>
+   <td>8B
+   </td>
+   <td>8k
+   </td>
+   <td>Yes
+   </td>
+   <td rowspan=""2"" >15T+
+   </td>
+   <td>March, 2023
+   </td>
+  </tr>
+  <tr>
+   <td>70B
+   </td>
+   <td>8k
+   </td>
+   <td>Yes
+   </td>
+   <td>December, 2023
+   </td>
+  </tr>
+</table>
+
+
+**Llama 3 family of models**. Token counts refer to pretraining data only. Both the 8 and 70B versions use Grouped-Query Attention (GQA) for improved inference scalability.
+
+**Model Release Date** April 18, 2024.
+
+**Status** This is a static model trained on an offline dataset. Future versions of the tuned models will be released as we improve model safety with community feedback.
+
+**License** A custom commercial license is available at: [https://llama.meta.com/llama3/license](https://llama.meta.com/llama3/license)
+
+Where to send questions or comments about the model Instructions on how to provide feedback or comments on the model can be found in the model [README](https://github.com/meta-llama/llama3). For more technical information about generation parameters and recipes for how to use Llama 3 in applications, please go [here](https://github.com/meta-llama/llama-recipes). 
+
+
+## Intended Use
+
+**Intended Use Cases** Llama 3 is intended for commercial and research use in English. Instruction tuned models are intended for assistant-like chat, whereas pretrained models can be adapted for a variety of natural language generation tasks.
+
+**Out-of-scope** Use in any manner that violates applicable laws or regulations (including trade compliance laws). Use in any other way that is prohibited by the Acceptable Use Policy and Llama 3 Community License. Use in languages other than English**.
+
+**Note: Developers may fine-tune Llama 3 models for languages beyond English provided they comply with the Llama 3 Community License and the Acceptable Use Policy.
+
+
+## Hardware and Software
+
+**Training Factors** We used custom training libraries, Meta's Research SuperCluster, and production clusters for pretraining. Fine-tuning, annotation, and evaluation were also performed on third-party cloud compute.
+
+**Carbon Footprint Pretraining utilized a cumulative** 7.7M GPU hours of computation on hardware of type H100-80GB (TDP of 700W). Estimated total emissions were 2290 tCO2eq, 100% of which were offset by Meta’s sustainability program.
+
+
+<table>
+  <tr>
+   <td>
+   </td>
+   <td><strong>Time (GPU hours)</strong>
+   </td>
+   <td><strong>Power Consumption (W)</strong>
+   </td>
+   <td><strong>Carbon Emitted(tCO2eq)</strong>
+   </td>
+  </tr>
+  <tr>
+   <td>Llama 3 8B
+   </td>
+   <td>1.3M
+   </td>
+   <td>700
+   </td>
+   <td>390
+   </td>
+  </tr>
+  <tr>
+   <td>Llama 3 70B
+   </td>
+   <td>6.4M
+   </td>
+   <td>700
+   </td>
+   <td>1900
+   </td>
+  </tr>
+  <tr>
+   <td>Total
+   </td>
+   <td>7.7M
+   </td>
+   <td>
+   </td>
+   <td>2290
+   </td>
+  </tr>
+</table>
+
+
+
+**CO2 emissions during pre-training**. Time: total GPU time required for training each model. Power Consumption: peak power capacity per GPU device for the GPUs used adjusted for power usage efficiency. 100% of the emissions are directly offset by Meta's sustainability program, and because we are openly releasing these models, the pretraining costs do not need to be incurred by others.
+
+
+## Training Data
+
+**Overview** Llama 3 was pretrained on over 15 trillion tokens of data from publicly available sources. The fine-tuning data includes publicly available instruction datasets, as well as over 10M human-annotated examples. Neither the pretraining nor the fine-tuning datasets include Meta user data.
+
+**Data Freshness** The pretraining data has a cutoff of March 2023 for the 7B and December 2023 for the 70B models respectively. 
+
+
+## Benchmarks 
+
+In this section, we report the results for Llama 3 models on standard automatic benchmarks. For all the evaluations, we use our internal evaluations library. For details on the methodology see [here](https://github.com/meta-llama/llama3/blob/main/eval_methodology.md).
+
+
+### Base pretrained models
+
+
+<table>
+  <tr>
+   <td><strong>Category</strong>
+   </td>
+   <td><strong>Benchmark</strong>
+   </td>
+   <td><strong>Llama 3 8B</strong>
+   </td>
+   <td><strong>Llama2 7B</strong>
+   </td>
+   <td><strong>Llama2 13B</strong>
+   </td>
+   <td><strong>Llama 3 70B</strong>
+   </td>
+   <td><strong>Llama2 70B</strong>
+   </td>
+  </tr>
+  <tr>
+   <td rowspan=""6"" >General
+   </td>
+   <td>MMLU (5-shot)
+   </td>
+   <td>66.6
+   </td>
+   <td>45.7
+   </td>
+   <td>53.8
+   </td>
+   <td>79.5
+   </td>
+   <td>69.7
+   </td>
+  </tr>
+  <tr>
+   <td>AGIEval English (3-5 shot)
+   </td>
+   <td>45.9
+   </td>
+   <td>28.8
+   </td>
+   <td>38.7
+   </td>
+   <td>63.0
+   </td>
+   <td>54.8
+   </td>
+  </tr>
+  <tr>
+   <td>CommonSenseQA (7-shot)
+   </td>
+   <td>72.6
+   </td>
+   <td>57.6
+   </td>
+   <td>67.6
+   </td>
+   <td>83.8
+   </td>
+   <td>78.7
+   </td>
+  </tr>
+  <tr>
+   <td>Winogrande (5-shot)
+   </td>
+   <td>76.1
+   </td>
+   <td>73.3
+   </td>
+   <td>75.4
+   </td>
+   <td>83.1
+   </td>
+   <td>81.8
+   </td>
+  </tr>
+  <tr>
+   <td>BIG-Bench Hard (3-shot, CoT)
+   </td>
+   <td>61.1
+   </td>
+   <td>38.1
+   </td>
+   <td>47.0
+   </td>
+   <td>81.3
+   </td>
+   <td>65.7
+   </td>
+  </tr>
+  <tr>
+   <td>ARC-Challenge (25-shot)
+   </td>
+   <td>78.6
+   </td>
+   <td>53.7
+   </td>
+   <td>67.6
+   </td>
+   <td>93.0
+   </td>
+   <td>85.3
+   </td>
+  </tr>
+  <tr>
+   <td>Knowledge reasoning
+   </td>
+   <td>TriviaQA-Wiki (5-shot)
+   </td>
+   <td>78.5
+   </td>
+   <td>72.1
+   </td>
+   <td>79.6
+   </td>
+   <td>89.7
+   </td>
+   <td>87.5
+   </td>
+  </tr>
+  <tr>
+   <td rowspan=""4"" >Reading comprehension
+   </td>
+   <td>SQuAD (1-shot)
+   </td>
+   <td>76.4
+   </td>
+   <td>72.2
+   </td>
+   <td>72.1
+   </td>
+   <td>85.6
+   </td>
+   <td>82.6
+   </td>
+  </tr>
+  <tr>
+   <td>QuAC (1-shot, F1)
+   </td>
+   <td>44.4
+   </td>
+   <td>39.6
+   </td>
+   <td>44.9
+   </td>
+   <td>51.1
+   </td>
+   <td>49.4
+   </td>
+  </tr>
+  <tr>
+   <td>BoolQ (0-shot)
+   </td>
+   <td>75.7
+   </td>
+   <td>65.5
+   </td>
+   <td>66.9
+   </td>
+   <td>79.0
+   </td>
+   <td>73.1
+   </td>
+  </tr>
+  <tr>
+   <td>DROP (3-shot, F1)
+   </td>
+   <td>58.4
+   </td>
+   <td>37.9
+   </td>
+   <td>49.8
+   </td>
+   <td>79.7
+   </td>
+   <td>70.2
+   </td>
+  </tr>
+</table>
+
+
+
+### Instruction tuned models
+
+
+<table>
+  <tr>
+   <td><strong>Benchmark</strong>
+   </td>
+   <td><strong>Llama 3 8B</strong>
+   </td>
+   <td><strong>Llama 2 7B</strong>
+   </td>
+   <td><strong>Llama 2 13B</strong>
+   </td>
+   <td><strong>Llama 3 70B</strong>
+   </td>
+   <td><strong>Llama 2 70B</strong>
+   </td>
+  </tr>
+  <tr>
+   <td>MMLU (5-shot)
+   </td>
+   <td>68.4
+   </td>
+   <td>34.1
+   </td>
+   <td>47.8
+   </td>
+   <td>82.0
+   </td>
+   <td>52.9
+   </td>
+  </tr>
+  <tr>
+   <td>GPQA (0-shot)
+   </td>
+   <td>34.2
+   </td>
+   <td>21.7
+   </td>
+   <td>22.3
+   </td>
+   <td>39.5
+   </td>
+   <td>21.0
+   </td>
+  </tr>
+  <tr>
+   <td>HumanEval (0-shot)
+   </td>
+   <td>62.2
+   </td>
+   <td>7.9
+   </td>
+   <td>14.0
+   </td>
+   <td>81.7
+   </td>
+   <td>25.6
+   </td>
+  </tr>
+  <tr>
+   <td>GSM-8K (8-shot, CoT)
+   </td>
+   <td>79.6
+   </td>
+   <td>25.7
+   </td>
+   <td>77.4
+   </td>
+   <td>93.0
+   </td>
+   <td>57.5
+   </td>
+  </tr>
+  <tr>
+   <td>MATH (4-shot, CoT)
+   </td>
+   <td>30.0
+   </td>
+   <td>3.8
+   </td>
+   <td>6.7
+   </td>
+   <td>50.4
+   </td>
+   <td>11.6
+   </td>
+  </tr>
+</table>
+
+
+
+### Responsibility & Safety
+
+We believe that an open approach to AI leads to better, safer products, faster innovation, and a bigger overall market. We are committed to Responsible AI development and took a series of steps to limit misuse and harm and support the open source community.
+
+Foundation models are widely capable technologies that are built to be used for a diverse range of applications. They are not designed to meet every developer preference on safety levels for all use cases, out-of-the-box, as those by their nature will differ across different applications. 
+
+Rather, responsible LLM-application deployment is achieved by implementing a series of safety best practices throughout the development of such applications, from the model pre-training, fine-tuning and the deployment of systems composed of safeguards to tailor the safety needs specifically to the use case and audience. 
+
+
+As part of the Llama 3 release, we updated our [Responsible Use Guide](https://llama.meta.com/responsible-use-guide/) to outline the steps and best practices for developers to implement model and system level safety for their application. We also provide a set of resources including [Meta Llama Guard 2](https://llama.meta.com/purple-llama/) and [Code Shield](https://llama.meta.com/purple-llama/) safeguards. These tools have proven to drastically reduce residual risks of LLM Systems, while maintaining a high level of helpfulness. We encourage developers to tune and deploy these safeguards according to their needs and we provide a [reference implementation](https://github.com/meta-llama/llama-recipes/tree/main/recipes/responsible_ai) to get you started.
+
+
+#### Llama 3-Instruct
+
+As outlined in the Responsible Use Guide, some trade-off between model helpfulness and model alignment is likely unavoidable. Developers should exercise discretion about how to weigh the benefits of alignment and helpfulness for their specific use case and audience. Developers should be mindful of residual risks when using Llama models and leverage additional safety tools as needed to reach the right safety bar for their use case. 
+
+<span style=""text-decoration:underline;"">Safety</span>
+
+For our instruction tuned model, we conducted extensive red teaming exercises, performed adversarial evaluations and implemented safety mitigations techniques to lower residual risks. As with any Large Language Model, residual risks will likely remain and we recommend that developers assess these risks in the context of their use case. In parallel, we are working with the community to make AI safety benchmark standards transparent, rigorous and interpretable. 
+
+<span style=""text-decoration:underline;"">Refusals</span>
+
+In addition to residual risks, we put a great emphasis on model refusals to benign prompts. Over-refusing not only can impact the user experience but could even be harmful in certain contexts as well. We’ve heard the feedback from the developer community and improved our fine tuning to ensure that Llama 3 is significantly less likely to falsely refuse to answer prompts than Llama 2. 
+
+We built internal benchmarks and developed mitigations to limit false refusals making Llama 3 our most helpful model to date. 
+
+
+#### Responsible release 
+
+In addition to responsible use considerations outlined above, we followed a rigorous process that requires us to take extra measures against misuse and critical risks before we make our release decision. 
+
+Misuse
+
+If you access or use Llama 3, you agree to the Acceptable Use Policy. The most recent copy of this policy can be found at [https://llama.meta.com/llama3/use-policy/](https://llama.meta.com/llama3/use-policy/).
+
+
+#### Critical risks 
+
+<span style=""text-decoration:underline;"">CBRNE</span> (Chemical, Biological, Radiological, Nuclear, and high yield Explosives)
+
+We have conducted a two fold assessment of the safety of the model in this area:
+
+
+
+* Testing against a benchmark combining CBRNE and adversarial intent, as well as fine tuning the model to help ensure it refuses to provide detailed information to promote potential CBRNE harm.
+* Involving external CBRNE experts to conduct an uplift test assessing the ability of the model to accurately provide expert knowledge and reduce barriers to potential CBRNE misuse, by reference to what can be achieved using web search (without the model).
+
+
+### <span style=""text-decoration:underline;"">Cyber Security </span>
+
+We have evaluated Llama 3 with CyberSecEval, Meta’s cybersecurity safety eval suite, measuring Llama 3’s propensity to suggest insecure code when used as a coding assistant, and Llama 3’s propensity to comply with requests to help carry out cyber attacks, where attacks are defined by the industry standard MITRE ATT&CK cyber attack ontology. On our insecure coding and cyber attacker helpfulness tests, Llama 3 behaved in the same range or safer than models of [equivalent coding capability](https://huggingface.co/spaces/facebook/CyberSecEval). 
+
+
+### <span style=""text-decoration:underline;"">Child Safety</span>
+
+Child Safety risk assessments were conducted using a team of experts, to assess the model’s capability to produce outputs that could result in Child Safety risks and inform on any necessary and appropriate risk mitigations via fine tuning. We leveraged those expert red teaming sessions to expand the coverage of our evaluation benchmarks through Llama 3 model development.  For Llama 3, we conducted new in-depth sessions using objective based methodologies to assess the model risks along multiple attack vectors. We also partnered with content specialists to perform red teaming exercises assessing potentially violating content while taking account of market specific nuances or experiences. 
+
+
+### Community 
+
+Generative AI safety requires expertise and tooling, and we believe in the strength of the open community to accelerate its progress. We are active members of open consortiums, including the AI Alliance, Partnership in AI and MLCommons, actively contributing to safety standardization and transparency. We encourage the community to adopt taxonomies like the MLCommons Proof of Concept evaluation to facilitate collaboration and transparency on safety and content evaluations. Our Purple Llama tools are open sourced for the community to use and widely distributed across ecosystem partners including cloud service providers. We encourage community contributions to our [Github repository](https://github.com/meta-llama/PurpleLlama). 
+
+Finally, we put in place a set of resources including an [output reporting mechanism](https://developers.facebook.com/llama_output_feedback) and [bug bounty program](https://www.facebook.com/whitehat) to continuously improve the Llama technology with the help of the community. 
+
+
+## Ethical Considerations and Limitations
+
+The core values of Llama 3 are openness, inclusivity and helpfulness. It is meant to serve everyone, and to work for a wide range of use cases. It is thus designed to be accessible to people across many different backgrounds, experiences and perspectives. Llama 3 addresses users and their needs as they are, without insertion unnecessary judgment or normativity, while reflecting the understanding that even content that may appear problematic in some cases can serve valuable purposes in others. It respects the dignity and autonomy of all users, especially in terms of the values of free thought and expression that power innovation and progress. 
+
+But Llama 3 is a new technology, and like any new technology, there are risks associated with its use. Testing conducted to date has been in English, and has not covered, nor could it cover, all scenarios. For these reasons, as with all LLMs, Llama 3’s potential outputs cannot be predicted in advance, and the model may in some instances produce inaccurate, biased or other objectionable responses to user prompts. Therefore, before deploying any applications of Llama 3 models, developers should perform safety testing and tuning tailored to their specific applications of the model. As outlined in the Responsible Use Guide, we recommend incorporating [Purple Llama](https://github.com/facebookresearch/PurpleLlama) solutions into your workflows and specifically [Llama Guard](https://ai.meta.com/research/publications/llama-guard-llm-based-input-output-safeguard-for-human-ai-conversations/) which provides a base model to filter input and output prompts to layer system-level safety on top of model-level safety. 
+
+Please see the Responsible Use Guide available at [http://llama.meta.com/responsible-use-guide](http://llama.meta.com/responsible-use-guide)
+
+
+## Citation instructions
+
+@article{llama3modelcard,
+
+  title={Llama 3 Model Card},
+
+  author={AI@Meta},
+
+  year={2024},
+
+  url = {https://github.com/meta-llama/llama3/blob/main/MODEL_CARD.md}
+
+}
+
+## Contributors
+
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 63380ff..43ace1b 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -1 +1,515 @@
-To be populated..
+## Model Details
+
+Meta developed and released the Meta Llama 3 family of large language models (LLMs), a collection of pretrained and instruction tuned generative text models in 8 and 70B sizes. The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of the available open source chat models on common industry benchmarks. Further, in developing these models, we took great care to optimize helpfulness and safety. 
+
+**Model developers** Meta
+
+**Variations** Llama 3 comes in two sizes — 8B and 70B parameters — in pre-trained and instruction tuned variants.
+
+**Input** Models input text only.
+
+**Output** Models generate text and code only.
+
+**Model Architecture** Llama 3 is an auto-regressive language model that uses an optimized transformer architecture. The tuned versions use supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety.
+
+
+<table>
+  <tr>
+   <td>
+   </td>
+   <td><strong>Training Data</strong>
+   </td>
+   <td><strong>Params</strong>
+   </td>
+   <td><strong>Context length</strong>
+   </td>
+   <td><strong>GQA</strong>
+   </td>
+   <td><strong>Token count</strong>
+   </td>
+   <td><strong>Knowledge cutoff</strong>
+   </td>
+  </tr>
+  <tr>
+   <td rowspan=""2"" >Llama 3
+   </td>
+   <td rowspan=""2"" >A new mix of publicly available online data.
+   </td>
+   <td>8B
+   </td>
+   <td>8k
+   </td>
+   <td>Yes
+   </td>
+   <td rowspan=""2"" >15T+
+   </td>
+   <td>March, 2023
+   </td>
+  </tr>
+  <tr>
+   <td>70B
+   </td>
+   <td>8k
+   </td>
+   <td>Yes
+   </td>
+   <td>December, 2023
+   </td>
+  </tr>
+</table>
+
+
+**Llama 3 family of models**. Token counts refer to pretraining data only. Both the 8 and 70B versions use Grouped-Query Attention (GQA) for improved inference scalability.
+
+**Model Release Date** April 18, 2024.
+
+**Status** This is a static model trained on an offline dataset. Future versions of the tuned models will be released as we improve model safety with community feedback.
+
+**License** A custom commercial license is available at: [https://llama.meta.com/llama3/license](https://llama.meta.com/llama3/license)
+
+Where to send questions or comments about the model Instructions on how to provide feedback or comments on the model can be found in the model [README](https://github.com/meta-llama/llama3). For more technical information about generation parameters and recipes for how to use Llama 3 in applications, please go [here](https://github.com/meta-llama/llama-recipes). 
+
+
+## Intended Use
+
+**Intended Use Cases** Llama 3 is intended for commercial and research use in English. Instruction tuned models are intended for assistant-like chat, whereas pretrained models can be adapted for a variety of natural language generation tasks.
+
+**Out-of-scope** Use in any manner that violates applicable laws or regulations (including trade compliance laws). Use in any other way that is prohibited by the Acceptable Use Policy and Llama 3 Community License. Use in languages other than English**.
+
+**Note: Developers may fine-tune Llama 3 models for languages beyond English provided they comply with the Llama 3 Community License and the Acceptable Use Policy.
+
+
+## Hardware and Software
+
+**Training Factors** We used custom training libraries, Meta's Research SuperCluster, and production clusters for pretraining. Fine-tuning, annotation, and evaluation were also performed on third-party cloud compute.
+
+**Carbon Footprint Pretraining utilized a cumulative** 7.7M GPU hours of computation on hardware of type H100-80GB (TDP of 700W). Estimated total emissions were 2290 tCO2eq, 100% of which were offset by Meta’s sustainability program.
+
+
+<table>
+  <tr>
+   <td>
+   </td>
+   <td><strong>Time (GPU hours)</strong>
+   </td>
+   <td><strong>Power Consumption (W)</strong>
+   </td>
+   <td><strong>Carbon Emitted(tCO2eq)</strong>
+   </td>
+  </tr>
+  <tr>
+   <td>Llama 3 8B
+   </td>
+   <td>1.3M
+   </td>
+   <td>700
+   </td>
+   <td>390
+   </td>
+  </tr>
+  <tr>
+   <td>Llama 3 70B
+   </td>
+   <td>6.4M
+   </td>
+   <td>700
+   </td>
+   <td>1900
+   </td>
+  </tr>
+  <tr>
+   <td>Total
+   </td>
+   <td>7.7M
+   </td>
+   <td>
+   </td>
+   <td>2290
+   </td>
+  </tr>
+</table>
+
+
+
+**CO2 emissions during pre-training**. Time: total GPU time required for training each model. Power Consumption: peak power capacity per GPU device for the GPUs used adjusted for power usage efficiency. 100% of the emissions are directly offset by Meta's sustainability program, and because we are openly releasing these models, the pretraining costs do not need to be incurred by others.
+
+
+## Training Data
+
+**Overview** Llama 3 was pretrained on over 15 trillion tokens of data from publicly available sources. The fine-tuning data includes publicly available instruction datasets, as well as over 10M human-annotated examples. Neither the pretraining nor the fine-tuning datasets include Meta user data.
+
+**Data Freshness** The pretraining data has a cutoff of March 2023 for the 7B and December 2023 for the 70B models respectively. 
+
+
+## Benchmarks 
+
+In this section, we report the results for Llama 3 models on standard automatic benchmarks. For all the evaluations, we use our internal evaluations library. For details on the methodology see [here](https://github.com/meta-llama/llama3/blob/main/eval_methodology.md).
+
+
+### Base pretrained models
+
+
+<table>
+  <tr>
+   <td><strong>Category</strong>
+   </td>
+   <td><strong>Benchmark</strong>
+   </td>
+   <td><strong>Llama 3 8B</strong>
+   </td>
+   <td><strong>Llama2 7B</strong>
+   </td>
+   <td><strong>Llama2 13B</strong>
+   </td>
+   <td><strong>Llama 3 70B</strong>
+   </td>
+   <td><strong>Llama2 70B</strong>
+   </td>
+  </tr>
+  <tr>
+   <td rowspan=""6"" >General
+   </td>
+   <td>MMLU (5-shot)
+   </td>
+   <td>66.6
+   </td>
+   <td>45.7
+   </td>
+   <td>53.8
+   </td>
+   <td>79.5
+   </td>
+   <td>69.7
+   </td>
+  </tr>
+  <tr>
+   <td>AGIEval English (3-5 shot)
+   </td>
+   <td>45.9
+   </td>
+   <td>28.8
+   </td>
+   <td>38.7
+   </td>
+   <td>63.0
+   </td>
+   <td>54.8
+   </td>
+  </tr>
+  <tr>
+   <td>CommonSenseQA (7-shot)
+   </td>
+   <td>72.6
+   </td>
+   <td>57.6
+   </td>
+   <td>67.6
+   </td>
+   <td>83.8
+   </td>
+   <td>78.7
+   </td>
+  </tr>
+  <tr>
+   <td>Winogrande (5-shot)
+   </td>
+   <td>76.1
+   </td>
+   <td>73.3
+   </td>
+   <td>75.4
+   </td>
+   <td>83.1
+   </td>
+   <td>81.8
+   </td>
+  </tr>
+  <tr>
+   <td>BIG-Bench Hard (3-shot, CoT)
+   </td>
+   <td>61.1
+   </td>
+   <td>38.1
+   </td>
+   <td>47.0
+   </td>
+   <td>81.3
+   </td>
+   <td>65.7
+   </td>
+  </tr>
+  <tr>
+   <td>ARC-Challenge (25-shot)
+   </td>
+   <td>78.6
+   </td>
+   <td>53.7
+   </td>
+   <td>67.6
+   </td>
+   <td>93.0
+   </td>
+   <td>85.3
+   </td>
+  </tr>
+  <tr>
+   <td>Knowledge reasoning
+   </td>
+   <td>TriviaQA-Wiki (5-shot)
+   </td>
+   <td>78.5
+   </td>
+   <td>72.1
+   </td>
+   <td>79.6
+   </td>
+   <td>89.7
+   </td>
+   <td>87.5
+   </td>
+  </tr>
+  <tr>
+   <td rowspan=""4"" >Reading comprehension
+   </td>
+   <td>SQuAD (1-shot)
+   </td>
+   <td>76.4
+   </td>
+   <td>72.2
+   </td>
+   <td>72.1
+   </td>
+   <td>85.6
+   </td>
+   <td>82.6
+   </td>
+  </tr>
+  <tr>
+   <td>QuAC (1-shot, F1)
+   </td>
+   <td>44.4
+   </td>
+   <td>39.6
+   </td>
+   <td>44.9
+   </td>
+   <td>51.1
+   </td>
+   <td>49.4
+   </td>
+  </tr>
+  <tr>
+   <td>BoolQ (0-shot)
+   </td>
+   <td>75.7
+   </td>
+   <td>65.5
+   </td>
+   <td>66.9
+   </td>
+   <td>79.0
+   </td>
+   <td>73.1
+   </td>
+  </tr>
+  <tr>
+   <td>DROP (3-shot, F1)
+   </td>
+   <td>58.4
+   </td>
+   <td>37.9
+   </td>
+   <td>49.8
+   </td>
+   <td>79.7
+   </td>
+   <td>70.2
+   </td>
+  </tr>
+</table>
+
+
+
+### Instruction tuned models
+
+
+<table>
+  <tr>
+   <td><strong>Benchmark</strong>
+   </td>
+   <td><strong>Llama 3 8B</strong>
+   </td>
+   <td><strong>Llama 2 7B</strong>
+   </td>
+   <td><strong>Llama 2 13B</strong>
+   </td>
+   <td><strong>Llama 3 70B</strong>
+   </td>
+   <td><strong>Llama 2 70B</strong>
+   </td>
+  </tr>
+  <tr>
+   <td>MMLU (5-shot)
+   </td>
+   <td>68.4
+   </td>
+   <td>34.1
+   </td>
+   <td>47.8
+   </td>
+   <td>82.0
+   </td>
+   <td>52.9
+   </td>
+  </tr>
+  <tr>
+   <td>GPQA (0-shot)
+   </td>
+   <td>34.2
+   </td>
+   <td>21.7
+   </td>
+   <td>22.3
+   </td>
+   <td>39.5
+   </td>
+   <td>21.0
+   </td>
+  </tr>
+  <tr>
+   <td>HumanEval (0-shot)
+   </td>
+   <td>62.2
+   </td>
+   <td>7.9
+   </td>
+   <td>14.0
+   </td>
+   <td>81.7
+   </td>
+   <td>25.6
+   </td>
+  </tr>
+  <tr>
+   <td>GSM-8K (8-shot, CoT)
+   </td>
+   <td>79.6
+   </td>
+   <td>25.7
+   </td>
+   <td>77.4
+   </td>
+   <td>93.0
+   </td>
+   <td>57.5
+   </td>
+  </tr>
+  <tr>
+   <td>MATH (4-shot, CoT)
+   </td>
+   <td>30.0
+   </td>
+   <td>3.8
+   </td>
+   <td>6.7
+   </td>
+   <td>50.4
+   </td>
+   <td>11.6
+   </td>
+  </tr>
+</table>
+
+
+
+### Responsibility & Safety
+
+We believe that an open approach to AI leads to better, safer products, faster innovation, and a bigger overall market. We are committed to Responsible AI development and took a series of steps to limit misuse and harm and support the open source community.
+
+Foundation models are widely capable technologies that are built to be used for a diverse range of applications. They are not designed to meet every developer preference on safety levels for all use cases, out-of-the-box, as those by their nature will differ across different applications. 
+
+Rather, responsible LLM-application deployment is achieved by implementing a series of safety best practices throughout the development of such applications, from the model pre-training, fine-tuning and the deployment of systems composed of safeguards to tailor the safety needs specifically to the use case and audience. 
+
+
+As part of the Llama 3 release, we updated our [Responsible Use Guide](https://llama.meta.com/responsible-use-guide/) to outline the steps and best practices for developers to implement model and system level safety for their application. We also provide a set of resources including [Meta Llama Guard 2](https://llama.meta.com/purple-llama/) and [Code Shield](https://llama.meta.com/purple-llama/) safeguards. These tools have proven to drastically reduce residual risks of LLM Systems, while maintaining a high level of helpfulness. We encourage developers to tune and deploy these safeguards according to their needs and we provide a [reference implementation](https://github.com/meta-llama/llama-recipes/tree/main/recipes/responsible_ai) to get you started.
+
+
+#### Llama 3-Instruct
+
+As outlined in the Responsible Use Guide, some trade-off between model helpfulness and model alignment is likely unavoidable. Developers should exercise discretion about how to weigh the benefits of alignment and helpfulness for their specific use case and audience. Developers should be mindful of residual risks when using Llama models and leverage additional safety tools as needed to reach the right safety bar for their use case. 
+
+<span style=""text-decoration:underline;"">Safety</span>
+
+For our instruction tuned model, we conducted extensive red teaming exercises, performed adversarial evaluations and implemented safety mitigations techniques to lower residual risks. As with any Large Language Model, residual risks will likely remain and we recommend that developers assess these risks in the context of their use case. In parallel, we are working with the community to make AI safety benchmark standards transparent, rigorous and interpretable. 
+
+<span style=""text-decoration:underline;"">Refusals</span>
+
+In addition to residual risks, we put a great emphasis on model refusals to benign prompts. Over-refusing not only can impact the user experience but could even be harmful in certain contexts as well. We’ve heard the feedback from the developer community and improved our fine tuning to ensure that Llama 3 is significantly less likely to falsely refuse to answer prompts than Llama 2. 
+
+We built internal benchmarks and developed mitigations to limit false refusals making Llama 3 our most helpful model to date. 
+
+
+#### Responsible release 
+
+In addition to responsible use considerations outlined above, we followed a rigorous process that requires us to take extra measures against misuse and critical risks before we make our release decision. 
+
+Misuse
+
+If you access or use Llama 3, you agree to the Acceptable Use Policy. The most recent copy of this policy can be found at [https://llama.meta.com/llama3/use-policy/](https://llama.meta.com/llama3/use-policy/).
+
+
+#### Critical risks 
+
+<span style=""text-decoration:underline;"">CBRNE</span> (Chemical, Biological, Radiological, Nuclear, and high yield Explosives)
+
+We have conducted a two fold assessment of the safety of the model in this area:
+
+
+
+* Testing against a benchmark combining CBRNE and adversarial intent, as well as fine tuning the model to help ensure it refuses to provide detailed information to promote potential CBRNE harm.
+* Involving external CBRNE experts to conduct an uplift test assessing the ability of the model to accurately provide expert knowledge and reduce barriers to potential CBRNE misuse, by reference to what can be achieved using web search (without the model).
+
+
+### <span style=""text-decoration:underline;"">Cyber Security </span>
+
+We have evaluated Llama 3 with CyberSecEval, Meta’s cybersecurity safety eval suite, measuring Llama 3’s propensity to suggest insecure code when used as a coding assistant, and Llama 3’s propensity to comply with requests to help carry out cyber attacks, where attacks are defined by the industry standard MITRE ATT&CK cyber attack ontology. On our insecure coding and cyber attacker helpfulness tests, Llama 3 behaved in the same range or safer than models of [equivalent coding capability](https://huggingface.co/spaces/facebook/CyberSecEval). 
+
+
+### <span style=""text-decoration:underline;"">Child Safety</span>
+
+Child Safety risk assessments were conducted using a team of experts, to assess the model’s capability to produce outputs that could result in Child Safety risks and inform on any necessary and appropriate risk mitigations via fine tuning. We leveraged those expert red teaming sessions to expand the coverage of our evaluation benchmarks through Llama 3 model development.  For Llama 3, we conducted new in-depth sessions using objective based methodologies to assess the model risks along multiple attack vectors. We also partnered with content specialists to perform red teaming exercises assessing potentially violating content while taking account of market specific nuances or experiences. 
+
+
+### Community 
+
+Generative AI safety requires expertise and tooling, and we believe in the strength of the open community to accelerate its progress. We are active members of open consortiums, including the AI Alliance, Partnership in AI and MLCommons, actively contributing to safety standardization and transparency. We encourage the community to adopt taxonomies like the MLCommons Proof of Concept evaluation to facilitate collaboration and transparency on safety and content evaluations. Our Purple Llama tools are open sourced for the community to use and widely distributed across ecosystem partners including cloud service providers. We encourage community contributions to our [Github repository](https://github.com/meta-llama/PurpleLlama). 
+
+Finally, we put in place a set of resources including an [output reporting mechanism](https://developers.facebook.com/llama_output_feedback) and [bug bounty program](https://www.facebook.com/whitehat) to continuously improve the Llama technology with the help of the community. 
+
+
+## Ethical Considerations and Limitations
+
+The core values of Llama 3 are openness, inclusivity and helpfulness. It is meant to serve everyone, and to work for a wide range of use cases. It is thus designed to be accessible to people across many different backgrounds, experiences and perspectives. Llama 3 addresses users and their needs as they are, without insertion unnecessary judgment or normativity, while reflecting the understanding that even content that may appear problematic in some cases can serve valuable purposes in others. It respects the dignity and autonomy of all users, especially in terms of the values of free thought and expression that power innovation and progress. 
+
+But Llama 3 is a new technology, and like any new technology, there are risks associated with its use. Testing conducted to date has been in English, and has not covered, nor could it cover, all scenarios. For these reasons, as with all LLMs, Llama 3’s potential outputs cannot be predicted in advance, and the model may in some instances produce inaccurate, biased or other objectionable responses to user prompts. Therefore, before deploying any applications of Llama 3 models, developers should perform safety testing and tuning tailored to their specific applications of the model. As outlined in the Responsible Use Guide, we recommend incorporating [Purple Llama](https://github.com/facebookresearch/PurpleLlama) solutions into your workflows and specifically [Llama Guard](https://ai.meta.com/research/publications/llama-guard-llm-based-input-output-safeguard-for-human-ai-conversations/) which provides a base model to filter input and output prompts to layer system-level safety on top of model-level safety. 
+
+Please see the Responsible Use Guide available at [http://llama.meta.com/responsible-use-guide](http://llama.meta.com/responsible-use-guide)
+
+
+## Citation instructions
+
+@article{llama3modelcard,
+
+  title={Llama 3 Model Card},
+
+  author={AI@Meta},
+
+  year={2024},
+
+  url = {https://github.com/meta-llama/llama3/blob/main/MODEL_CARD.md}
+
+}
+
+## Contributors
+
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos",No
MODEL_CARD.md,MODEL_CARD.md,d03861131039b042375014f0019f7c0e3232baa0,6418c56157d50be7c4d9fe0e38ff4b6f650c98b2,Update MODEL_CARD.md,"diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 43ace1b..1248783 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -512,4 +512,4 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Contributors
 
-Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 43ace1b..1248783 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -512,4 +512,4 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Contributors
 
-Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos",No
README.md,README.md,cc9653554a140068702c794defe8b79432833d31,6418c56157d50be7c4d9fe0e38ff4b6f650c98b2,"Update README.md

Update format for instruction tuned models","diff --git a/README.md b/README.md
index e3d9b01..6f94ac8 100644
--- a/README.md
+++ b/README.md
@@ -113,10 +113,10 @@ torchrun --nproc_per_node 1 example_text_completion.py \
 
 ### Instruction-tuned Models
 
-The fine-tuned models were trained for dialogue applications. To get the expected features and performance for them, a specific formatting defined in [`chat_completion`](https://github.com/facebookresearch/llama/blob/main/llama/generation.py#L212)
-needs to be followed, including the `INST` and `<<SYS>>` tags, `BOS` and `EOS` tokens, and the whitespaces and breaklines in between (we recommend calling `strip()` on inputs to avoid double-spaces).
+The fine-tuned models were trained for dialogue applications. To get the expected features and performance for them, a specific formatting defined in [`ChatFormat`](https://github.com/meta-llama/llama3/blob/main/llama/tokenizer.py#L202)
+needs to be followed: The prompt begins with a `<|begin_of_text|>` special token, after which one or more messages follow. Each message starts with the `<|start_header_id|>` tag, the role `system`, `user` or `assistant`, and the `<|end_header_id|>` tag. After a double newline `\n\n` the contents of the message follow. The end of each message is marked by the `<|eot_id|>` token.
 
-You can also deploy additional classifiers for filtering out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/facebookresearch/llama-recipes/blob/main/examples/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
+You can also deploy additional classifiers for filtering out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/meta-llama/llama-recipes/blob/main/recipes/inference/local_inference/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
 
 Examples using llama-3-8b-chat:
 ","diff --git a/README.md b/README.md
index e3d9b01..6f94ac8 100644
--- a/README.md
+++ b/README.md
@@ -113,10 +113,10 @@ torchrun --nproc_per_node 1 example_text_completion.py \
 
 ### Instruction-tuned Models
 
-The fine-tuned models were trained for dialogue applications. To get the expected features and performance for them, a specific formatting defined in [`chat_completion`](https://github.com/facebookresearch/llama/blob/main/llama/generation.py#L212)
-needs to be followed, including the `INST` and `<<SYS>>` tags, `BOS` and `EOS` tokens, and the whitespaces and breaklines in between (we recommend calling `strip()` on inputs to avoid double-spaces).
+The fine-tuned models were trained for dialogue applications. To get the expected features and performance for them, a specific formatting defined in [`ChatFormat`](https://github.com/meta-llama/llama3/blob/main/llama/tokenizer.py#L202)
+needs to be followed: The prompt begins with a `<|begin_of_text|>` special token, after which one or more messages follow. Each message starts with the `<|start_header_id|>` tag, the role `system`, `user` or `assistant`, and the `<|end_header_id|>` tag. After a double newline `\n\n` the contents of the message follow. The end of each message is marked by the `<|eot_id|>` token.
 
-You can also deploy additional classifiers for filtering out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/facebookresearch/llama-recipes/blob/main/examples/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
+You can also deploy additional classifiers for filtering out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/meta-llama/llama-recipes/blob/main/recipes/inference/local_inference/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
 
 Examples using llama-3-8b-chat:
 ",No
MODEL_CARD.md,MODEL_CARD.md,67a8d004beadbb449ed9786ed01dbc47a5f431fe,1186d7eb4fe42aef34069f5548da9a6a71789e68,Update MODEL_CARD.md,"diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 1248783..aa5bde1 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -466,7 +466,7 @@ We have conducted a two fold assessment of the safety of the model in this area:
 
 
 
-* Testing against a benchmark combining CBRNE and adversarial intent, as well as fine tuning the model to help ensure it refuses to provide detailed information to promote potential CBRNE harm.
+* Iterative testing during model training to assess the safety of responses related to CBRNE threats and other adversarial risks.
 * Involving external CBRNE experts to conduct an uplift test assessing the ability of the model to accurately provide expert knowledge and reduce barriers to potential CBRNE misuse, by reference to what can be achieved using web search (without the model).
 
 ","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 1248783..aa5bde1 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -466,7 +466,7 @@ We have conducted a two fold assessment of the safety of the model in this area:
 
 
 
-* Testing against a benchmark combining CBRNE and adversarial intent, as well as fine tuning the model to help ensure it refuses to provide detailed information to promote potential CBRNE harm.
+* Iterative testing during model training to assess the safety of responses related to CBRNE threats and other adversarial risks.
 * Involving external CBRNE experts to conduct an uplift test assessing the ability of the model to accurately provide expert knowledge and reduce barriers to potential CBRNE misuse, by reference to what can be achieved using web search (without the model).
 
 ",No
README.md,README.md,50157ce5a451a9183a21c9c12cd8825a52fc3f71,03cd8230dcc0d3aa3a1659d80660a0304c027347,Updating HF path due to name corrections,"diff --git a/README.md b/README.md
index f67cb9d..3e79c33 100644
--- a/README.md
+++ b/README.md
@@ -31,7 +31,7 @@ Keep in mind that the links expire after 24 hours and a certain amount of downlo
 
 We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
 
-- Visit one of the repos, for example [meta-llama/Llama-3-8b-instruct](https://huggingface.co/meta-llama/Llama-3-8b-instruct).
+- Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
 ","diff --git a/README.md b/README.md
index f67cb9d..3e79c33 100644
--- a/README.md
+++ b/README.md
@@ -31,7 +31,7 @@ Keep in mind that the links expire after 24 hours and a certain amount of downlo
 
 We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
 
-- Visit one of the repos, for example [meta-llama/Llama-3-8b-instruct](https://huggingface.co/meta-llama/Llama-3-8b-instruct).
+- Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
 ",No
README.md,README.md,647a0e77c38de3cb1f77fb04e1e3f0ce1a19a9c6,9811a25e078569c404343e3b4b6cb0f95dcf0965,Update HF model name due to name correction,"diff --git a/README.md b/README.md
index 3e79c33..3b3acb8 100644
--- a/README.md
+++ b/README.md
@@ -45,7 +45,7 @@ huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Llama-3-8b-i
   import transformers
   import torch
 
-  model_id = ""meta-llama/Llama-3-8b-instruct""
+  model_id = ""meta-llama/Meta-Llama-3-8B-Instruct""
 
   pipeline = transformers.pipeline(
     ""text-generation"",","diff --git a/README.md b/README.md
index 3e79c33..3b3acb8 100644
--- a/README.md
+++ b/README.md
@@ -45,7 +45,7 @@ huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Llama-3-8b-i
   import transformers
   import torch
 
-  model_id = ""meta-llama/Llama-3-8b-instruct""
+  model_id = ""meta-llama/Meta-Llama-3-8B-Instruct""
 
   pipeline = transformers.pipeline(
     ""text-generation"",",No
README.md,README.md,5a55f4a73bdc1325adc333c9e89353e109756d30,647a0e77c38de3cb1f77fb04e1e3f0ce1a19a9c6,Update HF model name,"diff --git a/README.md b/README.md
index 3b3acb8..5225fed 100644
--- a/README.md
+++ b/README.md
@@ -49,7 +49,7 @@ huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Llama-3-8b-i
 
   pipeline = transformers.pipeline(
     ""text-generation"",
-    model=""meta-llama/Llama-3-8b-instruct"",
+    model=""meta-llama/Meta-Llama-3-8B-Instruct"",
     model_kwargs={""torch_dtype"": torch.bfloat16},
     device=""cuda"",
   )","diff --git a/README.md b/README.md
index 3b3acb8..5225fed 100644
--- a/README.md
+++ b/README.md
@@ -49,7 +49,7 @@ huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Llama-3-8b-i
 
   pipeline = transformers.pipeline(
     ""text-generation"",
-    model=""meta-llama/Llama-3-8b-instruct"",
+    model=""meta-llama/Meta-Llama-3-8B-Instruct"",
     model_kwargs={""torch_dtype"": torch.bfloat16},
     device=""cuda"",
   )",No
README.md,README.md,4b61ce37c59524e13697091cc991570207576757,966c3545bf53d0eacd227d9c1b8082cb8403c8d6,Hf download path update,"diff --git a/README.md b/README.md
index 5225fed..2eeaa33 100644
--- a/README.md
+++ b/README.md
@@ -36,7 +36,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
 
 ```bash
-huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Llama-3-8b-instruct
+huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Meta-Llama-3-8B-Instruct
 ```
 
 - To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:","diff --git a/README.md b/README.md
index 5225fed..2eeaa33 100644
--- a/README.md
+++ b/README.md
@@ -36,7 +36,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
 
 ```bash
-huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Llama-3-8b-instruct
+huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Meta-Llama-3-8B-Instruct
 ```
 
 - To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:",No
README.md,README.md,52da5344409fff64a1a2a177c3d8152d0a615065,4b61ce37c59524e13697091cc991570207576757,Updating text completion example to point to pretrained model,"diff --git a/README.md b/README.md
index 2eeaa33..aa912f7 100644
--- a/README.md
+++ b/README.md
@@ -106,8 +106,8 @@ See `example_text_completion.py` for some examples. To illustrate, see the comma
 
 ```
 torchrun --nproc_per_node 1 example_text_completion.py \
-    --ckpt_dir Meta-Llama-3-8B-Instruct/ \
-    --tokenizer_path Meta-Llama-3-8B-Instruct/tokenizer.model \
+    --ckpt_dir Meta-Llama-3-8B/ \
+    --tokenizer_path Meta-Llama-3-8B/tokenizer.model \
     --max_seq_len 128 --max_batch_size 4
 ```
 ","diff --git a/README.md b/README.md
index 2eeaa33..aa912f7 100644
--- a/README.md
+++ b/README.md
@@ -106,8 +106,8 @@ See `example_text_completion.py` for some examples. To illustrate, see the comma
 
 ```
 torchrun --nproc_per_node 1 example_text_completion.py \
-    --ckpt_dir Meta-Llama-3-8B-Instruct/ \
-    --tokenizer_path Meta-Llama-3-8B-Instruct/tokenizer.model \
+    --ckpt_dir Meta-Llama-3-8B/ \
+    --tokenizer_path Meta-Llama-3-8B/tokenizer.model \
     --max_seq_len 128 --max_batch_size 4
 ```
 ",No
README.md,README.md,d06317946fcd039f0c92f8e520c541385b41bc42,4b61ce37c59524e13697091cc991570207576757,Final changes to the HF download path,"diff --git a/README.md b/README.md
index 2eeaa33..f6539a5 100644
--- a/README.md
+++ b/README.md
@@ -36,7 +36,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
 
 ```bash
-huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Meta-Llama-3-8B-Instruct
+huggingface-cli download meta-llama/Meta-Llama-3-8B-Instruct --include ""original/*"" --local-dir meta-llama/Meta-Llama-3-8B-Instruct
 ```
 
 - To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:","diff --git a/README.md b/README.md
index 2eeaa33..f6539a5 100644
--- a/README.md
+++ b/README.md
@@ -36,7 +36,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
 
 ```bash
-huggingface-cli download --local-dir llama-3-8b-instruct meta-llama/Meta-Llama-3-8B-Instruct
+huggingface-cli download meta-llama/Meta-Llama-3-8B-Instruct --include ""original/*"" --local-dir meta-llama/Meta-Llama-3-8B-Instruct
 ```
 
 - To use with transformers, the following [pipeline](https://huggingface.co/docs/transformers/en/main_classes/pipelines) snippet will download and cache the weights:",No
MODEL_CARD.md,MODEL_CARD.md,f59c974e7c2c7b6e714b8e385728f2076e4f7c7d,8461bf455c0a563d2af763b97c78030d79fbf565,Update MODEL_CARD.md formatting,"diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index aa5bde1..38211f4 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -498,17 +498,14 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Citation instructions
 
+```
 @article{llama3modelcard,
-
   title={Llama 3 Model Card},
-
   author={AI@Meta},
-
   year={2024},
-
   url = {https://github.com/meta-llama/llama3/blob/main/MODEL_CARD.md}
-
 }
+```
 
 ## Contributors
 ","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index aa5bde1..38211f4 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -498,17 +498,14 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Citation instructions
 
+```
 @article{llama3modelcard,
-
   title={Llama 3 Model Card},
-
   author={AI@Meta},
-
   year={2024},
-
   url = {https://github.com/meta-llama/llama3/blob/main/MODEL_CARD.md}
-
 }
+```
 
 ## Contributors
 ",No
eval_details.md,eval_details.md,257925e12307ffbff246e51e647f2fb7b5226455,8461bf455c0a563d2af763b97c78030d79fbf565,"Update eval_details.md

Adding missing hyperlinks","diff --git a/eval_details.md b/eval_details.md
index e62665f..63d298a 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -5,9 +5,9 @@ This document contains additional context on the settings and parameters for how
 - We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
 - For the instruct-aligned MMLU we ask the model to generate the best choice character
 #### AGI English
-- We use the default few-shot and prompt settings as specified here. The score is averaged over the english subtasks.
+- We use the default few-shot and prompt settings as specified [here](https://github.com/ruixiangcui/AGIEval). The score is averaged over the english subtasks.
 #### CommonSenseQA
-- We use the same 7-shot chain-of-thought prompt as in Wei et al. (2022).
+- We use the same 7-shot chain-of-thought prompt as in [Wei et al. (2022)](https://arxiv.org/pdf/2201.11903.pdf).
 #### Winogrande
 - We use a choice based setup for evaluation where we fill in the missing blank with the two possible choices and then compute log-likelihood over the suffix. We use 5 shots for evaluation.
 #### BIG-Bench Hard
@@ -29,9 +29,9 @@ This document contains additional context on the settings and parameters for how
 #### HumanEval
 - Same setting as Llama 1 and Llama 2 (pass@1).
 #### GSM8K
-- We use the same 8-shot chain-of-thought prompt as in Wei et al. (2022) (maj@1).
+- We use the same 8-shot chain-of-thought prompt as in [Wei et al. (2022)](https://arxiv.org/pdf/2201.11903.pdf) (maj@1).
 #### MATH
-- We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).
+- We use the 4-shot problem available in [Lewkowycz et al. (2022)](https://arxiv.org/pdf/2206.14858.pdf) (maj@1).
 ### Human evaluation notes
 This evaluation set contains 1,800 prompts that cover 12 key use cases: asking for advice, brainstorming, classification, closed question answering, coding, creative writing, extraction, inhabiting a character/persona, open question answering, reasoning, rewriting, and summarization.
 |Category|Count|","diff --git a/eval_details.md b/eval_details.md
index e62665f..63d298a 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -5,9 +5,9 @@ This document contains additional context on the settings and parameters for how
 - We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
 - For the instruct-aligned MMLU we ask the model to generate the best choice character
 #### AGI English
-- We use the default few-shot and prompt settings as specified here. The score is averaged over the english subtasks.
+- We use the default few-shot and prompt settings as specified [here](https://github.com/ruixiangcui/AGIEval). The score is averaged over the english subtasks.
 #### CommonSenseQA
-- We use the same 7-shot chain-of-thought prompt as in Wei et al. (2022).
+- We use the same 7-shot chain-of-thought prompt as in [Wei et al. (2022)](https://arxiv.org/pdf/2201.11903.pdf).
 #### Winogrande
 - We use a choice based setup for evaluation where we fill in the missing blank with the two possible choices and then compute log-likelihood over the suffix. We use 5 shots for evaluation.
 #### BIG-Bench Hard
@@ -29,9 +29,9 @@ This document contains additional context on the settings and parameters for how
 #### HumanEval
 - Same setting as Llama 1 and Llama 2 (pass@1).
 #### GSM8K
-- We use the same 8-shot chain-of-thought prompt as in Wei et al. (2022) (maj@1).
+- We use the same 8-shot chain-of-thought prompt as in [Wei et al. (2022)](https://arxiv.org/pdf/2201.11903.pdf) (maj@1).
 #### MATH
-- We use the 4-shot problem available in Lewkowycz et al. (2022) (maj@1).
+- We use the 4-shot problem available in [Lewkowycz et al. (2022)](https://arxiv.org/pdf/2206.14858.pdf) (maj@1).
 ### Human evaluation notes
 This evaluation set contains 1,800 prompts that cover 12 key use cases: asking for advice, brainstorming, classification, closed question answering, coding, creative writing, extraction, inhabiting a character/persona, open question answering, reasoning, rewriting, and summarization.
 |Category|Count|",No
README.md,README.md,efc42c7c1faa082741d5d1f7e3388c3e52ec60d4,c54e9054f60a6b06cf85fc852bf112763e0aad0b,"Update Typo in README.md

Typo on line 36 - 'pip install hugginface-hub' corrected to 'pip install huggingface-hub'","diff --git a/README.md b/README.md
index d49b877..c242d16 100644
--- a/README.md
+++ b/README.md
@@ -33,7 +33,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 - Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
-- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
+- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install huggingface-hub`:
 
 ```bash
 huggingface-cli download meta-llama/Meta-Llama-3-8B-Instruct --include ""original/*"" --local-dir meta-llama/Meta-Llama-3-8B-Instruct","diff --git a/README.md b/README.md
index d49b877..c242d16 100644
--- a/README.md
+++ b/README.md
@@ -33,7 +33,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 - Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
-- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
+- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install huggingface-hub`:
 
 ```bash
 huggingface-cli download meta-llama/Meta-Llama-3-8B-Instruct --include ""original/*"" --local-dir meta-llama/Meta-Llama-3-8B-Instruct",No
README.md,README.md,0cee08ec68f4cfc0c89fe4a9366d82679aaa2a66,4c71e57411d344259d33a15fa25968aa0d7d8a7a,Update README.md,"diff --git a/README.md b/README.md
index d49b877..c242d16 100644
--- a/README.md
+++ b/README.md
@@ -33,7 +33,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 - Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
-- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
+- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install huggingface-hub`:
 
 ```bash
 huggingface-cli download meta-llama/Meta-Llama-3-8B-Instruct --include ""original/*"" --local-dir meta-llama/Meta-Llama-3-8B-Instruct","diff --git a/README.md b/README.md
index d49b877..c242d16 100644
--- a/README.md
+++ b/README.md
@@ -33,7 +33,7 @@ We are also providing downloads on [Hugging Face](https://huggingface.co/meta-ll
 
 - Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
-- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install hugginface-hub`:
+- To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install huggingface-hub`:
 
 ```bash
 huggingface-cli download meta-llama/Meta-Llama-3-8B-Instruct --include ""original/*"" --local-dir meta-llama/Meta-Llama-3-8B-Instruct",No
MODEL_CARD.md,MODEL_CARD.md,ef55aca9fbe590713cfea7e55982c43976141d6b,0cee08ec68f4cfc0c89fe4a9366d82679aaa2a66,"Fix link to eval_details.md

Commit 4b48ffc371d497c5b732fae69ff5c59904382326 renamed eval_methodology.md to eval_details.md.","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 38211f4..875d6e0 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -143,7 +143,7 @@ Where to send questions or comments about the model Instructions on how to provi
 
 ## Benchmarks 
 
-In this section, we report the results for Llama 3 models on standard automatic benchmarks. For all the evaluations, we use our internal evaluations library. For details on the methodology see [here](https://github.com/meta-llama/llama3/blob/main/eval_methodology.md).
+In this section, we report the results for Llama 3 models on standard automatic benchmarks. For all the evaluations, we use our internal evaluations library. For details on the methodology see [here](https://github.com/meta-llama/llama3/blob/main/eval_details.md).
 
 
 ### Base pretrained models","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 38211f4..875d6e0 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -143,7 +143,7 @@ Where to send questions or comments about the model Instructions on how to provi
 
 ## Benchmarks 
 
-In this section, we report the results for Llama 3 models on standard automatic benchmarks. For all the evaluations, we use our internal evaluations library. For details on the methodology see [here](https://github.com/meta-llama/llama3/blob/main/eval_methodology.md).
+In this section, we report the results for Llama 3 models on standard automatic benchmarks. For all the evaluations, we use our internal evaluations library. For details on the methodology see [here](https://github.com/meta-llama/llama3/blob/main/eval_details.md).
 
 
 ### Base pretrained models",No
README.md,README.md,7f91eaa1037954c4600d4a80126933408103aba6,0cee08ec68f4cfc0c89fe4a9366d82679aaa2a66,"Update README.md

typo","diff --git a/README.md b/README.md
index c242d16..cf22961 100644
--- a/README.md
+++ b/README.md
@@ -32,7 +32,7 @@ Keep in mind that the links expire after 24 hours and a certain amount of downlo
 We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
 
 - Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
-- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
+- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests used to take up to one hour to get processed.
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install huggingface-hub`:
 
 ```bash","diff --git a/README.md b/README.md
index c242d16..cf22961 100644
--- a/README.md
+++ b/README.md
@@ -32,7 +32,7 @@ Keep in mind that the links expire after 24 hours and a certain amount of downlo
 We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
 
 - Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
-- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests use to take up to one hour to get processed.
+- Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests used to take up to one hour to get processed.
 - To download the original native weights to use with this repo, click on the ""Files and versions"" tab and download the contents of the `original` folder. You can also download them from the command line if you `pip install huggingface-hub`:
 
 ```bash",No
MODEL_CARD.md,MODEL_CARD.md,1bc5307166aa2c4d0714893f63f6fae8e49c3b57,299bfd8212fec65698c2f8c7b5970cbbb74c2a4f,Update MODEL_CARD.md,"diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 875d6e0..ea114a5 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -509,4 +509,4 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Contributors
 
-Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 875d6e0..ea114a5 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -509,4 +509,4 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Contributors
 
-Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos",No
MODEL_CARD.md,MODEL_CARD.md,92a325ec9925557b5fd64202c91024231a428c08,1bc5307166aa2c4d0714893f63f6fae8e49c3b57,Update MODEL_CARD.md,"diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index ea114a5..0ca3b21 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -509,4 +509,4 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Contributors
 
-Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Ash JJhaveri; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hamid Shojanazeri; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index ea114a5..0ca3b21 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -509,4 +509,4 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Contributors
 
-Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Ash JJhaveri; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hamid Shojanazeri; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos",No
MODEL_CARD.md,MODEL_CARD.md,50e2026176097e35615b7beebbd13064ab99497d,92a325ec9925557b5fd64202c91024231a428c08,Fix typo MODEL_CARD.md,"diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 0ca3b21..697dc0f 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -138,7 +138,7 @@ Where to send questions or comments about the model Instructions on how to provi
 
 **Overview** Llama 3 was pretrained on over 15 trillion tokens of data from publicly available sources. The fine-tuning data includes publicly available instruction datasets, as well as over 10M human-annotated examples. Neither the pretraining nor the fine-tuning datasets include Meta user data.
 
-**Data Freshness** The pretraining data has a cutoff of March 2023 for the 7B and December 2023 for the 70B models respectively. 
+**Data Freshness** The pretraining data has a cutoff of March 2023 for the 8B and December 2023 for the 70B models respectively. 
 
 
 ## Benchmarks ","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 0ca3b21..697dc0f 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -138,7 +138,7 @@ Where to send questions or comments about the model Instructions on how to provi
 
 **Overview** Llama 3 was pretrained on over 15 trillion tokens of data from publicly available sources. The fine-tuning data includes publicly available instruction datasets, as well as over 10M human-annotated examples. Neither the pretraining nor the fine-tuning datasets include Meta user data.
 
-**Data Freshness** The pretraining data has a cutoff of March 2023 for the 7B and December 2023 for the 70B models respectively. 
+**Data Freshness** The pretraining data has a cutoff of March 2023 for the 8B and December 2023 for the 70B models respectively. 
 
 
 ## Benchmarks ",No
download.sh,download.sh,2efa507843457d3695bdd8121c0404f18309e392,c11704ac2d710d3b249bd4bfdcd9cb34d5e26bea,Set execute permissions on download script,"diff --git a/download.sh b/download.sh
old mode 100644
new mode 100755","diff --git a/download.sh b/download.sh
old mode 100644
new mode 100755",No
CONTRIBUTING.md,CONTRIBUTING.md,4f2850cd7c894fae21cd3b1842ba97f3a510b4ad,c11704ac2d710d3b249bd4bfdcd9cb34d5e26bea,"Update CONTRIBUTING.md

updating the bug bounty link..","diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index b9bcff6..ca696f0 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -25,7 +25,7 @@ Complete your CLA here: <https://code.facebook.com/cla>
 We use GitHub issues to track public bugs. Please ensure your description is
 clear and has sufficient instructions to be able to reproduce the issue.
 
-Meta has a [bounty program](https://bugbounty.meta.com/) for the safe
+Meta has a [bounty program](http://facebook.com/whitehat/info) for the safe
 disclosure of security bugs. In those cases, please go through the process
 outlined on that page and do not file a public issue.
 ","diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index b9bcff6..ca696f0 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -25,7 +25,7 @@ Complete your CLA here: <https://code.facebook.com/cla>
 We use GitHub issues to track public bugs. Please ensure your description is
 clear and has sufficient instructions to be able to reproduce the issue.
 
-Meta has a [bounty program](https://bugbounty.meta.com/) for the safe
+Meta has a [bounty program](http://facebook.com/whitehat/info) for the safe
 disclosure of security bugs. In those cases, please go through the process
 outlined on that page and do not file a public issue.
 ",No
MODEL_CARD.md,MODEL_CARD.md,1ad08ce0e0a98c434fdc53b2a165fcbdb23f9b77,359887376f0aaf30e433f23e25df858d8c2a9833,Update MODEL_CARD.md with links,"diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 697dc0f..0a8a481 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -74,9 +74,9 @@ Where to send questions or comments about the model Instructions on how to provi
 
 **Intended Use Cases** Llama 3 is intended for commercial and research use in English. Instruction tuned models are intended for assistant-like chat, whereas pretrained models can be adapted for a variety of natural language generation tasks.
 
-**Out-of-scope** Use in any manner that violates applicable laws or regulations (including trade compliance laws). Use in any other way that is prohibited by the Acceptable Use Policy and Llama 3 Community License. Use in languages other than English**.
+**Out-of-scope** Use in any manner that violates applicable laws or regulations (including trade compliance laws). Use in any other way that is prohibited by the [Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/) and [Llama 3 Community License](https://llama.meta.com/llama3/license/). Use in languages other than English**.
 
-**Note: Developers may fine-tune Llama 3 models for languages beyond English provided they comply with the Llama 3 Community License and the Acceptable Use Policy.
+**Note: Developers may fine-tune Llama 3 models for languages beyond English provided they comply with the [Llama 3 Community License](https://llama.meta.com/llama3/license/) and the [Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).
 
 
 ## Hardware and Software","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 697dc0f..0a8a481 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -74,9 +74,9 @@ Where to send questions or comments about the model Instructions on how to provi
 
 **Intended Use Cases** Llama 3 is intended for commercial and research use in English. Instruction tuned models are intended for assistant-like chat, whereas pretrained models can be adapted for a variety of natural language generation tasks.
 
-**Out-of-scope** Use in any manner that violates applicable laws or regulations (including trade compliance laws). Use in any other way that is prohibited by the Acceptable Use Policy and Llama 3 Community License. Use in languages other than English**.
+**Out-of-scope** Use in any manner that violates applicable laws or regulations (including trade compliance laws). Use in any other way that is prohibited by the [Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/) and [Llama 3 Community License](https://llama.meta.com/llama3/license/). Use in languages other than English**.
 
-**Note: Developers may fine-tune Llama 3 models for languages beyond English provided they comply with the Llama 3 Community License and the Acceptable Use Policy.
+**Note: Developers may fine-tune Llama 3 models for languages beyond English provided they comply with the [Llama 3 Community License](https://llama.meta.com/llama3/license/) and the [Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).
 
 
 ## Hardware and Software",No
MODEL_CARD.md,MODEL_CARD.md,6ca0a664bc2b1688617fc9513a2f0a25927968dd,359887376f0aaf30e433f23e25df858d8c2a9833,"Update MODEL_CARD.md

Github -> GitHub","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 697dc0f..7629bb7 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -482,7 +482,7 @@ Child Safety risk assessments were conducted using a team of experts, to assess
 
 ### Community 
 
-Generative AI safety requires expertise and tooling, and we believe in the strength of the open community to accelerate its progress. We are active members of open consortiums, including the AI Alliance, Partnership in AI and MLCommons, actively contributing to safety standardization and transparency. We encourage the community to adopt taxonomies like the MLCommons Proof of Concept evaluation to facilitate collaboration and transparency on safety and content evaluations. Our Purple Llama tools are open sourced for the community to use and widely distributed across ecosystem partners including cloud service providers. We encourage community contributions to our [Github repository](https://github.com/meta-llama/PurpleLlama). 
+Generative AI safety requires expertise and tooling, and we believe in the strength of the open community to accelerate its progress. We are active members of open consortiums, including the AI Alliance, Partnership in AI and MLCommons, actively contributing to safety standardization and transparency. We encourage the community to adopt taxonomies like the MLCommons Proof of Concept evaluation to facilitate collaboration and transparency on safety and content evaluations. Our Purple Llama tools are open sourced for the community to use and widely distributed across ecosystem partners including cloud service providers. We encourage community contributions to our [GitHub repository](https://github.com/meta-llama/PurpleLlama). 
 
 Finally, we put in place a set of resources including an [output reporting mechanism](https://developers.facebook.com/llama_output_feedback) and [bug bounty program](https://www.facebook.com/whitehat) to continuously improve the Llama technology with the help of the community. 
 ","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 697dc0f..7629bb7 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -482,7 +482,7 @@ Child Safety risk assessments were conducted using a team of experts, to assess
 
 ### Community 
 
-Generative AI safety requires expertise and tooling, and we believe in the strength of the open community to accelerate its progress. We are active members of open consortiums, including the AI Alliance, Partnership in AI and MLCommons, actively contributing to safety standardization and transparency. We encourage the community to adopt taxonomies like the MLCommons Proof of Concept evaluation to facilitate collaboration and transparency on safety and content evaluations. Our Purple Llama tools are open sourced for the community to use and widely distributed across ecosystem partners including cloud service providers. We encourage community contributions to our [Github repository](https://github.com/meta-llama/PurpleLlama). 
+Generative AI safety requires expertise and tooling, and we believe in the strength of the open community to accelerate its progress. We are active members of open consortiums, including the AI Alliance, Partnership in AI and MLCommons, actively contributing to safety standardization and transparency. We encourage the community to adopt taxonomies like the MLCommons Proof of Concept evaluation to facilitate collaboration and transparency on safety and content evaluations. Our Purple Llama tools are open sourced for the community to use and widely distributed across ecosystem partners including cloud service providers. We encourage community contributions to our [GitHub repository](https://github.com/meta-llama/PurpleLlama). 
 
 Finally, we put in place a set of resources including an [output reporting mechanism](https://developers.facebook.com/llama_output_feedback) and [bug bounty program](https://www.facebook.com/whitehat) to continuously improve the Llama technology with the help of the community. 
 ",No
MODEL_CARD.md,MODEL_CARD.md,cf3ea595be1edfb019d21b14d8b215a39161c860,bb55334adcedfa9f5da66d2e1ed64e6f3dbd82ed,"Update MODEL_CARD.md

per request from Jacob Xu","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 5d4e672..c51e1ee 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -509,4 +509,4 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Contributors
 
-Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Ash JJhaveri; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hamid Shojanazeri; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Ash JJhaveri; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hamid Shojanazeri; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Puxin Xu; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index 5d4e672..c51e1ee 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -509,4 +509,4 @@ Please see the Responsible Use Guide available at [http://llama.meta.com/respons
 
 ## Contributors
 
-Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Ash JJhaveri; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hamid Shojanazeri; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jacob Xu; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos
+Aaditya Singh; Aaron Grattafiori; Abhimanyu Dubey; Abhinav Jauhri; Abhinav Pandey; Abhishek Kadian; Adam Kelsey; Adi Gangidi; Ahmad Al-Dahle; Amit Sangani; Ahuva Goldstand; Aiesha Letman; Ajay Menon; Akhil Mathur; Alan Schelten; Alex Vaughan; Amy Yang; Andrei Lupu; Andres Alvarado; Andrew Gallagher; Andrew Gu; Andrew Ho; Andrew Poulton; Andrew Ryan; Angela Fan; Ankit Ramchandani; Anthony Hartshorn; Archi Mitra; Archie Sravankumar; Artem Korenev; Arun Rao; Ashley Gabriel; Ashwin Bharambe; Assaf Eisenman; Aston Zhang; Ash JJhaveri; Aurelien Rodriguez; Austen Gregerson; Ava Spataru; Baptiste Roziere; Ben Maurer; Benjamin Leonhardi; Bernie Huang; Bhargavi Paranjape; Bing Liu; Binh Tang; Bobbie Chern; Brani Stojkovic; Brian Fuller; Catalina Mejia Arenas; Chao Zhou; Charlotte Caucheteux; Chaya Nayak; Ching-Hsiang Chu; Chloe Bi; Chris Cai; Chris Cox; Chris Marra; Chris McConnell; Christian Keller; Christoph Feichtenhofer; Christophe Touret; Chunyang Wu; Corinne Wong; Cristian Canton Ferrer; Damien Allonsius; Daniel Kreymer; Daniel Haziza; Daniel Li; Danielle Pintz; Danny Livshits; Danny Wyatt; David Adkins; David Esiobu; David Xu; Davide Testuggine; Delia David; Devi Parikh; Dhruv Choudhary; Dhruv Mahajan; Diana Liskovich; Diego Garcia-Olano; Diego Perino; Dieuwke Hupkes; Dingkang Wang; Dustin Holland; Egor Lakomkin; Elina Lobanova; Xiaoqing Ellen Tan; Emily Dinan; Eric Smith; Erik Brinkman; Esteban Arcaute; Filip Radenovic; Firat Ozgenel; Francesco Caggioni; Frank Seide; Frank Zhang; Gabriel Synnaeve; Gabriella Schwarz; Gabrielle Lee; Gada Badeer; Georgia Anderson; Graeme Nail; Gregoire Mialon; Guan Pang; Guillem Cucurell; Hailey Nguyen; Hamid Shojanazeri; Hannah Korevaar; Hannah Wang; Haroun Habeeb; Harrison Rudolph; Henry Aspegren; Hu Xu; Hugo Touvron; Iga Kozlowska; Igor Molybog; Igor Tufanov; Iliyan Zarov; Imanol Arrieta Ibarra; Irina-Elena Veliche; Isabel Kloumann; Ishan Misra; Ivan Evtimov; Jade Copet; Jake Weissman; Jan Geffert; Jana Vranes; Japhet Asher; Jason Park; Jay Mahadeokar; Jean-Baptiste Gaya; Jeet Shah; Jelmer van der Linde; Jennifer Chan; Jenny Hong; Jenya Lee; Jeremy Fu; Jeremy Teboul; Jianfeng Chi; Jianyu Huang; Jie Wang; Jiecao Yu; Joanna Bitton; Joe Spisak; Joelle Pineau; Jon Carvill; Jongsoo Park; Joseph Rocca; Joshua Johnstun; Junteng Jia; Kalyan Vasuden Alwala; Kam Hou U; Kate Plawiak; Kartikeya Upasani; Kaushik Veeraraghavan; Ke Li; Kenneth Heafield; Kevin Stone; Khalid El-Arini; Krithika Iyer; Kshitiz Malik; Kuenley Chiu; Kunal Bhalla; Kyle Huang; Lakshya Garg; Lauren Rantala-Yeary; Laurens van der Maaten; Lawrence Chen; Leandro Silva; Lee Bell; Lei Zhang; Liang Tan; Louis Martin; Lovish Madaan; Luca Wehrstedt; Lukas Blecher; Luke de Oliveira; Madeline Muzzi; Madian Khabsa; Manav Avlani; Mannat Singh; Manohar Paluri; Mark Zuckerberg; Marcin Kardas; Martynas Mankus; Mathew Oldham; Mathieu Rita; Matthew Lennie; Maya Pavlova; Meghan Keneally; Melanie Kambadur; Mihir Patel; Mikayel Samvelyan; Mike Clark; Mike Lewis; Min Si; Mitesh Kumar Singh; Mo Metanat; Mona Hassan; Naman Goyal; Narjes Torabi; Nicolas Usunier; Nikolay Bashlykov; Nikolay Bogoychev; Niladri Chatterji; Ning Dong; Oliver Aobo Yang; Olivier Duchenne; Onur Celebi; Parth Parekh; Patrick Alrassy; Paul Saab; Pavan Balaji; Pedro Rittner; Pengchuan Zhang; Pengwei Li; Petar Vasic; Peter Weng; Polina Zvyagina; Prajjwal Bhargava; Pratik Dubal; Praveen Krishnan; Punit Singh Koura; Puxin Xu; Qing He; Rachel Rodriguez; Ragavan Srinivasan; Rahul Mitra; Ramon Calderer; Raymond Li; Robert Stojnic; Roberta Raileanu; Robin Battey; Rocky Wang; Rohit Girdhar; Rohit Patel; Romain Sauvestre; Ronnie Polidoro; Roshan Sumbaly; Ross Taylor; Ruan Silva; Rui Hou; Rui Wang; Russ Howes; Ruty Rinott; Saghar Hosseini; Sai Jayesh Bondu; Samyak Datta; Sanjay Singh; Sara Chugh; Sargun Dhillon; Satadru Pan; Sean Bell; Sergey Edunov; Shaoliang Nie; Sharan Narang; Sharath Raparthy; Shaun Lindsay; Sheng Feng; Sheng Shen; Shenghao Lin; Shiva Shankar; Shruti Bhosale; Shun Zhang; Simon Vandenhende; Sinong Wang; Seohyun Sonia Kim; Soumya Batra; Sten Sootla; Steve Kehoe; Suchin Gururangan; Sumit Gupta; Sunny Virk; Sydney Borodinsky; Tamar Glaser; Tamar Herman; Tamara Best; Tara Fowler; Thomas Georgiou; Thomas Scialom; Tianhe Li; Todor Mihaylov; Tong Xiao; Ujjwal Karn; Vedanuj Goswami; Vibhor Gupta; Vignesh Ramanathan; Viktor Kerkez; Vinay Satish Kumar; Vincent Gonguet; Vish Vogeti; Vlad Poenaru; Vlad Tiberiu Mihailescu; Vladan Petrovic; Vladimir Ivanov; Wei Li; Weiwei Chu; Wenhan Xiong; Wenyin Fu; Wes Bouaziz; Whitney Meers; Will Constable; Xavier Martinet; Xiaojian Wu; Xinbo Gao; Xinfeng Xie; Xuchao Jia; Yaelle Goldschlag; Yann LeCun; Yashesh Gaur; Yasmine Babaei; Ye Qi; Yenda Li; Yi Wen; Yiwen Song; Youngjin Nam; Yuchen Hao; Yuchen Zhang; Yun Wang; Yuning Mao; Yuzi He; Zacharie Delpierre Coudert; Zachary DeVito; Zahra Hankir; Zhaoduo Wen; Zheng Yan; Zhengxing Chen; Zhenyu Yang; Zoe Papakipos",No
README.md,README.md,cb3564e37bff6422c4ed57df354aca8205bf168a,87d55e86f7170e31c6f46b8f521ed65242109938,Revise grammar,"diff --git a/README.md b/README.md
index cf22961..d4586fe 100644
--- a/README.md
+++ b/README.md
@@ -13,23 +13,23 @@
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.
 
-This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 8B to 70B parameters.
+This release includes model weights and starting code for pre-trained and instruction-tuned Llama 3 language models — including sizes of 8B to 70B parameters.
 
-This repository is intended as a minimal example to load Llama 3 models and run inference. For more detailed examples, see [llama-recipes](https://github.com/facebookresearch/llama-recipes/).
+This repository is a minimal example of loading Llama 3 models and running inference. For more detailed examples, see [llama-recipes](https://github.com/facebookresearch/llama-recipes/).
 
 ## Download
 
-In order to download the model weights and tokenizer, please visit the [Meta Llama website](https://llama.meta.com/llama-downloads/) and accept our License.
+To download the model weights and tokenizer, please visit the [Meta Llama website](https://llama.meta.com/llama-downloads/) and accept our License.
 
-Once your request is approved, you will receive a signed URL over email. Then run the download.sh script, passing the URL provided when prompted to start the download.
+Once your request is approved, you will receive a signed URL over email. Then, run the download.sh script, passing the URL provided when prompted to start the download.
 
-Pre-requisites: Make sure you have `wget` and `md5sum` installed. Then run the script: `./download.sh`.
+Pre-requisites: Ensure you have `wget` and `md5sum` installed. Then run the script: `./download.sh`.
 
-Keep in mind that the links expire after 24 hours and a certain amount of downloads. If you start seeing errors such as `403: Forbidden`, you can always re-request a link.
+Remember that the links expire after 24 hours and a certain amount of downloads. You can always re-request a link if you start seeing errors such as `403: Forbidden`.
 
 ### Access to Hugging Face
 
-We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
+We also provide downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
 
 - Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests used to take up to one hour to get processed.
@@ -57,9 +57,9 @@ huggingface-cli download meta-llama/Meta-Llama-3-8B-Instruct --include ""original
 
 ## Quick Start
 
-You can follow the steps below to quickly get up and running with Llama 3 models. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes).
+You can follow the steps below to get up and running with Llama 3 models quickly. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes).
 
-1. In a conda env with PyTorch / CUDA available clone and download this repository.
+1. Clone and download this repository in a conda env with PyTorch / CUDA.
 
 2. In the top-level directory run:
     ```bash
@@ -72,7 +72,7 @@ You can follow the steps below to quickly get up and running with Llama 3 models
 5. Once you get the email, navigate to your downloaded llama repository and run the download.sh script.
     - Make sure to grant execution permissions to the download.sh script
     - During this process, you will be prompted to enter the URL from the email.
-    - Do not use the “Copy Link” option but rather make sure to manually copy the link from the email.
+    - Do not use the “Copy Link” option; copy the link from the email manually.
 
 6. Once the model/s you want have been downloaded, you can run the model locally using the command below:
 ```bash
@@ -85,7 +85,7 @@ torchrun --nproc_per_node 1 example_chat_completion.py \
 - Replace  `Meta-Llama-3-8B-Instruct/` with the path to your checkpoint directory and `Meta-Llama-3-8B-Instruct/tokenizer.model` with the path to your tokenizer model.
 - The `–nproc_per_node` should be set to the [MP](#inference) value for the model you are using.
 - Adjust the `max_seq_len` and `max_batch_size` parameters as needed.
-- This example runs the [example_chat_completion.py](example_chat_completion.py) found in this repository but you can change that to a different .py file.
+- This example runs the [example_chat_completion.py](example_chat_completion.py) found in this repository, but you can change that to a different .py file.
 
 ## Inference
 
@@ -113,10 +113,10 @@ torchrun --nproc_per_node 1 example_text_completion.py \
 
 ### Instruction-tuned Models
 
-The fine-tuned models were trained for dialogue applications. To get the expected features and performance for them, a specific formatting defined in [`ChatFormat`](https://github.com/meta-llama/llama3/blob/main/llama/tokenizer.py#L202)
-needs to be followed: The prompt begins with a `<|begin_of_text|>` special token, after which one or more messages follow. Each message starts with the `<|start_header_id|>` tag, the role `system`, `user` or `assistant`, and the `<|end_header_id|>` tag. After a double newline `\n\n` the contents of the message follow. The end of each message is marked by the `<|eot_id|>` token.
+The fine-tuned models were trained for dialogue applications. To get the expected features and performance for them, specific formatting defined in [`ChatFormat`](https://github.com/meta-llama/llama3/blob/main/llama/tokenizer.py#L202)
+needs to be followed: The prompt begins with a `<|begin_of_text|>` special token, after which one or more messages follow. Each message starts with the `<|start_header_id|>` tag, the role `system`, `user` or `assistant`, and the `<|end_header_id|>` tag. After a double newline `\n\n`, the message's contents follow. The end of each message is marked by the `<|eot_id|>` token.
 
-You can also deploy additional classifiers for filtering out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/meta-llama/llama-recipes/blob/main/recipes/inference/local_inference/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
+You can also deploy additional classifiers to filter out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/meta-llama/llama-recipes/blob/main/recipes/inference/local_inference/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
 
 Examples using llama-3-8b-chat:
 
@@ -128,11 +128,11 @@ torchrun --nproc_per_node 1 example_chat_completion.py \
 ```
 
 Llama 3 is a new technology that carries potential risks with use. Testing conducted to date has not — and could not — cover all scenarios.
-In order to help developers address these risks, we have created the [Responsible Use Guide](https://ai.meta.com/static-resource/responsible-use-guide/).
+To help developers address these risks, we have created the [Responsible Use Guide](https://ai.meta.com/static-resource/responsible-use-guide/).
 
 ## Issues
 
-Please report any software “bug”, or other problems with the models through one of the following means:
+Please report any software “bug” or other problems with the models through one of the following means:
 - Reporting issues with the model: [https://github.com/meta-llama/llama3/issues](https://github.com/meta-llama/llama3/issues)
 - Reporting risky content generated by the model: [developers.facebook.com/llama_output_feedback](http://developers.facebook.com/llama_output_feedback)
 - Reporting bugs and security concerns: [facebook.com/whitehat/info](http://facebook.com/whitehat/info)
@@ -142,10 +142,10 @@ See [MODEL_CARD.md](MODEL_CARD.md).
 
 ## License
 
-Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements.
+Our model and weights are licensed for researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals and industry through this opportunity while fostering an environment of discovery and ethical AI advancements.
 
 See the [LICENSE](LICENSE) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
 ## Questions
 
-For common questions, the FAQ can be found [here](https://llama.meta.com/faq) which will be kept up to date over time as new questions arise.
+For common questions, the FAQ can be found [here](https://llama.meta.com/faq), which will be updated over time as new questions arise.","diff --git a/README.md b/README.md
index cf22961..d4586fe 100644
--- a/README.md
+++ b/README.md
@@ -13,23 +13,23 @@
 
 We are unlocking the power of large language models. Our latest version of Llama is now accessible to individuals, creators, researchers, and businesses of all sizes so that they can experiment, innovate, and scale their ideas responsibly.
 
-This release includes model weights and starting code for pre-trained and instruction tuned Llama 3 language models — including sizes of 8B to 70B parameters.
+This release includes model weights and starting code for pre-trained and instruction-tuned Llama 3 language models — including sizes of 8B to 70B parameters.
 
-This repository is intended as a minimal example to load Llama 3 models and run inference. For more detailed examples, see [llama-recipes](https://github.com/facebookresearch/llama-recipes/).
+This repository is a minimal example of loading Llama 3 models and running inference. For more detailed examples, see [llama-recipes](https://github.com/facebookresearch/llama-recipes/).
 
 ## Download
 
-In order to download the model weights and tokenizer, please visit the [Meta Llama website](https://llama.meta.com/llama-downloads/) and accept our License.
+To download the model weights and tokenizer, please visit the [Meta Llama website](https://llama.meta.com/llama-downloads/) and accept our License.
 
-Once your request is approved, you will receive a signed URL over email. Then run the download.sh script, passing the URL provided when prompted to start the download.
+Once your request is approved, you will receive a signed URL over email. Then, run the download.sh script, passing the URL provided when prompted to start the download.
 
-Pre-requisites: Make sure you have `wget` and `md5sum` installed. Then run the script: `./download.sh`.
+Pre-requisites: Ensure you have `wget` and `md5sum` installed. Then run the script: `./download.sh`.
 
-Keep in mind that the links expire after 24 hours and a certain amount of downloads. If you start seeing errors such as `403: Forbidden`, you can always re-request a link.
+Remember that the links expire after 24 hours and a certain amount of downloads. You can always re-request a link if you start seeing errors such as `403: Forbidden`.
 
 ### Access to Hugging Face
 
-We are also providing downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
+We also provide downloads on [Hugging Face](https://huggingface.co/meta-llama), in both transformers and native `llama3` formats. To download the weights from Hugging Face, please follow these steps:
 
 - Visit one of the repos, for example [meta-llama/Meta-Llama-3-8B-Instruct](https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct).
 - Read and accept the license. Once your request is approved, you'll be granted access to all the Llama 3 models. Note that requests used to take up to one hour to get processed.
@@ -57,9 +57,9 @@ huggingface-cli download meta-llama/Meta-Llama-3-8B-Instruct --include ""original
 
 ## Quick Start
 
-You can follow the steps below to quickly get up and running with Llama 3 models. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes).
+You can follow the steps below to get up and running with Llama 3 models quickly. These steps will let you run quick inference locally. For more examples, see the [Llama recipes repository](https://github.com/facebookresearch/llama-recipes).
 
-1. In a conda env with PyTorch / CUDA available clone and download this repository.
+1. Clone and download this repository in a conda env with PyTorch / CUDA.
 
 2. In the top-level directory run:
     ```bash
@@ -72,7 +72,7 @@ You can follow the steps below to quickly get up and running with Llama 3 models
 5. Once you get the email, navigate to your downloaded llama repository and run the download.sh script.
     - Make sure to grant execution permissions to the download.sh script
     - During this process, you will be prompted to enter the URL from the email.
-    - Do not use the “Copy Link” option but rather make sure to manually copy the link from the email.
+    - Do not use the “Copy Link” option; copy the link from the email manually.
 
 6. Once the model/s you want have been downloaded, you can run the model locally using the command below:
 ```bash
@@ -85,7 +85,7 @@ torchrun --nproc_per_node 1 example_chat_completion.py \
 - Replace  `Meta-Llama-3-8B-Instruct/` with the path to your checkpoint directory and `Meta-Llama-3-8B-Instruct/tokenizer.model` with the path to your tokenizer model.
 - The `–nproc_per_node` should be set to the [MP](#inference) value for the model you are using.
 - Adjust the `max_seq_len` and `max_batch_size` parameters as needed.
-- This example runs the [example_chat_completion.py](example_chat_completion.py) found in this repository but you can change that to a different .py file.
+- This example runs the [example_chat_completion.py](example_chat_completion.py) found in this repository, but you can change that to a different .py file.
 
 ## Inference
 
@@ -113,10 +113,10 @@ torchrun --nproc_per_node 1 example_text_completion.py \
 
 ### Instruction-tuned Models
 
-The fine-tuned models were trained for dialogue applications. To get the expected features and performance for them, a specific formatting defined in [`ChatFormat`](https://github.com/meta-llama/llama3/blob/main/llama/tokenizer.py#L202)
-needs to be followed: The prompt begins with a `<|begin_of_text|>` special token, after which one or more messages follow. Each message starts with the `<|start_header_id|>` tag, the role `system`, `user` or `assistant`, and the `<|end_header_id|>` tag. After a double newline `\n\n` the contents of the message follow. The end of each message is marked by the `<|eot_id|>` token.
+The fine-tuned models were trained for dialogue applications. To get the expected features and performance for them, specific formatting defined in [`ChatFormat`](https://github.com/meta-llama/llama3/blob/main/llama/tokenizer.py#L202)
+needs to be followed: The prompt begins with a `<|begin_of_text|>` special token, after which one or more messages follow. Each message starts with the `<|start_header_id|>` tag, the role `system`, `user` or `assistant`, and the `<|end_header_id|>` tag. After a double newline `\n\n`, the message's contents follow. The end of each message is marked by the `<|eot_id|>` token.
 
-You can also deploy additional classifiers for filtering out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/meta-llama/llama-recipes/blob/main/recipes/inference/local_inference/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
+You can also deploy additional classifiers to filter out inputs and outputs that are deemed unsafe. See the llama-recipes repo for [an example](https://github.com/meta-llama/llama-recipes/blob/main/recipes/inference/local_inference/inference.py) of how to add a safety checker to the inputs and outputs of your inference code.
 
 Examples using llama-3-8b-chat:
 
@@ -128,11 +128,11 @@ torchrun --nproc_per_node 1 example_chat_completion.py \
 ```
 
 Llama 3 is a new technology that carries potential risks with use. Testing conducted to date has not — and could not — cover all scenarios.
-In order to help developers address these risks, we have created the [Responsible Use Guide](https://ai.meta.com/static-resource/responsible-use-guide/).
+To help developers address these risks, we have created the [Responsible Use Guide](https://ai.meta.com/static-resource/responsible-use-guide/).
 
 ## Issues
 
-Please report any software “bug”, or other problems with the models through one of the following means:
+Please report any software “bug” or other problems with the models through one of the following means:
 - Reporting issues with the model: [https://github.com/meta-llama/llama3/issues](https://github.com/meta-llama/llama3/issues)
 - Reporting risky content generated by the model: [developers.facebook.com/llama_output_feedback](http://developers.facebook.com/llama_output_feedback)
 - Reporting bugs and security concerns: [facebook.com/whitehat/info](http://facebook.com/whitehat/info)
@@ -142,10 +142,10 @@ See [MODEL_CARD.md](MODEL_CARD.md).
 
 ## License
 
-Our model and weights are licensed for both researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals, and industry through this opportunity, while fostering an environment of discovery and ethical AI advancements.
+Our model and weights are licensed for researchers and commercial entities, upholding the principles of openness. Our mission is to empower individuals and industry through this opportunity while fostering an environment of discovery and ethical AI advancements.
 
 See the [LICENSE](LICENSE) file, as well as our accompanying [Acceptable Use Policy](USE_POLICY.md)
 
 ## Questions
 
-For common questions, the FAQ can be found [here](https://llama.meta.com/faq) which will be kept up to date over time as new questions arise.
+For common questions, the FAQ can be found [here](https://llama.meta.com/faq), which will be updated over time as new questions arise.",No
example_chat_completion.py,example_chat_completion.py,16f646494ca9de8872ea94b7d39326ded4d467e2,87d55e86f7170e31c6f46b8f521ed65242109938,"add assertion to validate max_seq_len, ckpt_dir and tokenizer_path to give clear error messages.","diff --git a/example_chat_completion.py b/example_chat_completion.py
index 712dbac..99f000a 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -1,6 +1,8 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
+import os
+
 from typing import List, Optional
 
 import fire
@@ -28,6 +30,10 @@ def main(
 
     `max_gen_len` is optional because finetuned models are able to stop generations naturally.
     """"""
+    assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
+    assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
+    assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
+    
     generator = Llama.build(
         ckpt_dir=ckpt_dir,
         tokenizer_path=tokenizer_path,","diff --git a/example_chat_completion.py b/example_chat_completion.py
index 712dbac..99f000a 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -1,6 +1,8 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
+import os
+
 from typing import List, Optional
 
 import fire
@@ -28,6 +30,10 @@ def main(
 
     `max_gen_len` is optional because finetuned models are able to stop generations naturally.
     """"""
+    assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
+    assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
+    assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
+    
     generator = Llama.build(
         ckpt_dir=ckpt_dir,
         tokenizer_path=tokenizer_path,",No
example_text_completion.py,example_text_completion.py,16f646494ca9de8872ea94b7d39326ded4d467e2,87d55e86f7170e31c6f46b8f521ed65242109938,"add assertion to validate max_seq_len, ckpt_dir and tokenizer_path to give clear error messages.","diff --git a/example_text_completion.py b/example_text_completion.py
index 7b5daa3..62af04f 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -1,6 +1,8 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
+import os
+
 from typing import List
 
 import fire
@@ -24,6 +26,10 @@ def main(
     The context window of llama3 models is 8192 tokens, so `max_seq_len` needs to be <= 8192.
     `max_gen_len` is needed because pre-trained models usually do not stop completions naturally.
     """"""
+    assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
+    assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
+    assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
+
     generator = Llama.build(
         ckpt_dir=ckpt_dir,
         tokenizer_path=tokenizer_path,","diff --git a/example_text_completion.py b/example_text_completion.py
index 7b5daa3..62af04f 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -1,6 +1,8 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
+import os
+
 from typing import List
 
 import fire
@@ -24,6 +26,10 @@ def main(
     The context window of llama3 models is 8192 tokens, so `max_seq_len` needs to be <= 8192.
     `max_gen_len` is needed because pre-trained models usually do not stop completions naturally.
     """"""
+    assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
+    assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
+    assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
+
     generator = Llama.build(
         ckpt_dir=ckpt_dir,
         tokenizer_path=tokenizer_path,",No
eval_details.md,eval_details.md,f5b8f496716b1874bc313e15ab3dbbeff81c4e57,87d55e86f7170e31c6f46b8f521ed65242109938,Update eval_details.md,"diff --git a/eval_details.md b/eval_details.md
index 63d298a..1a43dad 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -3,7 +3,7 @@ This document contains additional context on the settings and parameters for how
 ### Auto-eval benchmark notes
 #### MMLU
 - We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
-- For the instruct-aligned MMLU we ask the model to generate the best choice character
+- The pre-trained models are evaluated in the standard way by calualting the likelihood of each choice character. For the instruct-aligned models, we use a  dialogue prompt (*user/assistant*) for the shots and ask the model to generate the best choice character as answer.
 #### AGI English
 - We use the default few-shot and prompt settings as specified [here](https://github.com/ruixiangcui/AGIEval). The score is averaged over the english subtasks.
 #### CommonSenseQA","diff --git a/eval_details.md b/eval_details.md
index 63d298a..1a43dad 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -3,7 +3,7 @@ This document contains additional context on the settings and parameters for how
 ### Auto-eval benchmark notes
 #### MMLU
 - We are reporting macro averages for MMLU benchmarks. The micro average numbers for MMLU are: 65.4 and 67.4 for the 8B pre-trained and instruct-aligned models, 78.9 and 82.0 for the 70B pre-trained and instruct-aligned models
-- For the instruct-aligned MMLU we ask the model to generate the best choice character
+- The pre-trained models are evaluated in the standard way by calualting the likelihood of each choice character. For the instruct-aligned models, we use a  dialogue prompt (*user/assistant*) for the shots and ask the model to generate the best choice character as answer.
 #### AGI English
 - We use the default few-shot and prompt settings as specified [here](https://github.com/ruixiangcui/AGIEval). The score is averaged over the english subtasks.
 #### CommonSenseQA",No
eval_details.md,eval_details.md,af6eedf7042fb51d00b2b26d8ef1ceaab73e1670,f5b8f496716b1874bc313e15ab3dbbeff81c4e57,"Update eval_details.md

GSM-8K generation length","diff --git a/eval_details.md b/eval_details.md
index 1a43dad..5cbe134 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -30,6 +30,7 @@ This document contains additional context on the settings and parameters for how
 - Same setting as Llama 1 and Llama 2 (pass@1).
 #### GSM8K
 - We use the same 8-shot chain-of-thought prompt as in [Wei et al. (2022)](https://arxiv.org/pdf/2201.11903.pdf) (maj@1).
+- Max generation length is 512 tokens.
 #### MATH
 - We use the 4-shot problem available in [Lewkowycz et al. (2022)](https://arxiv.org/pdf/2206.14858.pdf) (maj@1).
 ### Human evaluation notes","diff --git a/eval_details.md b/eval_details.md
index 1a43dad..5cbe134 100644
--- a/eval_details.md
+++ b/eval_details.md
@@ -30,6 +30,7 @@ This document contains additional context on the settings and parameters for how
 - Same setting as Llama 1 and Llama 2 (pass@1).
 #### GSM8K
 - We use the same 8-shot chain-of-thought prompt as in [Wei et al. (2022)](https://arxiv.org/pdf/2201.11903.pdf) (maj@1).
+- Max generation length is 512 tokens.
 #### MATH
 - We use the 4-shot problem available in [Lewkowycz et al. (2022)](https://arxiv.org/pdf/2206.14858.pdf) (maj@1).
 ### Human evaluation notes",No
MODEL_CARD.md,MODEL_CARD.md,8eec68733ec883a9784647f79c90056d3d13bcef,af6eedf7042fb51d00b2b26d8ef1ceaab73e1670,Slight changes to `MODEL_CARD.md` to organize information,"diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index c51e1ee..aa3017f 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -4,13 +4,13 @@ Meta developed and released the Meta Llama 3 family of large language models (LL
 
 **Model developers** Meta
 
-**Variations** Llama 3 comes in two sizes — 8B and 70B parameters — in pre-trained and instruction tuned variants.
+**Llama 3 family of models** Llama 3 comes in two sizes — 8B and 70B parameters — in pre-trained and instruction tuned variants.
 
 **Input** Models input text only.
 
 **Output** Models generate text and code only.
 
-**Model Architecture** Llama 3 is an auto-regressive language model that uses an optimized transformer architecture. The tuned versions use supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety.
+**Model Architecture** Llama 3 is an auto-regressive language model that uses an optimized transformer architecture. Llama 3 uses a tokenizer with a vocabulary of 128K tokens, and was trained on on sequences of 8,192 tokens. Grouped-Query Attention (GQA) is used for all models to improve inference efficiency. The tuned versions use supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety.
 
 
 <table>
@@ -59,7 +59,7 @@ Meta developed and released the Meta Llama 3 family of large language models (LL
 </table>
 
 
-**Llama 3 family of models**. Token counts refer to pretraining data only. Both the 8 and 70B versions use Grouped-Query Attention (GQA) for improved inference scalability.
+Note: Token counts refer to pretraining data only.
 
 **Model Release Date** April 18, 2024.
 ","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index c51e1ee..aa3017f 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -4,13 +4,13 @@ Meta developed and released the Meta Llama 3 family of large language models (LL
 
 **Model developers** Meta
 
-**Variations** Llama 3 comes in two sizes — 8B and 70B parameters — in pre-trained and instruction tuned variants.
+**Llama 3 family of models** Llama 3 comes in two sizes — 8B and 70B parameters — in pre-trained and instruction tuned variants.
 
 **Input** Models input text only.
 
 **Output** Models generate text and code only.
 
-**Model Architecture** Llama 3 is an auto-regressive language model that uses an optimized transformer architecture. The tuned versions use supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety.
+**Model Architecture** Llama 3 is an auto-regressive language model that uses an optimized transformer architecture. Llama 3 uses a tokenizer with a vocabulary of 128K tokens, and was trained on on sequences of 8,192 tokens. Grouped-Query Attention (GQA) is used for all models to improve inference efficiency. The tuned versions use supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety.
 
 
 <table>
@@ -59,7 +59,7 @@ Meta developed and released the Meta Llama 3 family of large language models (LL
 </table>
 
 
-**Llama 3 family of models**. Token counts refer to pretraining data only. Both the 8 and 70B versions use Grouped-Query Attention (GQA) for improved inference scalability.
+Note: Token counts refer to pretraining data only.
 
 **Model Release Date** April 18, 2024.
 ",No
llama/test_tokenizer.py,llama/test_tokenizer.py,07c61c8e03030cea03e4a6b3c69b4802f03e6aa9,d6e09315954d1a547bf45e37269978c049e73d33,Fixes end_of_header token name in comments,"diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index f11593d..f363244 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -46,7 +46,7 @@ class TokenizerTests(TestCase):
             [
                 128006,  # <|start_header_id|>
                 882,  # ""user""
-                128007,  # <|end_of_header|>
+                128007,  # <|end_of_header_id|>
                 271,  # ""\n\n""
                 2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
                 128009,  # <|eot_id|>
@@ -70,19 +70,19 @@ class TokenizerTests(TestCase):
                 128000,  # <|begin_of_text|>
                 128006,  # <|start_header_id|>
                 9125,     # ""system""
-                128007,  # <|end_of_header|>
+                128007,  # <|end_of_header_id|>
                 271,     # ""\n\n""
                 2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
                 882,     # ""user""
-                128007,  # <|end_of_header|>
+                128007,  # <|end_of_header_id|>
                 271,     # ""\n\n""
                 2028, 374, 264, 2077, 13,  # ""This is a response."",
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
                 78191,   # ""assistant""
-                128007,  # <|end_of_header|>
+                128007,  # <|end_of_header_id|>
                 271,     # ""\n\n""
             ]
         )","diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index f11593d..f363244 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -46,7 +46,7 @@ class TokenizerTests(TestCase):
             [
                 128006,  # <|start_header_id|>
                 882,  # ""user""
-                128007,  # <|end_of_header|>
+                128007,  # <|end_of_header_id|>
                 271,  # ""\n\n""
                 2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
                 128009,  # <|eot_id|>
@@ -70,19 +70,19 @@ class TokenizerTests(TestCase):
                 128000,  # <|begin_of_text|>
                 128006,  # <|start_header_id|>
                 9125,     # ""system""
-                128007,  # <|end_of_header|>
+                128007,  # <|end_of_header_id|>
                 271,     # ""\n\n""
                 2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
                 882,     # ""user""
-                128007,  # <|end_of_header|>
+                128007,  # <|end_of_header_id|>
                 271,     # ""\n\n""
                 2028, 374, 264, 2077, 13,  # ""This is a response."",
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
                 78191,   # ""assistant""
-                128007,  # <|end_of_header|>
+                128007,  # <|end_of_header_id|>
                 271,     # ""\n\n""
             ]
         )",No
download.sh,download.sh,d587ae0ab96a7c50c439025a7b2c1023f403e7f3,cc44ca2e1c269f0e56e6926d7f4837c983c060dc,"Update download.sh

modify for CPU_ARCH not found","diff --git a/download.sh b/download.sh
index 05303d7..2653c9b 100755
--- a/download.sh
+++ b/download.sh
@@ -51,7 +51,8 @@ do
     wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/tokenizer.model""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/tokenizer.model""
     wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/checklist.chk""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/checklist.chk""
     echo ""Checking checksums""
-    if [ ""$CPU_ARCH"" = ""arm64"" ]; then
+    CPU_ARCH=$(uname -m)
+    if [[ ""$CPU_ARCH"" == ""arm64"" ]]; then
       (cd ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}"" && md5 checklist.chk)
     else
       (cd ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}"" && md5sum -c checklist.chk)","diff --git a/download.sh b/download.sh
index 05303d7..2653c9b 100755
--- a/download.sh
+++ b/download.sh
@@ -51,7 +51,8 @@ do
     wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/tokenizer.model""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/tokenizer.model""
     wget --continue ${PRESIGNED_URL/'*'/""${MODEL_PATH}/checklist.chk""} -O ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}/checklist.chk""
     echo ""Checking checksums""
-    if [ ""$CPU_ARCH"" = ""arm64"" ]; then
+    CPU_ARCH=$(uname -m)
+    if [[ ""$CPU_ARCH"" == ""arm64"" ]]; then
       (cd ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}"" && md5 checklist.chk)
     else
       (cd ${TARGET_FOLDER}""/${MODEL_FOLDER_PATH}"" && md5sum -c checklist.chk)",No
llama/test_tokenizer.py,llama/test_tokenizer.py,b20cad1e58f86e324c5df30c74e9dabc51696ddd,07c61c8e03030cea03e4a6b3c69b4802f03e6aa9,update token name,"diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index f363244..5c2a074 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -46,7 +46,7 @@ class TokenizerTests(TestCase):
             [
                 128006,  # <|start_header_id|>
                 882,  # ""user""
-                128007,  # <|end_of_header_id|>
+                128007,  # <|end_header_id|>
                 271,  # ""\n\n""
                 2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
                 128009,  # <|eot_id|>
@@ -70,19 +70,19 @@ class TokenizerTests(TestCase):
                 128000,  # <|begin_of_text|>
                 128006,  # <|start_header_id|>
                 9125,     # ""system""
-                128007,  # <|end_of_header_id|>
+                128007,  # <|end_header_id|>
                 271,     # ""\n\n""
                 2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
                 882,     # ""user""
-                128007,  # <|end_of_header_id|>
+                128007,  # <|end_header_id|>
                 271,     # ""\n\n""
                 2028, 374, 264, 2077, 13,  # ""This is a response."",
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
                 78191,   # ""assistant""
-                128007,  # <|end_of_header_id|>
+                128007,  # <|end_header_id|>
                 271,     # ""\n\n""
             ]
         )","diff --git a/llama/test_tokenizer.py b/llama/test_tokenizer.py
index f363244..5c2a074 100644
--- a/llama/test_tokenizer.py
+++ b/llama/test_tokenizer.py
@@ -46,7 +46,7 @@ class TokenizerTests(TestCase):
             [
                 128006,  # <|start_header_id|>
                 882,  # ""user""
-                128007,  # <|end_of_header_id|>
+                128007,  # <|end_header_id|>
                 271,  # ""\n\n""
                 2028, 374, 264, 1296, 11914, 13,  # This is a test sentence.
                 128009,  # <|eot_id|>
@@ -70,19 +70,19 @@ class TokenizerTests(TestCase):
                 128000,  # <|begin_of_text|>
                 128006,  # <|start_header_id|>
                 9125,     # ""system""
-                128007,  # <|end_of_header_id|>
+                128007,  # <|end_header_id|>
                 271,     # ""\n\n""
                 2028, 374, 264, 1296, 11914, 13,  # ""This is a test sentence.""
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
                 882,     # ""user""
-                128007,  # <|end_of_header_id|>
+                128007,  # <|end_header_id|>
                 271,     # ""\n\n""
                 2028, 374, 264, 2077, 13,  # ""This is a response."",
                 128009,  # <|eot_id|>
                 128006,  # <|start_header_id|>
                 78191,   # ""assistant""
-                128007,  # <|end_of_header_id|>
+                128007,  # <|end_header_id|>
                 271,     # ""\n\n""
             ]
         )",No
example_chat_completion.py,example_chat_completion.py,95d36c2ee122c0a84081d95e663c92c6a60bedee,e2c027f06880f2287939264bcaffa8cb5d5e9cc0,revert changes in examples,"diff --git a/example_chat_completion.py b/example_chat_completion.py
index 99f000a..0b5148f 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -1,8 +1,6 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
-import os
-
 from typing import List, Optional
 
 import fire
@@ -30,10 +28,6 @@ def main(
 
     `max_gen_len` is optional because finetuned models are able to stop generations naturally.
     """"""
-    assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
-    assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
-    assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
-    
     generator = Llama.build(
         ckpt_dir=ckpt_dir,
         tokenizer_path=tokenizer_path,
@@ -87,4 +81,4 @@ These are just a few of the many attractions that Paris has to offer. With so mu
 
 
 if __name__ == ""__main__"":
-    fire.Fire(main)
+    fire.Fire(main)
\ No newline at end of file","diff --git a/example_chat_completion.py b/example_chat_completion.py
index 99f000a..0b5148f 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -1,8 +1,6 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
-import os
-
 from typing import List, Optional
 
 import fire
@@ -30,10 +28,6 @@ def main(
 
     `max_gen_len` is optional because finetuned models are able to stop generations naturally.
     """"""
-    assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
-    assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
-    assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
-    
     generator = Llama.build(
         ckpt_dir=ckpt_dir,
         tokenizer_path=tokenizer_path,
@@ -87,4 +81,4 @@ These are just a few of the many attractions that Paris has to offer. With so mu
 
 
 if __name__ == ""__main__"":
-    fire.Fire(main)
+    fire.Fire(main)
\ No newline at end of file",No
example_text_completion.py,example_text_completion.py,95d36c2ee122c0a84081d95e663c92c6a60bedee,e2c027f06880f2287939264bcaffa8cb5d5e9cc0,revert changes in examples,"diff --git a/example_text_completion.py b/example_text_completion.py
index 62af04f..d11ad6c 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -1,8 +1,6 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
-import os
-
 from typing import List
 
 import fire
@@ -26,10 +24,6 @@ def main(
     The context window of llama3 models is 8192 tokens, so `max_seq_len` needs to be <= 8192.
     `max_gen_len` is needed because pre-trained models usually do not stop completions naturally.
     """"""
-    assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
-    assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
-    assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
-
     generator = Llama.build(
         ckpt_dir=ckpt_dir,
         tokenizer_path=tokenizer_path,
@@ -67,4 +61,4 @@ def main(
 
 
 if __name__ == ""__main__"":
-    fire.Fire(main)
+    fire.Fire(main)
\ No newline at end of file","diff --git a/example_text_completion.py b/example_text_completion.py
index 62af04f..d11ad6c 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -1,8 +1,6 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 # This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.
 
-import os
-
 from typing import List
 
 import fire
@@ -26,10 +24,6 @@ def main(
     The context window of llama3 models is 8192 tokens, so `max_seq_len` needs to be <= 8192.
     `max_gen_len` is needed because pre-trained models usually do not stop completions naturally.
     """"""
-    assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
-    assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
-    assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
-
     generator = Llama.build(
         ckpt_dir=ckpt_dir,
         tokenizer_path=tokenizer_path,
@@ -67,4 +61,4 @@ def main(
 
 
 if __name__ == ""__main__"":
-    fire.Fire(main)
+    fire.Fire(main)
\ No newline at end of file",No
llama/generation.py,llama/generation.py,c4b2f5d8b2019324bfe710fdce8bda08c861a5e7,95d36c2ee122c0a84081d95e663c92c6a60bedee,add add assertion to build function of Llama,"diff --git a/llama/generation.py b/llama/generation.py
index 48a4668..ded93fa 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -64,6 +64,10 @@ class Llama:
             This method initializes the distributed process group, sets the device to CUDA,
             and loads the pre-trained model and tokenizer.
         """"""
+        assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
+        assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
+        assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
+
         if not torch.distributed.is_initialized():
             torch.distributed.init_process_group(""nccl"")
         if not model_parallel_is_initialized():","diff --git a/llama/generation.py b/llama/generation.py
index 48a4668..ded93fa 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -64,6 +64,10 @@ class Llama:
             This method initializes the distributed process group, sets the device to CUDA,
             and loads the pre-trained model and tokenizer.
         """"""
+        assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
+        assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
+        assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
+
         if not torch.distributed.is_initialized():
             torch.distributed.init_process_group(""nccl"")
         if not model_parallel_is_initialized():",No
llama/generation.py,llama/generation.py,23e448f154bc07e0f01db341586b3e0e2e2cc9e4,14aab0428d3ec3a9596f1dea06d9c564f9c0e35f,add assertion to build function of Llama,"diff --git a/llama/generation.py b/llama/generation.py
index 48a4668..96be4b2 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -64,6 +64,10 @@ class Llama:
             This method initializes the distributed process group, sets the device to CUDA,
             and loads the pre-trained model and tokenizer.
         """"""
+        assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
+        assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
+        assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
+        
         if not torch.distributed.is_initialized():
             torch.distributed.init_process_group(""nccl"")
         if not model_parallel_is_initialized():","diff --git a/llama/generation.py b/llama/generation.py
index 48a4668..96be4b2 100644
--- a/llama/generation.py
+++ b/llama/generation.py
@@ -64,6 +64,10 @@ class Llama:
             This method initializes the distributed process group, sets the device to CUDA,
             and loads the pre-trained model and tokenizer.
         """"""
+        assert 1 <= max_seq_len <= 8192, f""max_seq_len must be between 1 and 8192, got {max_seq_len}.""
+        assert os.path.isdir(ckpt_dir), f""Checkpoint directory '{ckpt_dir}' does not exist.""
+        assert os.path.isfile(tokenizer_path), f""Tokenizer file '{tokenizer_path}' does not exist.""
+        
         if not torch.distributed.is_initialized():
             torch.distributed.init_process_group(""nccl"")
         if not model_parallel_is_initialized():",No
example_chat_completion.py,example_chat_completion.py,f2bb4c5b1d1a11152740267e0827eb087d7fef64,bed1106abc33d01309de5a4091332cef56cc0688,add newline at end of file,"diff --git a/example_chat_completion.py b/example_chat_completion.py
index 0b5148f..712dbac 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -81,4 +81,4 @@ These are just a few of the many attractions that Paris has to offer. With so mu
 
 
 if __name__ == ""__main__"":
-    fire.Fire(main)
\ No newline at end of file
+    fire.Fire(main)","diff --git a/example_chat_completion.py b/example_chat_completion.py
index 0b5148f..712dbac 100644
--- a/example_chat_completion.py
+++ b/example_chat_completion.py
@@ -81,4 +81,4 @@ These are just a few of the many attractions that Paris has to offer. With so mu
 
 
 if __name__ == ""__main__"":
-    fire.Fire(main)
\ No newline at end of file
+    fire.Fire(main)",No
example_text_completion.py,example_text_completion.py,f2bb4c5b1d1a11152740267e0827eb087d7fef64,bed1106abc33d01309de5a4091332cef56cc0688,add newline at end of file,"diff --git a/example_text_completion.py b/example_text_completion.py
index d11ad6c..7b5daa3 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -61,4 +61,4 @@ def main(
 
 
 if __name__ == ""__main__"":
-    fire.Fire(main)
\ No newline at end of file
+    fire.Fire(main)","diff --git a/example_text_completion.py b/example_text_completion.py
index d11ad6c..7b5daa3 100644
--- a/example_text_completion.py
+++ b/example_text_completion.py
@@ -61,4 +61,4 @@ def main(
 
 
 if __name__ == ""__main__"":
-    fire.Fire(main)
\ No newline at end of file
+    fire.Fire(main)",No
MODEL_CARD.md,MODEL_CARD.md,e14519ce6a4296858940c68a37bded0a929481d1,d3eca219e453eca77ce1e180f48954c7d67467a9,"Update MODEL_CARD.md

Fixing the incorrect value for Llama 2 13B GSM8K.","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index aa3017f..ff24fb1 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -397,7 +397,7 @@ In this section, we report the results for Llama 3 models on standard automatic
    </td>
    <td>25.7
    </td>
-   <td>77.4
+   <td>41.2
    </td>
    <td>93.0
    </td>","diff --git a/MODEL_CARD.md b/MODEL_CARD.md
index aa3017f..ff24fb1 100644
--- a/MODEL_CARD.md
+++ b/MODEL_CARD.md
@@ -397,7 +397,7 @@ In this section, we report the results for Llama 3 models on standard automatic
    </td>
    <td>25.7
    </td>
-   <td>77.4
+   <td>41.2
    </td>
    <td>93.0
    </td>",No
